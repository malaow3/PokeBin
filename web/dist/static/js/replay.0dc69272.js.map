{"version":3,"file":"static/js/replay.0dc69272.js","sources":["webpack://web/./src/replay.tsx"],"sourcesContent":["import { createSignal, For, onMount } from \"solid-js\";\nimport { render } from \"solid-js/web\";\nimport \"./app.css\";\n\ntype Replay = {\n  id: string;\n  password?: string;\n  format: string;\n  players: string[];\n  private: number;\n  uploadtime: number;\n};\n\nexport default function ReplayFetcher() {\n  const [name, setName] = createSignal(\"\");\n  const [pass, setPass] = createSignal(\"\");\n  const [loading, setLoading] = createSignal(false);\n  const [error, setError] = createSignal<string | null>(null);\n  const [replays, setReplays] = createSignal<Replay[]>([]);\n\n  function getChallstr() {\n    return new Promise((resolve, reject) => {\n      const ws = new WebSocket(\"wss://sim3.psim.us/showdown/websocket\");\n      ws.onmessage = (event) => {\n        const lines = event.data.split(\"\\n\");\n        for (const line of lines) {\n          if (line.startsWith(\"|challstr|\")) {\n            // The challstr is everything after \"|challstr|\"\n            const challstr = line.slice(10);\n            ws.close();\n            resolve(challstr);\n          }\n        }\n      };\n      ws.onerror = (_err) => {\n        reject(new Error(\"WebSocket error\"));\n      };\n      ws.onclose = () => {\n        // Optionally handle close\n      };\n    });\n  }\n\n  async function fetchReplays() {\n    setLoading(true);\n    setError(null);\n    setReplays([]);\n    try {\n      const challstr = await getChallstr();\n      const resp = await fetch(\"/api/fetch-replays\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          name: name(),\n          pass: pass(),\n          challstr: challstr,\n        }),\n      });\n      if (!resp.ok) {\n        alert(\n          \"Unable to fetch replays, please double check your username & password!\",\n        );\n        throw new Error(await resp.text());\n      }\n      const data = await resp.json();\n      setReplays(data);\n    } catch (e) {\n      if (e instanceof Error) {\n        console.error(e.message);\n      } else {\n        console.error(String(e));\n      }\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  function copyAll() {\n    const urls = replays().map((replay) => {\n      let url = `https://replay.pokemonshowdown.com/${replay.id}`;\n      if (replay.password) url += `-${replay.password}pw`;\n      return url;\n    });\n    navigator.clipboard.writeText(urls.join(\"\\n\"));\n  }\n\n  onMount(() => {\n    const wsUrl = \"/ws\";\n    const socket = new WebSocket(wsUrl);\n    socket.onopen = async () => {\n      console.log(\"WebSocket connected to:\", wsUrl);\n    };\n  });\n\n  return (\n    <div class=\"container mx-auto px-4\" style={{ color: \"white\" }}>\n      <div class=\"max-w-3xl mx-auto py-8\">\n        <h1 class=\"text-4xl font-bold mb-4\">\n          Fetch <span class=\"text-[#c2a8d4]\">Showdown</span> Private Replays\n        </h1>\n        <div class=\"mb-6 bg-[#c2a8d4] border rounded-lg p-4 text-black\">\n          <strong>Privacy Notice:</strong> Your Showdown username and password\n          are <span class=\"font-semibold\">never stored</span> on this site. To\n          fetch your private replays, your credentials must be securely sent to\n          our server, which acts as a proxy to bypass Showdownâ€™s CORS\n          restrictions. All data is transmitted over{\" \"}\n          <span class=\"font-semibold\">encrypted HTTPS</span> and is used only\n          for this request.\n        </div>\n        <form\n          class=\"bg-gray-800 rounded-lg p-6 mb-6 shadow\"\n          onSubmit={(e) => {\n            e.preventDefault();\n            fetchReplays();\n          }}\n        >\n          <div class=\"mb-4\">\n            <label class=\"block mb-1 font-semibold\" for=\"username\">\n              Username\n            </label>\n            <input\n              id=\"username\"\n              class=\"w-full px-3 py-2 rounded bg-gray-700 text-white\"\n              value={name()}\n              onInput={(e) => setName(e.currentTarget.value)}\n              required\n              autocomplete=\"username\"\n            />\n          </div>\n          <div class=\"mb-4\">\n            <label class=\"block mb-1 font-semibold\" for=\"password\">\n              Password\n            </label>\n            <input\n              id=\"password\"\n              type=\"password\"\n              class=\"w-full px-3 py-2 rounded bg-gray-700 text-white\"\n              value={pass()}\n              onInput={(e) => setPass(e.currentTarget.value)}\n              required\n              autocomplete=\"current-password\"\n            />\n          </div>\n          <button\n            type=\"submit\"\n            class=\"bg-[#c2a8d4] hover:bg-[#9770b6] text-black font-bold py-2 px-4 rounded\"\n            disabled={loading()}\n          >\n            {loading() ? \"Loading...\" : \"Fetch Replays\"}\n          </button>\n        </form>\n        {error() && (\n          <div class=\"bg-red-700 text-white p-3 rounded mb-4\">{error()}</div>\n        )}\n        {replays().length > 0 && (\n          <div>\n            <button\n              type=\"submit\"\n              class=\"mb-4 bg-sky-600 hover:bg-sky-700 text-white font-bold py-2 px-4 rounded\"\n              onClick={copyAll}\n            >\n              Copy All URLs\n            </button>\n            <div class=\"overflow-x-auto\">\n              <table class=\"min-w-full bg-gray-900 rounded-lg\">\n                <thead>\n                  <tr>\n                    <th class=\"px-4 py-2 text-left\">URL</th>\n                    <th class=\"px-4 py-2 text-left\">Format</th>\n                    <th class=\"px-4 py-2 text-left\">Player 1</th>\n                    <th class=\"px-4 py-2 text-left\">Player 2</th>\n                    <th class=\"px-4 py-2 text-left\">Upload Time</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  <For each={replays()} fallback={null}>\n                    {(replay) => {\n                      let url = `https://replay.pokemonshowdown.com/${replay.id}`;\n                      if (replay.password) url += `-${replay.password}pw`;\n                      return (\n                        <tr>\n                          <td class=\"px-4 py-2 break-all\">\n                            <a\n                              href={url}\n                              target=\"_blank\"\n                              rel=\"noopener noreferrer\"\n                            >\n                              Link\n                            </a>\n                          </td>\n                          <td class=\"px-4 py-2\">{replay.format}</td>\n                          <For each={replay.players} fallback={null}>\n                            {(player) => {\n                              return <td class=\"px-4 py-2\">{player}</td>;\n                            }}\n                          </For>\n                          <td class=\"px-4 py-2\">\n                            {new Date(\n                              replay.uploadtime * 1000,\n                            ).toLocaleString()}\n                          </td>\n                        </tr>\n                      );\n                    }}\n                  </For>\n                </tbody>\n              </table>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\nconst root = document.getElementById(\"root\");\nif (root) {\n  render(() => <ReplayFetcher />, root);\n}\n"],"names":["ReplayFetcher","_el$","_el$2","_el$5","_el$6","_el$8","_el$9","_el$11","_el$12","_c$","_c$2","name","setName","createSignal","pass","setPass","loading","setLoading","error","setError","replays","setReplays","fetchReplays","challstr","Promise","resolve","reject","ws","WebSocket","onmessage","event","line","data","split","startsWith","slice","close","onerror","_err","Error","onclose","resp","fetch","method","headers","body","JSON","stringify","ok","alert","text","json","e","console","message","String","copyAll","urls","map","replay","url","id","password","navigator","clipboard","writeText","join","onMount","socket","onopen","log","_el$7","_el$4","_el$3","_tmpl$","firstChild","nextSibling","_el$10","style","setProperty","addEventListener","preventDefault","$$input","currentTarget","value","_$insert","_$memo","_el$13","_tmpl$2","length","_el$14","_el$15","_el$19","_el$18","_el$17","_el$16","_tmpl$3","$$click","_$createComponent","For","each","fallback","children","_el$20","_el$21","_el$22","_el$23","_el$24","_tmpl$4","_$setAttribute","format","players","player","_el$25","_tmpl$5","Date","uploadtime","toLocaleString","_$effect","disabled","root","document","getElementById","render","_$delegateEvents"],"mappings":"u+DAae,SAASA,QAiFtBC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAsDqDC,EAK9CC,EA3IP,GAAM,CAACC,EAAMC,EAAQ,CAAGC,AAAAA,GAAAA,EAAAA,EAAAA,AAAAA,EAAa,IAC/B,CAACC,EAAMC,EAAQ,CAAGF,AAAAA,GAAAA,EAAAA,EAAAA,AAAAA,EAAa,IAC/B,CAACG,EAASC,EAAW,CAAGJ,AAAAA,GAAAA,EAAAA,EAAAA,AAAAA,EAAa,IACrC,CAACK,EAAOC,EAAS,CAAGN,AAAAA,GAAAA,EAAAA,EAAAA,AAAAA,EAA4B,MAChD,CAACO,EAASC,EAAW,CAAGR,AAAAA,GAAAA,EAAAA,EAAAA,AAAAA,EAAuB,EAAE,EAyBvD,eAAeS,IACbL,EAAW,IACXE,EAAS,MACTE,EAAW,EAAE,EACb,GAAI,CACF,IAAME,EAAW,MA3BZ,IAAIC,QAAQ,CAACC,EAASC,KAC3B,IAAMC,EAAK,IAAIC,UAAU,wCACzBD,CAAAA,EAAGE,SAAS,CAAG,AAACC,IAEd,IAAK,IAAMC,KADGD,EAAME,IAAI,CAACC,KAAK,CAAC,MAE7B,GAAIF,EAAKG,UAAU,CAAC,cAAe,CAEjC,IAAMX,EAAWQ,EAAKI,KAAK,CAAC,IAC5BR,EAAGS,KAAK,GACRX,EAAQF,EACV,CAEJ,EACAI,EAAGU,OAAO,CAAG,AAACC,IACZZ,EAAO,AAAIa,MAAM,mBACnB,EACAZ,EAAGa,OAAO,CAAG,KACX,CAEJ,GASQC,EAAO,MAAMC,MAAM,qBAAsB,CAC7CC,OAAQ,OACRC,QAAS,CAAE,eAAgB,kBAAmB,EAC9CC,KAAMC,KAAKC,SAAS,CAAC,CACnBpC,KAAMA,IACNG,KAAMA,IACNS,SAAUA,CACZ,EACF,GACA,GAAI,CAACkB,EAAKO,EAAE,CAIV,MAHAC,MACE,0EAEI,AAAIV,MAAM,MAAME,EAAKS,IAAI,IAEjC,IAAMlB,EAAO,MAAMS,EAAKU,IAAI,GAC5B9B,EAAWW,EACb,CAAE,MAAOoB,EAAG,CACNA,aAAab,MACfc,QAAQnC,KAAK,CAACkC,EAAEE,OAAO,EAEvBD,QAAQnC,KAAK,CAACqC,OAAOH,GAEzB,QAAU,CACRnC,EAAW,GACb,CACF,CAEA,SAASuC,IACP,IAAMC,EAAOrC,IAAUsC,GAAG,CAAC,AAACC,IAC1B,IAAIC,EAAM,CAAC,mCAAmC,EAAED,EAAOE,EAAE,CAAC,CAAC,CAE3D,OADIF,EAAOG,QAAQ,EAAEF,CAAAA,GAAO,CAAC,CAAC,EAAED,EAAOG,QAAQ,CAAC,EAAE,CAAC,AAAD,EAC3CF,CACT,GACAG,UAAUC,SAAS,CAACC,SAAS,CAACR,EAAKS,IAAI,CAAC,MAC1C,CAUA,MARAC,AAAAA,GAAAA,EAAAA,EAAAA,AAAAA,EAAQ,KAGNC,AADe,IAAIxC,UADL,OAEPyC,MAAM,CAAG,UACdhB,QAAQiB,GAAG,CAAC,0BAHA,MAId,CACF,GAEAjE,EAAAkE,AAAAnE,CAAAA,EAAAD,CAAAA,EAAAqE,AAAAC,AAAAvE,CAAAA,EAAAD,CAAAA,EAAAyE,KAAAC,UAAA,EAAAA,UAAA,CAAAC,WAAA,CAAAA,WAAA,EAAAD,UAAA,EAAAA,UAAA,CAAAC,WAAA,CAAArE,EAAAsE,AAAAvE,CAAAA,EAAAF,EAAAwE,WAAA,EAAAD,UAAA,CAAAC,WAAA,CAAApE,EAAAF,EAAAsE,WAAA,CAAA3E,EAAA6E,KAAA,CAAAC,WAAA,kBAAA5E,EAAA6E,gBAAA,UAiBmB5B,IACTA,EAAE6B,cAAc,GAChB3D,GACF,GAACjB,EAAA6E,OAAA,CAUa9B,GAAMxC,EAAQwC,EAAE+B,aAAa,CAACC,KAAK,EAAC7E,EAAA2E,OAAA,CAcpC9B,GAAMrC,EAAQqC,EAAE+B,aAAa,CAACC,KAAK,EAACC,AAAAA,GAAAA,EAAAA,EAAAA,AAAAA,EAAA7E,EAAA,IAU/CQ,IAAY,aAAe,iBAAeqE,AAAAA,GAAAA,EAAAA,EAAAA,AAAAA,EAAAnF,GAAAO,EAAA6E,AAAAA,GAAAA,EAAAA,EAAAA,AAAAA,EAAA,MAG9CpE,KAAO,KAAP,IAAAqE,SAAA9E,MAAA8E,EAAAC,IAAAH,AAAAA,GAAAA,EAAAA,EAAAA,AAAAA,EAAAE,EACsDrE,GAAKqE,KAC3D,MAAAF,AAAAA,GAAAA,EAAAA,EAAAA,AAAAA,EAAAnF,GAAAQ,EAAA4E,AAAAA,GAAAA,EAAAA,EAAAA,AAAAA,EAAA,IACAlE,IAAUqE,MAAM,CAAG,GAAC,KAApB,IAAAC,EAAAC,EAAAC,SAAAlF,MAAAkF,EAAAC,AAAAC,AAAAC,AAAAJ,CAAAA,EAAAD,CAAAA,EAAAM,KAAArB,UAAA,EAAAC,WAAA,CAAAD,UAAA,CAAAA,UAAA,CAAAC,WAAA,CAAAe,EAAAM,OAAA,CAKczC,EAAO6B,AAAAA,GAAAA,EAAAA,EAAAA,AAAAA,EAAAO,EAAAM,AAAAA,GAAAA,EAAAA,EAAAA,AAAAA,EAgBXC,EAAAA,EAAG,MAACC,MAAI,QAAEhF,GAAS,EAAEiF,SAAU,KAAIC,SAAA,AAChC3C,QAGA4C,EAAAC,EAAAC,EAAAC,EAAAC,EAFA,IAAI/C,EAAM,CAAC,mCAAmC,EAAED,EAAOE,EAAE,CAAC,CAAC,CAE3D,OADIF,EAAOG,QAAQ,EAAEF,CAAAA,GAAO,CAAC,CAAC,EAAED,EAAOG,QAAQ,CAAC,EAAE,CAAC,AAAD,EAClD2C,EAAAD,CAAAA,EAAAD,CAAAA,EAAAK,KAAAjC,UAAA,EAAAA,UAAA,CAAAgC,EAAAD,CAAAA,EAAAF,EAAA5B,WAAA,EAAAA,WAAA,CAAAiC,AAAAA,GAAAA,EAAAA,EAAAA,AAAAA,EAAAJ,EAAA,OAIc7C,GAAGyB,AAAAA,GAAAA,EAAAA,EAAAA,AAAAA,EAAAqB,EAAA,IAOU/C,EAAOmD,MAAM,EAAAzB,AAAAA,GAAAA,EAAAA,EAAAA,AAAAA,EAAAkB,EAAAL,AAAAA,GAAAA,EAAAA,EAAAA,AAAAA,EACnCC,EAAAA,EAAG,MAACC,MAAI,QAAEzC,EAAOoD,OAAO,EAAEV,SAAU,KAAIC,SAAA,AACrCU,IACA,IAAAC,SAAAA,EAAAC,IAAA7B,AAAAA,GAAAA,EAAAA,EAAAA,AAAAA,EAAA4B,EAA8BD,GAAMC,EACrC,GAAAN,GAAAtB,AAAAA,GAAAA,EAAAA,EAAAA,AAAAA,EAAAsB,EAAA,IAGA,IAAIQ,KACHxD,AAAoB,IAApBA,EAAOyD,UAAU,EACjBC,cAAc,IAAEd,CAI1B,CAAC,IAAAb,KAMZ,MAAA4B,AAAAA,GAAAA,EAAAA,EAAAA,AAAAA,EAAA,IAAA9G,EAAA+G,QAAA,CA/DavG,KAASsG,AAAAA,GAAAA,EAAAA,EAAAA,AAAAA,EAAA,IAAAjH,EAAA+E,KAAA,CAvBVzE,KAAM2G,AAAAA,GAAAA,EAAAA,EAAAA,AAAAA,EAAA,IAAA/G,EAAA6E,KAAA,CAcNtE,KAAMb,CA4E3B,CAEA,IAAMuH,EAAOC,SAASC,cAAc,CAAC,OACjCF,CAAAA,GACFG,AAAAA,GAAAA,EAAAA,EAAAA,AAAAA,EAAO,IAAAzB,AAAC,GAADA,EAAAA,EAAAA,AAAAA,EAAOlG,EAAa,IAAKwH,GACjCI,AAAAA,GAAAA,EAAAA,EAAAA,AAAAA,EAAA,kB"}