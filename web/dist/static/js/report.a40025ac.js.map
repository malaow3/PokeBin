{"version":3,"file":"static/js/report.a40025ac.js","sources":["webpack://web/./src/report.tsx"],"sourcesContent":["import { createSignal, onMount, Show } from \"solid-js\";\nimport { render } from \"solid-js/web\";\nimport \"./app.css\";\n\nconst ReportPage = () => {\n  const [pasteLink, setPasteLink] = createSignal(\"\");\n  const [password, setPassword] = createSignal(\"\");\n  const [isValidLink, setIsValidLink] = createSignal(true);\n  const [done, setDone] = createSignal(false);\n  const [errorMessage, setErrorMessage] = createSignal(\"\");\n\n  onMount(() => {\n    const wsUrl = \"/ws\";\n    const socket = new WebSocket(wsUrl);\n    socket.onopen = async () => {\n      console.log(\"WebSocket connected to:\", wsUrl);\n    };\n  });\n\n  const handleSubmit = async (e: { preventDefault: () => void }) => {\n    e.preventDefault();\n\n    setIsValidLink(true); // Reset validation status on each submit\n    setErrorMessage(\"\"); // Reset error message on each submit\n\n    // Basic validation\n    if (!pasteLink()) {\n      alert(\"Please enter the PokeBin link.\");\n      return;\n    }\n\n    // Validate the link format against the full link\n    try {\n      const linkURL = new URL(pasteLink());\n      if (linkURL.hostname !== new URL(\"https://pokebin.com\").hostname) {\n        throw new Error(\"Not a PokeBin link\");\n      }\n      if (!/[a-zA-Z0-9-]+$/.test(linkURL.pathname.slice(1))) {\n        throw new Error(\"Paste ID is invalid\");\n      }\n    } catch (e) {\n      setIsValidLink(false);\n      setErrorMessage(\n        \"Please enter a valid PokeBin link in the format \" +\n          \"https://pokebin.com/your-paste-id.\",\n      );\n      return;\n    }\n\n    // Construct the report data\n    interface ReportData {\n      paste: string;\n      password: string | null;\n    }\n\n    const reportData: ReportData = {\n      paste: pasteLink(),\n      password: password(),\n    };\n\n    if (password() === \"\") {\n      reportData.password = null;\n    }\n\n    try {\n      const response = await fetch(\"/report\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\", // Add content type header\n        },\n        body: JSON.stringify(reportData),\n      });\n\n      if (!response.ok) {\n        const errorBody = await response.text();\n        throw new Error(\n          `Report submission failed: ${response.status} ${response.statusText} - ${errorBody}`,\n        );\n      }\n\n      // Clear the form\n      setPasteLink(\"\");\n      setPassword(\"\");\n      setDone(true);\n    } catch (error) {\n      console.error(\"Error during report submission:\", error);\n      setErrorMessage(\"Failed to submit report. Please try again.\");\n      setDone(false);\n    }\n  };\n\n  return (\n    <div class=\"text-white min-h-screen flex\">\n      <div class=\"container mx-auto px-4 py-8 max-w-xl\">\n        <Show\n          when={!done()}\n          fallback={\n            <h1 class=\"text-2xl font-bold mb-2 text-center text-green-300\">\n              Report Submitted!\n            </h1>\n          }\n        >\n          <h1 class=\"text-3xl font-bold mb-2 text-center\">Report a Paste</h1>\n          <p class=\"mb-4 text-center\">\n            If you believe a paste violates our Terms of Service, please submit\n            a report.\n          </p>\n\n          <form onSubmit={handleSubmit} class=\"max-w-xl mx-auto\">\n            <div class=\"mb-4\">\n              <label\n                for=\"pasteLink\"\n                class=\"block text-gray-300 text-sm font-bold mb-2\"\n              >\n                PokeBin Link:\n              </label>\n              <input\n                type=\"text\"\n                id=\"pasteLink\"\n                value={pasteLink()}\n                onInput={(e) => setPasteLink(e.target.value)}\n                placeholder=\"https://pokebin.com/your-paste-id\"\n                class={`shadow appearance-none border rounded w-full py-2 px-3\n                       leading-tight focus:outline-none\n                       focus:shadow-outline bg-zinc-800 text-white border-zinc-600\n                       ${isValidLink() ? \"\" : \"border-red-500\"}`}\n              />\n              <Show when={!isValidLink()}>\n                <p class=\"text-red-500 text-xs italic\">\n                  Please enter a valid PokeBin link in the format\n                  https://pokebin.com/your-paste-id.\n                </p>\n              </Show>\n            </div>\n\n            <div class=\"mb-6\">\n              <label\n                for=\"password\"\n                class=\"block text-gray-300 text-sm font-bold mb-2\"\n              >\n                Password (if applicable):\n              </label>\n              <input\n                type=\"password\"\n                id=\"password\"\n                value={password()}\n                onInput={(e) => setPassword(e.target.value)}\n                placeholder=\"Enter password if the paste is protected\"\n                class=\"shadow appearance-none border rounded w-full py-2 px-3\n                     leading-tight focus:outline-none\n                     focus:shadow-outline bg-zinc-800 text-white border-zinc-600\"\n              />\n            </div>\n\n            <Show when={errorMessage()}>\n              <div class=\"text-red-500 text-sm mb-4\">{errorMessage()}</div>\n            </Show>\n\n            <div class=\"flex items-center justify-center\">\n              <button\n                type=\"submit\"\n                class=\"bg-[#c2a8d4] hover:bg-[#9770b6] text-black font-bold py-2 px-4\n                     rounded focus:outline-none focus:shadow-outline\"\n              >\n                Submit Report\n              </button>\n            </div>\n          </form>\n        </Show>\n      </div>\n    </div>\n  );\n};\n\nconst root = document.getElementById(\"root\");\nif (root) {\n  render(() => <ReportPage />, root);\n}\n"],"names":["ReportPage","_el$","_el$2","pasteLink","setPasteLink","createSignal","password","setPassword","isValidLink","setIsValidLink","done","setDone","errorMessage","setErrorMessage","onMount","socket","WebSocket","onopen","console","log","handleSubmit","e","preventDefault","alert","linkURL","URL","hostname","Error","test","pathname","slice","reportData","paste","response","fetch","method","headers","body","JSON","stringify","ok","errorBody","text","status","statusText","error","_tmpl$6","firstChild","_$insert","_$createComponent","Show","when","fallback","_tmpl$7","children","_el$5","_el$6","_el$8","_el$10","_el$12","_el$14","_tmpl$","_tmpl$2","_el$7","_tmpl$5","nextSibling","_el$11","addEventListener","$$input","target","value","_tmpl$3","_el$13","_tmpl$4","_$effect","_$className","root","document","getElementById","render","_$delegateEvents"],"mappings":"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"}