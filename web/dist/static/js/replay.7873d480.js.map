{"version":3,"file":"static/js/replay.7873d480.js","sources":["webpack://web/./src/replay.tsx"],"sourcesContent":["import { createSignal, For, onMount, createEffect } from \"solid-js\";\nimport { render } from \"solid-js/web\";\nimport \"./app.css\";\n\ntype Replay = {\n  id: string;\n  password?: string;\n  format: string;\n  players: string[];\n  private: number;\n  uploadtime: number;\n};\n\nexport default function ReplayFetcher() {\n  const [name, setName] = createSignal(\"\");\n  const [pass, setPass] = createSignal(\"\");\n  const [loading, setLoading] = createSignal(false);\n  const [error, setError] = createSignal<string | null>(null);\n  const [replays, setReplays] = createSignal<Replay[]>([]);\n\n  // --- Selection state ---\n  const [selectedIds, setSelectedIds] = createSignal<string[]>([]);\n  let lastCheckedIndex: number | null = null;\n\n  // Helper: get all replay ids\n  const allIds = () => replays().map((r) => r.id);\n\n  // When replays change, select all by default\n  function selectAll() {\n    setSelectedIds(allIds());\n  }\n  function unselectAll() {\n    setSelectedIds([]);\n  }\n\n  // Watch for replays change to select all by default\n  onMount(() => {\n    // Also select all on mount if there are replays\n    if (replays().length > 0) selectAll();\n  });\n  // Use an effect to select all when replays change\n  createEffect(() => {\n    if (replays().length > 0) selectAll();\n  });\n\n  // Checkbox click handler with shift/ctrl support\n  function handleCheckboxClick(e: MouseEvent, replay: Replay, index: number) {\n    const id = replay.id;\n    const prev = selectedIds();\n    let next: string[] = [];\n\n    if (e.shiftKey && lastCheckedIndex !== null) {\n      // Range select\n      const start = Math.min(lastCheckedIndex, index);\n      const end = Math.max(lastCheckedIndex, index);\n      const idsInRange = replays()\n        .slice(start, end + 1)\n        .map((r) => r.id);\n      // If current is checked, add all in range; else, remove all in range\n      if (prev.includes(id)) {\n        // Remove all in range\n        next = prev.filter((x) => !idsInRange.includes(x));\n      } else {\n        // Add all in range\n        next = Array.from(new Set([...prev, ...idsInRange]));\n      }\n    } else if (e.ctrlKey || e.metaKey) {\n      // Toggle single\n      if (prev.includes(id)) {\n        next = prev.filter((x) => x !== id);\n      } else {\n        next = [...prev, id];\n      }\n      lastCheckedIndex = index;\n    } else {\n      // Toggle single, and set lastCheckedIndex\n      if (prev.includes(id)) {\n        next = prev.filter((x) => x !== id);\n      } else {\n        next = [...prev, id];\n      }\n      lastCheckedIndex = index;\n    }\n    setSelectedIds(next);\n  }\n\n  function isChecked(id: string) {\n    return selectedIds().includes(id);\n  }\n\n  function getChallstr() {\n    return new Promise((resolve, reject) => {\n      const ws = new WebSocket(\"wss://sim3.psim.us/showdown/websocket\");\n      ws.onmessage = (event) => {\n        const lines = event.data.split(\"\\n\");\n        for (const line of lines) {\n          if (line.startsWith(\"|challstr|\")) {\n            const challstr = line.slice(10);\n            ws.close();\n            resolve(challstr);\n          }\n        }\n      };\n      ws.onerror = (_err) => {\n        reject(new Error(\"WebSocket error\"));\n      };\n      ws.onclose = () => {};\n    });\n  }\n\n  async function fetchReplays() {\n    setLoading(true);\n    setError(null);\n    setReplays([]);\n    try {\n      const challstr = await getChallstr();\n      const resp = await fetch(\"/api/fetch-replays\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          name: name(),\n          pass: pass(),\n          challstr: challstr,\n        }),\n      });\n      if (!resp.ok) {\n        alert(\n          \"Unable to fetch replays, please double check your username & password!\",\n        );\n        throw new Error(await resp.text());\n      }\n      const data = await resp.json();\n      setReplays(data);\n    } catch (e) {\n      if (e instanceof Error) {\n        console.error(e.message);\n      } else {\n        console.error(String(e));\n      }\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  function copyAll() {\n    const selectedSet = new Set(selectedIds());\n    const urls = replays()\n      .filter((replay) => selectedSet.has(replay.id))\n      .map((replay) => {\n        let url = `https://replay.pokemonshowdown.com/${replay.id}`;\n        if (replay.password) url += `-${replay.password}pw`;\n        return url;\n      });\n    navigator.clipboard.writeText(urls.join(\"\\n\"));\n  }\n\n  onMount(() => {\n    const wsUrl = \"/ws\";\n    const socket = new WebSocket(wsUrl);\n    socket.onopen = async () => {\n      console.log(\"WebSocket connected to:\", wsUrl);\n    };\n  });\n\n  return (\n    <div class=\"container mx-auto px-4\" style={{ color: \"white\" }}>\n      <div class=\"max-w-3xl mx-auto py-8\">\n        <h1 class=\"text-4xl font-bold mb-4\">\n          Fetch <span class=\"text-[#c2a8d4]\">Showdown</span> Private Replays\n        </h1>\n        <div class=\"mb-6 bg-[#c2a8d4] border rounded-lg p-4 text-black\">\n          <strong>Privacy Notice:</strong> Your Showdown username and password\n          are <span class=\"font-semibold\">never stored</span> on this site. To\n          fetch your private replays, your credentials must be securely sent to\n          our server, which acts as a proxy to bypass Showdownâ€™s CORS\n          restrictions. All data is transmitted over{\" \"}\n          <span class=\"font-semibold\">encrypted HTTPS</span> and is used only\n          for this request.\n        </div>\n        <form\n          class=\"bg-gray-800 rounded-lg p-6 mb-6 shadow\"\n          onSubmit={(e) => {\n            e.preventDefault();\n            fetchReplays();\n          }}\n        >\n          <div class=\"mb-4\">\n            <label class=\"block mb-1 font-semibold\" for=\"username\">\n              Username\n            </label>\n            <input\n              id=\"username\"\n              class=\"w-full px-3 py-2 rounded bg-gray-700 text-white\"\n              value={name()}\n              onInput={(e) => setName(e.currentTarget.value)}\n              required\n              autocomplete=\"username\"\n            />\n          </div>\n          <div class=\"mb-4\">\n            <label class=\"block mb-1 font-semibold\" for=\"password\">\n              Password\n            </label>\n            <input\n              id=\"password\"\n              type=\"password\"\n              class=\"w-full px-3 py-2 rounded bg-gray-700 text-white\"\n              value={pass()}\n              onInput={(e) => setPass(e.currentTarget.value)}\n              required\n              autocomplete=\"current-password\"\n            />\n          </div>\n          <button\n            type=\"submit\"\n            class=\"bg-[#c2a8d4] hover:bg-[#9770b6] text-black font-bold py-2 px-4 rounded\"\n            disabled={loading()}\n          >\n            {loading() ? \"Loading...\" : \"Fetch Replays\"}\n          </button>\n        </form>\n        {error() && (\n          <div class=\"bg-red-700 text-white p-3 rounded mb-4\">{error()}</div>\n        )}\n        {replays().length > 0 && (\n          <div>\n            <div class=\"flex gap-2 mb-4\">\n              <button\n                type=\"button\"\n                class=\"bg-sky-600 hover:bg-sky-700 text-white font-bold py-2 px-4 rounded\"\n                onClick={copyAll}\n              >\n                Copy URLs\n              </button>\n              <button\n                type=\"button\"\n                class=\"bg-gray-700 hover:bg-gray-600 text-white font-bold py-2 px-4 rounded\"\n                onClick={unselectAll}\n              >\n                Uncheck All\n              </button>\n              <button\n                type=\"button\"\n                class=\"bg-gray-700 hover:bg-gray-600 text-white font-bold py-2 px-4 rounded\"\n                onClick={selectAll}\n              >\n                Check All\n              </button>\n            </div>\n            <div class=\"overflow-x-auto\">\n              <table class=\"min-w-full bg-gray-900 rounded-lg\">\n                <thead>\n                  <tr>\n                    <th class=\"px-4 py-2 text-left\">\n                      <input\n                        type=\"checkbox\"\n                        checked={selectedIds().length === replays().length}\n                        ref={(el) => {\n                          el.indeterminate =\n                            selectedIds().length > 0 &&\n                            selectedIds().length < replays().length;\n                        }}\n                        onChange={(e) => {\n                          if (e.currentTarget.checked) selectAll();\n                          else unselectAll();\n                        }}\n                      />\n                    </th>\n                    <th class=\"px-4 py-2 text-left\">URL</th>\n                    <th class=\"px-4 py-2 text-left\">Format</th>\n                    <th class=\"px-4 py-2 text-left\">Player 1</th>\n                    <th class=\"px-4 py-2 text-left\">Player 2</th>\n                    <th class=\"px-4 py-2 text-left\">Upload Time</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  <For each={replays()} fallback={null}>\n                    {(replay, i) => {\n                      let url = `https://replay.pokemonshowdown.com/${replay.id}`;\n                      if (replay.password) url += `-${replay.password}pw`;\n                      return (\n                        <tr>\n                          <td class=\"px-4 py-2\">\n                            <input\n                              type=\"checkbox\"\n                              checked={isChecked(replay.id)}\n                              onClick={(e) =>\n                                handleCheckboxClick(\n                                  e as MouseEvent,\n                                  replay,\n                                  i(),\n                                )\n                              }\n                            />\n                          </td>\n                          <td class=\"px-4 py-2 break-all\">\n                            <a\n                              href={url}\n                              target=\"_blank\"\n                              rel=\"noopener noreferrer\"\n                            >\n                              Link\n                            </a>\n                          </td>\n                          <td class=\"px-4 py-2\">{replay.format}</td>\n                          <For each={replay.players} fallback={null}>\n                            {(player) => {\n                              return <td class=\"px-4 py-2\">{player}</td>;\n                            }}\n                          </For>\n                          <td class=\"px-4 py-2\">\n                            {new Date(\n                              replay.uploadtime * 1000,\n                            ).toLocaleString()}\n                          </td>\n                        </tr>\n                      );\n                    }}\n                  </For>\n                </tbody>\n              </table>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\nconst root = document.getElementById(\"root\");\nif (root) {\n  render(() => <ReplayFetcher />, root);\n}\n"],"names":["ReplayFetcher","_el$","_el$2","_el$5","_el$6","_el$8","_el$9","_el$11","_el$12","_c$","_c$2","name","setName","createSignal","pass","setPass","loading","setLoading","error","setError","replays","setReplays","selectedIds","setSelectedIds","lastCheckedIndex","allIds","map","r","id","selectAll","unselectAll","fetchReplays","challstr","Promise","resolve","reject","ws","WebSocket","onmessage","event","line","data","split","startsWith","slice","close","onerror","_err","Error","onclose","resp","fetch","method","headers","body","JSON","stringify","ok","alert","text","json","e","console","message","String","copyAll","selectedSet","Set","urls","filter","replay","has","url","password","navigator","clipboard","writeText","join","onMount","length","createEffect","socket","onopen","log","_el$7","_el$4","_el$3","_tmpl$","firstChild","nextSibling","_el$10","style","setProperty","addEventListener","preventDefault","$$input","currentTarget","value","_$insert","_$memo","_el$13","_tmpl$2","_el$14","_el$15","_el$16","_el$17","_el$18","_el$21","_el$24","_el$25","_tmpl$3","_el$23","_el$22","_el$20","_el$19","$$click","checked","_$use","el","indeterminate","_$createComponent","For","each","fallback","children","i","_el$26","_el$27","_el$28","_el$29","_el$30","_el$31","_el$32","_tmpl$4","handleCheckboxClick","index","prev","next","shiftKey","start","Math","min","end","max","idsInRange","includes","x","Array","from","ctrlKey","metaKey","_$setAttribute","format","players","player","_el$33","_tmpl$5","Date","uploadtime","toLocaleString","_$effect","disabled","root","document","getElementById","render","_$delegateEvents"],"mappings":"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"}