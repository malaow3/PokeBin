{"version":3,"file":"static/js/settings.654ac140.js","sources":["webpack://web/./src/settingsForm.tsx","webpack://web/./src/settingsPage.tsx","webpack://web/./src/settings.ts"],"sourcesContent":["import type { JSX } from \"solid-js\";\nimport type { Settings } from \"./settings\";\n\ntype SettingsFormProps = {\n  settings: Settings;\n  onChange: (key: keyof Settings, value: boolean | number) => void;\n  children?: JSX.Element;\n};\n\nexport function SettingsForm(props: SettingsFormProps) {\n  return (\n    <div class=\"flex flex-col gap-2 w-80\">\n      <div class=\"flex flex-row items-center gap-4\">\n        <label for=\"newFormat\" class=\"font-medium cursor-pointer w-60\">\n          New paste format\n        </label>\n        <input\n          id=\"newFormat\"\n          name=\"newFormat\"\n          type=\"checkbox\"\n          class=\"align-middle\"\n          checked={!!props.settings.newFormat}\n          onChange={(e) => props.onChange(\"newFormat\", e.target.checked)}\n        />\n      </div>\n      <div class=\"flex flex-row items-center gap-4\">\n        <label for=\"colors\" class=\"font-medium cursor-pointer w-60\">\n          Move colors\n        </label>\n        <input\n          id=\"colors\"\n          name=\"colors\"\n          type=\"checkbox\"\n          class=\"align-middle\"\n          checked={props.settings.moveColors}\n          onChange={(e) => props.onChange(\"moveColors\", e.target.checked)}\n        />\n      </div>\n      <div class=\"flex flex-row items-center gap-4\">\n        <label for=\"twoDImages\" class=\"font-medium cursor-pointer w-60\">\n          2D images\n        </label>\n        <input\n          id=\"twoDImages\"\n          name=\"twoDImages\"\n          type=\"checkbox\"\n          class=\"align-middle\"\n          checked={props.settings.twoDImages}\n          onChange={(e) => props.onChange(\"twoDImages\", e.target.checked)}\n        />\n      </div>\n      <div class=\"flex flex-row items-center gap-4\">\n        <label for=\"darkMode\" class=\"font-medium cursor-pointer w-60\">\n          Dark Mode\n        </label>\n        <input\n          id=\"darkMode\"\n          name=\"darkMode\"\n          type=\"checkbox\"\n          class=\"align-middle\"\n          checked={props.settings.darkMode}\n          onChange={(e) => props.onChange(\"darkMode\", e.target.checked)}\n        />\n      </div>\n      <div class=\"flex flex-row items-center gap-4\">\n        <label for=\"lastViewed\" class=\"font-medium cursor-pointer w-60\">\n          Last viewed pastes count\n        </label>\n        <input\n          id=\"lastViewed\"\n          name=\"lastViewed\"\n          type=\"number\"\n          min={0}\n          max={25}\n          class=\"w-20 rounded border border-gray-300 px-2 py-1 focus:outline-none focus:ring-2 focus:ring-indigo-500 bg-white dark:bg-zinc-700 dark:text-white\"\n          value={props.settings.lastViewedCount}\n          onChange={(e) =>\n            props.onChange(\"lastViewedCount\", Number.parseInt(e.target.value))\n          }\n        />\n      </div>\n      {props.children}\n    </div>\n  );\n}\n","import { createEffect, onMount } from \"solid-js\";\nimport { render } from \"solid-js/web\";\nimport { SettingsForm } from \"./settingsForm\";\nimport { initSettings, updateSetting } from \"./settings\";\nimport \"./app.css\";\n\nfunction updateThemeColor(dark: boolean) {\n  let meta = document.querySelector('meta[name=\"theme-color\"]');\n  if (!meta) {\n    meta = document.createElement(\"meta\");\n    meta.setAttribute(\"name\", \"theme-color\");\n    document.head.appendChild(meta);\n  }\n  meta.setAttribute(\"content\", dark ? \"#000000\" : \"#f9f9f9\");\n}\n\nconst SettingsPage = () => {\n  const { sett: settings, setSett: setSettings } = initSettings();\n  // Set theme on mount and when darkMode changes\n  onMount(() => {\n    const dark = settings().darkMode;\n    document.body.classList.toggle(\"dark\", dark);\n    document.body.classList.toggle(\"light\", !dark);\n    updateThemeColor(dark);\n  });\n\n  createEffect(() => {\n    const dark = settings().darkMode;\n    document.body.classList.toggle(\"dark\", dark);\n    document.body.classList.toggle(\"light\", !dark);\n    updateThemeColor(dark);\n  });\n\n  return (\n    <main class=\"min-h-screen flex items-center justify-center bg-[#f9f9f9] dark:bg-zinc-950 transition-colors\">\n      <div class=\"relative bg-white dark:bg-zinc-800 rounded-lg p-6 max-w-xl w-full max-h-[90vh] overflow-y-auto shadow-lg text-black dark:text-white\">\n        <h2 class=\"text-xl font-semibold mb-4\">Settings</h2>\n        <SettingsForm\n          settings={settings()}\n          onChange={(key, value) =>\n            updateSetting(key, value, settings, setSettings)\n          }\n        />\n        <div class=\"mt-8 text-center text-xs text-gray-400 dark:text-gray-500\">\n          Settings are saved in your browser.\n        </div>\n      </div>\n    </main>\n  );\n};\n\nconst root = document.getElementById(\"root\");\nif (root) {\n  render(() => <SettingsPage />, root);\n}\n","import { type Accessor, createSignal } from \"solid-js\";\n\nexport type Settings = {\n  moveColors: boolean;\n  twoDImages: boolean;\n  darkMode: boolean;\n  newFormat: boolean;\n  lastViewedCount: number;\n  lastViewedPacked: string;\n};\n\nexport function initSettings() {\n  const moveColorsString = localStorage.getItem(\"moveColors\");\n  let moveColors = true;\n  if (moveColorsString !== null) {\n    moveColors = JSON.parse(moveColorsString);\n  }\n\n  const twoDImagesString = localStorage.getItem(\"twoDImages\");\n  let twoDImages = false;\n  if (twoDImagesString !== null) {\n    twoDImages = JSON.parse(twoDImagesString);\n  }\n\n  const darkModeString = localStorage.getItem(\"darkMode\");\n  let darkMode = true;\n  if (darkModeString !== null) {\n    darkMode = JSON.parse(darkModeString);\n  }\n\n  const newFormatString = localStorage.getItem(\"newFormat\");\n  let newFormat = false;\n  if (newFormatString !== null) {\n    newFormat = JSON.parse(newFormatString);\n  }\n\n  const lastViewedCountString = localStorage.getItem(\"lastViewedCount\");\n  let lastViewedCount = 20;\n  if (lastViewedCountString !== null) {\n    lastViewedCount = JSON.parse(lastViewedCountString);\n  }\n\n  const lastViewedPackedString = localStorage.getItem(\"lastViewedPacked\");\n  let lastViewedPacked = \"\";\n  if (lastViewedPackedString !== null) {\n    lastViewedPacked = lastViewedPackedString;\n  }\n\n  const initSettings: Settings = {\n    moveColors: moveColors,\n    twoDImages: twoDImages,\n    darkMode: darkMode,\n    newFormat: newFormat,\n    lastViewedCount: lastViewedCount,\n    lastViewedPacked: lastViewedPacked,\n  };\n\n  const [sett, setSett] = createSignal<Settings>(initSettings);\n  return { sett, setSett };\n}\n\nfunction packedToList(packed: string) {\n  const list = packed.split(\"\\n\");\n  return list;\n}\n\nexport type PackedPaste = {\n  id: string;\n  name: string;\n  format: string;\n  pokemon: string[];\n};\n\nexport function getPackedPastes(): PackedPaste[] {\n  const packed = localStorage.getItem(\"lastViewedPacked\");\n  if (packed === null) {\n    return [];\n  }\n  const list: string[] = packedToList(packed);\n  return list.map((item) => {\n    const sections = item.split(\"|\");\n    return {\n      id: sections[0],\n      name: sections[1],\n      format: sections[2],\n      pokemon: sections.slice(3),\n    };\n  });\n}\n\nfunction listToPacked(list: PackedPaste[]): string {\n  let packedString = \"\";\n  for (let i = 0; i < list.length; i++) {\n    if (i > 0) {\n      packedString += \"\\n\";\n    }\n    packedString += `${list[i].id}|${list[i].name}|${list[i].format}`;\n    for (let j = 0; j < list[i].pokemon.length; j++) {\n      packedString += `|${list[i].pokemon[j]}`;\n    }\n  }\n  return packedString;\n}\n\nexport function removePackedPaste(\n  id: string,\n  sett: Accessor<Settings>,\n  setSett: (settings: Settings) => void,\n) {\n  const items = getPackedPastes().filter((item) => item.id !== id);\n  const newPacked = listToPacked(items);\n  localStorage.setItem(\"lastViewedPacked\", newPacked);\n  setSett({ ...sett(), lastViewedPacked: newPacked });\n}\n\nexport function updateSetting(\n  key: string,\n  value: boolean | number | string,\n  sett: Accessor<Settings>,\n  setSett: (settings: Settings) => void,\n) {\n  if (key === \"lastViewedCount\" && typeof value === \"number\") {\n    const list = packedToList(sett().lastViewedPacked);\n    if (value === 0) {\n      setSett({ ...sett(), lastViewedPacked: \"\" });\n    } else {\n      setSett({ ...sett(), lastViewedPacked: list.slice(0, value).join(\"\\n\") });\n    }\n  }\n\n  setSett({ ...sett(), [key]: value });\n  localStorage.setItem(key, JSON.stringify(value));\n}\n"],"names":["SettingsForm","props","_el$","_el$2","_el$4","_el$5","_el$7","_el$8","_el$10","_el$11","_el$13","_el$16","_el$3","_tmpl$","firstChild","nextSibling","_el$6","_el$9","_el$12","_el$15","_el$14","addEventListener","e","onChange","target","checked","Number","parseInt","value","_$insert","children","_$effect","settings","newFormat","moveColors","twoDImages","darkMode","lastViewedCount","updateThemeColor","dark","meta","document","querySelector","createElement","setAttribute","head","appendChild","SettingsPage","sett","setSett","setSettings","initSettings","moveColorsString","localStorage","JSON","twoDImagesString","darkModeString","newFormatString","lastViewedCountString","lastViewedPackedString","lastViewedPacked","createSignal","onMount","body","classList","toggle","createEffect","_$createComponent","key","updateSetting","list","packed","root","getElementById","render"],"mappings":"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"}