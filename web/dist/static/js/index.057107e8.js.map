{"version":3,"file":"static/js/index.057107e8.js","sources":["webpack://web/./src/wasm_helpers.ts","webpack://web/./src/web_wasm_helpers.ts","webpack://web/./src/wasm_utils.ts","webpack://web/./src/patreon.tsx","webpack://web/./src/app.tsx","webpack://web/./src/encryption.ts","webpack://web/./src/index.tsx","webpack://web/webpack/runtime/define_property_getters","webpack://web/webpack/runtime/has_own_property","webpack://web/webpack/runtime/on_chunk_loaded","webpack://web/webpack/runtime/public_path","webpack://web/webpack/runtime/rspack_version","webpack://web/webpack/runtime/jsonp_chunk_loading","webpack://web/webpack/runtime/rspack_unique_id"],"sourcesContent":["export let exports: WebAssemblyExports;\nexport let memory: WebAssembly.Memory;\nimport { encrypt, decrypt } from \"./encryption.ts\";\nimport { type WasmInstance, decodeString } from \"./wasm_utils.ts\";\n\nlet instance: WasmInstance;\n\ninterface WebAssemblyExports {\n  memory: WebAssembly.Memory;\n\n  init(seed: bigint): void;\n\n  allocUint8(length: number): number;\n\n  encryptMessage(\n    buffer_ptr: number,\n    passphrase_len: number,\n    message_len: number,\n  ): boolean;\n\n  resetArena(): void;\n  free(pointer: number, length: number): void;\n\n  getResultPtr(): number;\n  getResultLen(): number;\n  decryptMessage(\n    buffer_ptr: number,\n    passphrase_len: number,\n    encrypted_len: number,\n  ): boolean;\n}\n\nasync function initWasm() {\n  const wasmModule = await WebAssembly.instantiateStreaming(fetch(\"/wasm\"), {\n    env: {\n      _throwError(pointer: number, length: number) {\n        const message = decodeString(instance, pointer, length);\n        throw new Error(message);\n      },\n      _consoleLog(pointer: number, length: number) {\n        const message = decodeString(instance, pointer, length);\n        console.log(message);\n      },\n    },\n  });\n  const inst = wasmModule.instance;\n  exports = inst.exports as unknown as WebAssemblyExports;\n  memory = exports.memory;\n\n  instance = {\n    exports: exports,\n    memory: memory,\n  };\n\n  const now = BigInt(Date.now());\n  exports.init(now);\n}\n\nexport { encrypt, initWasm, decrypt };\n","import type { Accessor, Setter } from \"solid-js\";\nimport type { Settings } from \"./settings.ts\";\nimport {\n  type WasmInstance,\n  decodeNullTerminatedString,\n  decodeString,\n  encodeNullTerminatedString,\n  sizeOfUint32,\n} from \"./wasm_utils.ts\";\nimport { getId } from \"./utils.ts\";\nexport let exports: WebAssemblyExports;\nexport let memory: WebAssembly.Memory;\n\ntype QRResponse = { ptr: number; size: number };\nlet qrResponse: QRResponse = { ptr: 0, size: 0 };\n\nfunction createQRCodeCallback(ptr: number, size: number) {\n  qrResponse = { ptr, size };\n}\n\ninterface WebAssemblyExports {\n  memory: WebAssembly.Memory;\n\n  init(seed: bigint): void;\n\n  allocUint8(length: number): number;\n\n  resetArena(): void;\n  free(pointer: number, length: number): void;\n\n  validatePaste(buffer_ptr: number, paste_len: number): number;\n  parsePaste(\n    buffer_ptr: number,\n    buffer_len: number,\n    twoDimages: boolean,\n  ): number;\n  destroyPaste(paste_ptr: number): void;\n\n  savePasteToLastViewed(\n    limit: number,\n    packedStringPointer: number,\n    packedStringLength: number,\n    pasteJsonPointer: number,\n    pasteJsonLength: number,\n  ): number;\n\n  getPackedPtr(): number;\n  getPackedLen(): number;\n  resetPackedResult(): void;\n  createQRCode(messagePtr: number): void;\n}\n\nlet instance: WasmInstance;\n\nexport async function initWasm() {\n  const version_response = await fetch(\"/version\");\n  const version = await version_response.text();\n  const wasmModule = await WebAssembly.instantiateStreaming(\n    fetch(`/web_wasm?v=${version}`),\n    {\n      env: {\n        _throwError(pointer: number, length: number) {\n          const message = decodeString(instance, pointer, length);\n          throw new Error(message);\n        },\n        _consoleLog(pointer: number, length: number) {\n          const message = decodeString(instance, pointer, length);\n          console.log(message);\n        },\n        createQRCodeCallback,\n      },\n    },\n  );\n  const inst = wasmModule.instance;\n  exports = inst.exports as unknown as WebAssemblyExports;\n  memory = exports.memory;\n\n  instance = {\n    exports: exports,\n    memory: memory,\n  };\n\n  const now = BigInt(Date.now());\n  exports.init(now);\n}\n\nexport function SavePasteToLastVisited(\n  sett: Accessor<Settings>,\n  setSett: Setter<Settings>,\n  paste: Paste,\n) {\n  if (sett().lastViewedCount === 0) {\n    return;\n  }\n  const packedString = sett().lastViewedPacked;\n  const { pointer: packedStringPointer, length: packedStringLength } =\n    encodeNullTerminatedString(instance, packedString);\n\n  // @ts-ignore: we need to add the ID to the paste struct\n  paste.id = getId();\n\n  const { pointer: pasteJsonPointer, length: pasteJsonLength } =\n    encodeNullTerminatedString(instance, JSON.stringify(paste));\n\n  instance.exports.savePasteToLastViewed(\n    sett().lastViewedCount,\n    packedStringPointer,\n    packedStringLength,\n    pasteJsonPointer,\n    pasteJsonLength,\n  );\n\n  const packedPtr = instance.exports.getPackedPtr();\n  const packedLen = instance.exports.getPackedLen();\n\n  if (packedLen === -1) {\n    console.log(\"Failed to get packed string length\");\n    instance.exports.resetPackedResult();\n    return;\n  }\n\n  // Read the packed string as bytes\n  const packedBytes = new Uint8Array(memory.buffer, packedPtr, packedLen);\n\n  // Decode as UTF-8 string\n  const packed = new TextDecoder().decode(packedBytes);\n  console.log(packed);\n\n  setSett({ ...sett(), lastViewedPacked: packed });\n  localStorage.setItem(\"lastViewedPacked\", packed);\n\n  instance.exports.resetPackedResult();\n  instance.exports.resetArena();\n}\n\nexport function validatePaste(paste: string): number {\n  if (!exports || !memory) {\n    return -1;\n  }\n\n  const pasteBuffer = new TextEncoder().encode(paste);\n  const buffer_ptr = exports.allocUint8(pasteBuffer.length);\n  if (!buffer_ptr) {\n    console.error(\"Failed to allocate memory\");\n    return -1;\n  }\n\n  // Get a view of memory\n  const memoryView = new Uint8Array(exports.memory.buffer);\n\n  // Copy the entire buffer\n  memoryView.set(pasteBuffer, buffer_ptr);\n\n  const success = exports.validatePaste(buffer_ptr, pasteBuffer.length);\n  exports.resetArena();\n\n  return success;\n}\n\nfunction alignTo4Bytes(pointer: number): number {\n  return Math.ceil(pointer / 4) * 4;\n}\n\nexport type Move = {\n  name: string;\n  type1: string;\n};\n\nexport type Pokemon = {\n  name: string;\n  nickname: string;\n  item: string;\n  gender: string;\n  item_image: string;\n  pokemon_image: string;\n  moves_len: number;\n  moves: Move[];\n  evs: number[];\n  ivs: number[];\n  lines_count: number;\n  lines: string[];\n  last_stat_ev: string;\n  last_stat_iv: string;\n  type1: string;\n  type2: string;\n  ability: string;\n  level: number;\n  shiny: string;\n  hidden_power: string;\n  tera_type: string;\n  nature: string;\n};\n\nexport type Paste = {\n  title: string;\n  author: string;\n  notes: string;\n  format: string;\n  rental: string;\n  pokemon_len: number;\n  pokemon: Pokemon[];\n  isOts: boolean;\n};\n\nfunction decodeMove(movePtr: number): Move {\n  try {\n    let offset = 0;\n    const namePtr = new Uint32Array(memory.buffer, movePtr, 1);\n    const nameSlice = namePtr[0];\n    const name = decodeNullTerminatedString(instance, nameSlice);\n    offset += sizeOfUint32;\n\n    const type1Ptr = new Uint32Array(memory.buffer, movePtr + offset, 1);\n    const type1Slice = type1Ptr[0];\n    const type1 = decodeNullTerminatedString(instance, type1Slice);\n\n    return { name, type1 };\n  } catch (e) {\n    console.error(e);\n    return { name: \"\", type1: \"\" };\n  }\n}\n\nfunction decodePokemon(pokemonPtr: number): Pokemon {\n  try {\n    const basePtr = pokemonPtr;\n    let offset = 0;\n    const namePtr = new Uint32Array(memory.buffer, basePtr, 1);\n    const nameSlice = namePtr[0];\n    const name = decodeNullTerminatedString(instance, nameSlice);\n    offset += sizeOfUint32;\n\n    const nicknamePtr = new Uint32Array(memory.buffer, basePtr + offset, 1);\n    const nicknameSlice = nicknamePtr[0];\n    const nickname = decodeNullTerminatedString(instance, nicknameSlice);\n    offset += sizeOfUint32;\n\n    const itemPtr = new Uint32Array(memory.buffer, basePtr + offset, 1);\n    const itemSlice = itemPtr[0];\n    const item = decodeNullTerminatedString(instance, itemSlice);\n    offset += sizeOfUint32;\n\n    const genderPtr = new Uint32Array(memory.buffer, basePtr + offset, 1);\n    const genderNum = genderPtr[0];\n    offset += sizeOfUint32;\n\n    const itemImagePtr = new Uint32Array(memory.buffer, basePtr + offset, 1);\n    const itemImageSlice = itemImagePtr[0];\n    const itemImage = decodeNullTerminatedString(instance, itemImageSlice);\n    offset += sizeOfUint32;\n\n    const pokemonImagePtr = new Uint32Array(memory.buffer, basePtr + offset, 1);\n    const pokemonImageSlice = pokemonImagePtr[0];\n    const pokemonImage = decodeNullTerminatedString(\n      instance,\n      pokemonImageSlice,\n    );\n    offset += sizeOfUint32;\n\n    const movesLenPtr = new Uint32Array(memory.buffer, basePtr + offset, 1);\n    const moves_len = movesLenPtr[0];\n    offset += sizeOfUint32;\n\n    const moves: Move[] = [];\n    if (moves_len > 0) {\n      const movesArrayPtrSlice = new Uint32Array(\n        memory.buffer,\n        basePtr + offset,\n        1,\n      );\n      const movesArrayPointer = movesArrayPtrSlice[0];\n\n      const movesArray = new Uint32Array(\n        memory.buffer,\n        movesArrayPointer,\n        moves_len,\n      );\n\n      if (moves_len > 0) {\n        for (let i = 0; i < moves_len; i++) {\n          const currentMovePtr = movesArray[i];\n          try {\n            const move = decodeMove(currentMovePtr);\n            moves.push(move);\n          } catch (e) {\n            console.error(`Error decoding move at index ${i}:`, e);\n          }\n        }\n      }\n    }\n    offset += sizeOfUint32;\n\n    let gender = \"\";\n    if (genderNum === 77) {\n      gender = \"M\";\n    } else if (genderNum === 70) {\n      gender = \"F\";\n    }\n\n    const evs: number[] = [];\n    for (let i = 0; i < 6; i++) {\n      const evPtr = new Uint32Array(memory.buffer, basePtr + offset, 1);\n      const evValue = evPtr[0];\n      evs.push(evValue);\n      offset += sizeOfUint32;\n    }\n\n    const ivs: number[] = [];\n    for (let i = 0; i < 6; i++) {\n      const ivPtr = new Uint32Array(memory.buffer, basePtr + offset, 1);\n      const ivValue = ivPtr[0];\n      ivs.push(ivValue);\n      offset += sizeOfUint32;\n    }\n\n    const linesLenPointer = basePtr + offset;\n    const linesLenSlice = new Uint32Array(memory.buffer, linesLenPointer, 1);\n    const lines_len = linesLenSlice[0];\n    offset += sizeOfUint32;\n\n    const lines: string[] = [];\n    if (lines_len > 0) {\n      // Decode items array pointer - ensure 4-byte alignment\n      const linesArrayPtrPointer = basePtr + offset;\n      const linesArrayPtrSlice = new Uint32Array(\n        memory.buffer,\n        linesArrayPtrPointer,\n        1,\n      );\n      const linesArrayPointer = linesArrayPtrSlice[0];\n\n      // Decode each line - ensure the pointer is properly aligned\n      const alignedLinesArrayPointer = alignTo4Bytes(linesArrayPointer);\n      const linesArraySlice = new Uint32Array(\n        memory.buffer,\n        alignedLinesArrayPointer,\n        lines_len,\n      );\n\n      for (let i = 0; i < lines_len; i++) {\n        const linePtr = linesArraySlice[i];\n        const line = decodeNullTerminatedString(instance, linePtr);\n        lines.push(line);\n      }\n\n      offset += sizeOfUint32 * lines_len;\n    } else {\n      offset += sizeOfUint32;\n    }\n\n    const lastStatEvPtr = new Uint32Array(memory.buffer, basePtr + offset, 1);\n    const lastStatEvSlice = lastStatEvPtr[0];\n    const last_stat_ev = decodeNullTerminatedString(instance, lastStatEvSlice);\n    offset += sizeOfUint32;\n\n    const lastStatIvPtr = new Uint32Array(memory.buffer, basePtr + offset, 1);\n    const lastStatIvSlice = lastStatIvPtr[0];\n    const last_stat_iv = decodeNullTerminatedString(instance, lastStatIvSlice);\n    offset += sizeOfUint32;\n\n    const type1Ptr = new Uint32Array(memory.buffer, basePtr + offset, 1);\n    const type1Slice = type1Ptr[0];\n    const type1 = decodeNullTerminatedString(instance, type1Slice);\n    offset += sizeOfUint32;\n\n    const type2Ptr = new Uint32Array(memory.buffer, basePtr + offset, 1);\n    const type2Slice = type2Ptr[0];\n    const type2 = decodeNullTerminatedString(instance, type2Slice);\n    offset += sizeOfUint32;\n\n    const abilityPtr = new Uint32Array(memory.buffer, basePtr + offset, 1);\n    const abilitySlice = abilityPtr[0];\n    const ability = decodeNullTerminatedString(instance, abilitySlice);\n    offset += sizeOfUint32;\n\n    const levelPtr = new Uint32Array(memory.buffer, basePtr + offset, 1);\n    const level = levelPtr[0];\n    offset += sizeOfUint32;\n\n    const shinyPtr = new Uint32Array(memory.buffer, basePtr + offset, 1);\n    const shinySlice = shinyPtr[0];\n    const shiny = decodeNullTerminatedString(instance, shinySlice);\n    offset += sizeOfUint32;\n\n    const hpPointer = new Uint32Array(memory.buffer, basePtr + offset, 1);\n    const hpSlice = hpPointer[0];\n    const hidden_power = decodeNullTerminatedString(instance, hpSlice);\n    offset += sizeOfUint32;\n\n    const teraTypePointer = new Uint32Array(memory.buffer, basePtr + offset, 1);\n    const teraTypeSlice = teraTypePointer[0];\n    const tera_type = decodeNullTerminatedString(instance, teraTypeSlice);\n    offset += sizeOfUint32;\n\n    const naturePointer = new Uint32Array(memory.buffer, basePtr + offset, 1);\n    const natureSlice = naturePointer[0];\n    const nature = decodeNullTerminatedString(instance, natureSlice);\n    offset += sizeOfUint32;\n\n    return {\n      name,\n      nickname,\n      item,\n      gender,\n      item_image: itemImage,\n      pokemon_image: pokemonImage,\n      moves_len: moves_len,\n      moves,\n      evs,\n      ivs,\n      lines_count: lines_len,\n      lines,\n      last_stat_ev,\n      last_stat_iv,\n      type1,\n      type2,\n      ability,\n      level,\n      shiny,\n      hidden_power,\n      tera_type,\n      nature,\n    };\n  } catch (e) {\n    console.error(e);\n    return {\n      name: \"\",\n      nickname: \"\",\n      item: \"\",\n      gender: \"\",\n      item_image: \"\",\n      pokemon_image: \"\",\n      moves_len: 0,\n      moves: [],\n      evs: [],\n      ivs: [],\n      lines_count: 0,\n      lines: [],\n      last_stat_ev: \"\",\n      last_stat_iv: \"\",\n      type1: \"\",\n      type2: \"\",\n      ability: \"\",\n      level: 100,\n      shiny: \"\",\n      hidden_power: \"\",\n      tera_type: \"\",\n      nature: \"\",\n    };\n  }\n}\n\nfunction decodePaste(pastePtr: number): Paste {\n  try {\n    // Access the header pointer\n    const titleSlice = new Uint32Array(memory.buffer, pastePtr, 1);\n    const titlePtr = titleSlice[0];\n    const title = decodeNullTerminatedString(instance, titlePtr);\n\n    const authorSlice = new Uint32Array(\n      memory.buffer,\n      pastePtr + sizeOfUint32,\n      1,\n    );\n    const authorPtr = authorSlice[0];\n    const author = decodeNullTerminatedString(instance, authorPtr);\n\n    const notesSlice = new Uint32Array(\n      memory.buffer,\n      pastePtr + sizeOfUint32 * 2,\n      1,\n    );\n    const notesPtr = notesSlice[0];\n    const notes = decodeNullTerminatedString(instance, notesPtr);\n\n    const formatSlice = new Uint32Array(\n      memory.buffer,\n      pastePtr + sizeOfUint32 * 3,\n      1,\n    );\n    const formatPtr = formatSlice[0];\n    const format = decodeNullTerminatedString(instance, formatPtr);\n\n    const rentalSlice = new Uint32Array(\n      memory.buffer,\n      pastePtr + sizeOfUint32 * 4,\n      1,\n    );\n    const rentalPtr = rentalSlice[0];\n    const rental = decodeNullTerminatedString(instance, rentalPtr);\n\n    const pokemonLenPtr = pastePtr + sizeOfUint32 * 5;\n    const pokemonLenSlice = new Uint32Array(memory.buffer, pokemonLenPtr, 1);\n    const pokemon_len = pokemonLenSlice[0];\n\n    // Decode items array pointer - ensure 4-byte alignment\n    const pokemonArrayPtrPointer = alignTo4Bytes(pastePtr + sizeOfUint32 * 6);\n    const pokemonArrayPtrSlice = new Uint32Array(\n      memory.buffer,\n      pokemonArrayPtrPointer,\n      1,\n    );\n    const pokemonArrayPointer = pokemonArrayPtrSlice[0];\n\n    // Decode each item - ensure the pointer is properly aligned\n    const pokemon: Pokemon[] = [];\n    const alignedPokemonArrayPointer = alignTo4Bytes(pokemonArrayPointer);\n    const pokemonArraySlice = new Uint32Array(\n      memory.buffer,\n      alignedPokemonArrayPointer,\n      pokemon_len,\n    );\n\n    for (let i = 0; i < pokemon_len; i++) {\n      const pokemonPtr = pokemonArraySlice[i];\n      const mon = decodePokemon(pokemonPtr);\n      pokemon.push(mon);\n    }\n\n    const isOtsOffset = pokemonArrayPtrPointer + sizeOfUint32;\n    const isOtsValue = new Uint32Array(memory.buffer, isOtsOffset, 1)[0];\n    const isOts = isOtsValue === 1;\n\n    const paste = {\n      title,\n      author,\n      notes,\n      format,\n      rental,\n      pokemon_len,\n      pokemon,\n      isOts,\n    };\n\n    return paste;\n  } finally {\n    exports.destroyPaste(pastePtr);\n  }\n}\n\nexport function parsePaste(data: string, twoDimages: boolean): Paste | null {\n  if (!exports || !memory) {\n    return null;\n  }\n\n  const { pointer, length } = encodeNullTerminatedString(instance, data);\n\n  const pastePtr = exports.parsePaste(pointer, length, twoDimages);\n  const paste = decodePaste(pastePtr);\n\n  exports.resetArena();\n\n  return paste;\n}\n\nexport function utf8ToBase64(str: string | undefined) {\n  // Encode to UTF-8 bytes, then to base64\n  return btoa(String.fromCharCode(...new TextEncoder().encode(str)));\n}\n\nexport function base64ToUtf8(b64: string) {\n  // Decode base64 to bytes, then decode as UTF-8\n  return new TextDecoder().decode(\n    Uint8Array.from(atob(b64), (c) => c.charCodeAt(0)),\n  );\n}\n\nfunction renderQRCode(\n  matrix: number[] | Uint8Array<ArrayBuffer>,\n  size: number,\n) {\n  const canvas = document.createElement(\"canvas\");\n  const ctx = canvas.getContext(\"2d\");\n  if (ctx === null) {\n    return;\n  }\n\n  const canvasScale = 10;\n  const canvasSize = canvasScale * size;\n\n  canvas.width = canvasSize;\n  canvas.height = canvasSize;\n\n  ctx.scale(canvasScale, canvasScale);\n\n  ctx.fillStyle = \"white\";\n  ctx.fillRect(0, 0, size, size);\n\n  ctx.fillStyle = \"black\";\n\n  for (let r = 0; r < size; r++) {\n    for (let c = 0; c < size; c++) {\n      if (matrix[r * size + c] === 1) {\n        ctx.fillRect(c, r, 1, 1);\n      }\n    }\n  }\n\n  return canvas.toDataURL(\"image/png\");\n}\n\nexport function createQRCode(message: string) {\n  const buffer = new TextEncoder().encode(message);\n  const messagePtr = exports.allocUint8(buffer.length + 1);\n  const slice = new Uint8Array(memory.buffer, messagePtr, buffer.length + 1);\n  slice.set(buffer);\n  slice[buffer.length] = 0;\n\n  exports.createQRCode(messagePtr);\n  // createQRCodeCallback is called by the wasm module\n\n  const matrix = new Uint8Array(\n    memory.buffer,\n    qrResponse.ptr,\n    qrResponse.size * qrResponse.size,\n  );\n  const url = renderQRCode(matrix, qrResponse.size);\n\n  exports.free(messagePtr, message.length);\n  exports.free(qrResponse.ptr, qrResponse.size * qrResponse.size);\n  return url;\n}\n","export const sizeOfUint32 = Uint32Array.BYTES_PER_ELEMENT;\nexport const sizeOfNullByte = Uint8Array.BYTES_PER_ELEMENT;\nexport const nullByte = 0x00;\n\nexport type WasmInstance = {\n  // biome-ignore lint/suspicious/noExplicitAny : The exports type can change based on the Wasm module\n  exports: any;\n  memory: WebAssembly.Memory;\n};\n\nexport function decodeString(\n  instance: WasmInstance,\n  pointer: number,\n  length: number,\n) {\n  const slice = new Uint8Array(instance.memory.buffer, pointer, length);\n  return new TextDecoder().decode(slice);\n}\n\nexport function decodeNullTerminatedString(\n  instance: WasmInstance,\n  pointer: number,\n) {\n  if (pointer === 0) return \"\";\n\n  // Get current memory buffer size\n  const memSize = instance.memory.buffer.byteLength;\n\n  // Ensure pointer is within bounds\n  if (pointer >= memSize) {\n    console.error(`Invalid pointer: ${pointer} exceeds memory size ${memSize}`);\n    return \"\";\n  }\n\n  // Create a view starting from pointer\n  const slice = new Uint8Array(instance.memory.buffer, pointer);\n\n  // Find null terminator, but limit search to avoid buffer overflow\n  const maxLength = memSize - pointer;\n  const length = slice.findIndex((value: number, index) => {\n    if (index >= maxLength) return true;\n    return value === nullByte;\n  });\n\n  if (length === -1 || length === 0) {\n    return \"\";\n  }\n\n  try {\n    return decodeString(instance, pointer, length);\n  } catch (e) {\n    console.error(`Failed to decode string at pointer ${pointer}:`, e);\n    return \"\";\n  }\n}\n\nexport function encodeNullTerminatedString(\n  instance: WasmInstance,\n  string: string,\n) {\n  const buffer = new TextEncoder().encode(string);\n  const sizeOfNullTerminatedString = buffer.length + sizeOfNullByte;\n  const pointer = instance.exports.allocUint8(sizeOfNullTerminatedString);\n  const slice = new Uint8Array(\n    instance.memory.buffer,\n    pointer,\n    sizeOfNullTerminatedString,\n  );\n  slice.set(buffer);\n  slice[buffer.length] = nullByte;\n  return { pointer, length: buffer.length };\n}\n","import \"./patreon.css\";\n\nfunction PatreonButton() {\n  return (\n    <div style=\"user-select: none !important; z-index: 9999\">\n      <a\n        class=\"patreon-button\"\n        href=\"https://patreon.com/malaow3\"\n        target=\"_blank\"\n        rel=\"noreferrer\"\n      >\n        <img\n          width=\"16\"\n          height=\"16\"\n          class=\"octicon rounded-2 d-block\"\n          alt=\"patreon\"\n          src=\"https://github.githubassets.com/assets/patreon-96b15b9db4b9.svg\"\n        />\n        <span class=\"ml-2\">Support on Patreon</span>\n      </a>\n    </div>\n  );\n}\n\nexport default PatreonButton;\n","import \"./app.css\";\nimport { onMount, createSignal, Show, createEffect } from \"solid-js\";\nimport { encrypt, initWasm } from \"./wasm_helpers.ts\";\nimport {\n  initWasm as initWebWasm,\n  validatePaste,\n  utf8ToBase64,\n} from \"./web_wasm_helpers.ts\";\nimport PatreonButton from \"./patreon.tsx\";\nimport logo from \"../public/logo/large_logo_cropped.webp\";\n\nfunction updateThemeColor(dark: boolean) {\n  let meta = document.querySelector('meta[name=\"theme-color\"]');\n  if (!meta) {\n    meta = document.createElement(\"meta\");\n    meta.setAttribute(\"name\", \"theme-color\");\n    document.head.appendChild(meta);\n  }\n  meta.setAttribute(\"content\", dark ? \"#000000\" : \"#f9f9f9\");\n}\n\nconst App = () => {\n  // Initialize refs with createSignal to track when they're defined\n  const [form, setForm] = createSignal<HTMLFormElement | undefined>();\n  const [paste, setPaste] = createSignal<HTMLTextAreaElement | undefined>();\n  const [password, setPassword] = createSignal<HTMLInputElement | undefined>();\n  const [title, setTitle] = createSignal<HTMLInputElement | undefined>();\n  const [author, setAuthor] = createSignal<HTMLInputElement | undefined>();\n  const [notes, setNotes] = createSignal<HTMLTextAreaElement | undefined>();\n  const [format, setFormat] = createSignal<HTMLInputElement | undefined>();\n  const [rental, setRental] = createSignal<HTMLInputElement | undefined>();\n  const [data, setData] = createSignal<HTMLInputElement | undefined>();\n  const [notesLabel, setNotesLabel] = createSignal<\n    HTMLLabelElement | undefined\n  >();\n  const [footer, setFooter] = createSignal<HTMLDivElement | undefined>();\n  const [top, setTop] = createSignal<HTMLDivElement | undefined>();\n  const [belowNotes, setBelowNotes] = createSignal<\n    HTMLDivElement | undefined\n  >();\n  const [total, setTotal] = createSignal<string>(\"\");\n  const [live, setLive] = createSignal<string>(\"\");\n  const [isReady, setIsReady] = createSignal(false);\n\n  const darkModeString = localStorage.getItem(\"darkMode\");\n  let darkMode = true;\n  if (darkModeString !== null) {\n    darkMode = JSON.parse(darkModeString);\n  }\n\n  const [sett, _] = createSignal({\n    darkMode: darkMode,\n  });\n\n  function darkModeToggle() {\n    const body = document.getElementsByTagName(\"body\")[0];\n    if (sett().darkMode) {\n      body.classList.add(\"dark\");\n      body.classList.remove(\"light\");\n    } else {\n      body.classList.add(\"light\");\n      body.classList.remove(\"dark\");\n    }\n    updateThemeColor(sett().darkMode);\n  }\n\n  createEffect(() => {\n    darkModeToggle();\n  });\n\n  function handleNotesDoubleClick() {\n    const notesEl = notes();\n    if (notesEl) {\n      notesEl.style.height = \"auto\";\n    }\n  }\n\n  function resizeNotes() {\n    const notesEl = notes();\n    const footerEl = footer();\n    const topEl = top();\n    const belowNotesEl = belowNotes();\n    const notesLabelEl = notesLabel();\n\n    if (notesEl && footerEl && topEl && belowNotesEl && notesLabelEl) {\n      const labelHeight = notesLabelEl.clientHeight;\n      const availableHeight =\n        window.innerHeight -\n        topEl.clientHeight -\n        belowNotesEl.clientHeight -\n        footerEl.clientHeight -\n        labelHeight -\n        16;\n      notesEl.style.maxHeight = `${availableHeight}px`;\n    }\n  }\n\n  onMount(async () => {\n    darkModeToggle();\n    const wsUrl = \"/ws\";\n    const socket = new WebSocket(wsUrl);\n    socket.onopen = async () => {\n      console.log(\"WebSocket connected to:\", wsUrl);\n      setLive(await fetch(\"/live\").then((r) => r.text()));\n    };\n\n    setTotal(await fetch(\"/total\").then((r) => r.text()));\n\n    await initWebWasm();\n    await initWasm();\n    setIsReady(true);\n\n    const version = await fetch(\"/version\");\n    const versionText = await version.text();\n    console.log(versionText);\n  });\n\n  createEffect(() => {\n    if (isReady() && total() !== \"\" && live() !== \"\") {\n      resizeNotes();\n    }\n  });\n\n  async function handleForm(e: Event) {\n    e.preventDefault();\n\n    const start = Date.now();\n    const pasteEl = paste();\n\n    if (!pasteEl) return false;\n\n    if (pasteEl.value === \"\") {\n      alert(\"Paste cannot be empty!\");\n      return false;\n    }\n\n    const valid = validatePaste(pasteEl.value);\n    console.log(valid);\n    if (valid !== 0) {\n      if (valid === -1) {\n        alert(\"PokeBin encountered an issue! Please refresh and try again!\");\n        return false;\n      }\n      if (valid === 6) {\n        alert(\"PokeBin contains too many Pokemon!\");\n        return false;\n      }\n      alert(\n        \"Not a valid PokeBin! If you believe this is incorrect, try re-copying from Showdown and please file an issue on GitHub.\",\n      );\n      return false;\n    }\n\n    const passwordEl = password();\n    const titleEl = title();\n    const authorEl = author();\n    const notesEl = notes();\n    const formatEl = format();\n    const rentalEl = rental();\n    const dataEl = data();\n    const formEl = form();\n\n    if (\n      !passwordEl ||\n      !titleEl ||\n      !authorEl ||\n      !notesEl ||\n      !formatEl ||\n      !rentalEl ||\n      !dataEl ||\n      !formEl\n    )\n      return false;\n\n    interface BaseDataJson {\n      title: string;\n      author: string;\n      notes: string;\n      format: string;\n      rental: string;\n      content: string;\n    }\n\n    interface FormData {\n      encrypted: boolean;\n      data: BaseDataJson | string;\n    }\n\n    let paste_string: string = pasteEl.value;\n    paste_string = paste_string.trim();\n\n    const base_data = {\n      title: titleEl.value,\n      author: authorEl.value,\n      notes: notesEl.value,\n      format: formatEl.value,\n      rental: rentalEl.value,\n      content: paste_string,\n    };\n\n    const form_data: FormData = {\n      encrypted: false,\n      data: base_data,\n    };\n\n    if (passwordEl.value === \"\") {\n      const jsonString = JSON.stringify(form_data);\n      const encoded = utf8ToBase64(jsonString);\n      dataEl.value = encoded;\n      const end = Date.now();\n      console.log(`Processing took ${end - start}ms`);\n      formEl.submit();\n      return true;\n    }\n\n    const password_value = passwordEl.value;\n    const form_content = JSON.stringify(base_data);\n    const encrypted = encrypt(form_content, password_value);\n\n    if (encrypted) {\n      form_data.encrypted = true;\n      form_data.data = encrypted;\n    } else {\n      throw new Error(\"Encryption failed\");\n    }\n\n    const jsonString = JSON.stringify(form_data);\n    const encoded = utf8ToBase64(jsonString);\n    dataEl.value = encoded;\n    passwordEl.disabled = true;\n    const end = Date.now();\n    console.log(`Processing took ${end - start}ms`);\n    formEl.submit();\n    return true;\n  }\n\n  return (\n    <Show when={total() !== \"\" && live() !== \"\"}>\n      <main class=\"min-h-screen flex flex-col overflow-auto bg-[#f9f9f9] dark:bg-zinc-950 text-black dark:text-white\">\n        <form\n          ref={setForm}\n          onSubmit={(e) => handleForm(e)}\n          action=\"/create\"\n          method=\"post\"\n          id=\"form\"\n          class=\"flex-1 flex md:flex-row flex-col overflow-auto\"\n        >\n          <textarea\n            ref={setPaste}\n            id=\"paste\"\n            name=\"paste\"\n            placeholder=\"Paste your tournament winning team here!\"\n            class=\"bg-white dark:bg-zinc-950 m-0 p-3 box-border text-black dark:text-white font-mono\n        resize-none outline-none border-none md:flex-1 h-[40vh] md:h-auto\"\n          />\n          <div class=\"md:w-[28rem] w-full bg-[#f9f9f9] dark:bg-zinc-900 text-black dark:text-white flex flex-col p-4 overflow-y-auto\">\n            <div class=\"flex-1 flex flex-col\">\n              <div ref={setTop}>\n                <div class=\"flex justify-center items-center mb-2\">\n                  <div class=\"w-[300px] aspect-[2/1]\">\n                    <img\n                      src={logo}\n                      style={{\n                        height: \"125px\",\n                        width: \"290px\",\n                      }}\n                      class=\"border-none outline-none shadow-none\"\n                      alt=\"PokeBin Logo\"\n                    />\n                  </div>\n                </div>\n\n                <div class=\"flex-1 flex flex-col gap-4\">\n                  <div class=\"flex flex-row items-center gap-3\">\n                    <label for=\"title\" class=\"w-20 text-right font-medium\">\n                      Title\n                    </label>\n                    <input\n                      ref={setTitle}\n                      type=\"text\"\n                      name=\"title\"\n                      id=\"title\"\n                      autocomplete=\"off\"\n                      class=\"flex-1 text-sm rounded border border-zinc-300 dark:border-zinc-600 bg-white dark:bg-zinc-700\n                  text-black dark:text-white outline-none focus:border-zinc-500 px-2 py-1\"\n                    />\n                  </div>\n\n                  <div class=\"flex flex-row items-center gap-3\">\n                    <label for=\"author\" class=\"w-20 text-right font-medium\">\n                      Author\n                    </label>\n                    <input\n                      ref={setAuthor}\n                      type=\"text\"\n                      name=\"author\"\n                      id=\"author\"\n                      autocomplete=\"off\"\n                      class=\"flex-1 text-sm rounded border border-zinc-300 dark:border-zinc-600 bg-white dark:bg-zinc-700\n                  text-black dark:text-white outline-none focus:border-zinc-500 px-2 py-1\"\n                    />\n                  </div>\n\n                  <div class=\"flex flex-row items-center gap-3\">\n                    <label for=\"rental\" class=\"w-20 text-right  font-medium\">\n                      Rental\n                    </label>\n                    <input\n                      ref={setRental}\n                      type=\"text\"\n                      name=\"rental\"\n                      id=\"rental\"\n                      autocomplete=\"off\"\n                      class=\"flex-1 rounded border border-zinc-300 dark:border-zinc-600 bg-white dark:bg-zinc-700\n                        text-black dark:text-white outline-none focus:border-zinc-500 px-2 py-1\"\n                      minLength=\"6\"\n                      maxLength=\"6\"\n                    />\n                  </div>\n\n                  <div class=\"flex flex-row items-center gap-3\">\n                    <label for=\"format\" class=\"w-20 text-right font-medium\">\n                      Format\n                    </label>\n                    <input\n                      ref={setFormat}\n                      type=\"text\"\n                      name=\"format\"\n                      id=\"format\"\n                      autocomplete=\"off\"\n                      class=\"flex-1 rounded border border-zinc-300 dark:border-zinc-600 bg-white dark:bg-zinc-700\n                        text-black dark:text-white outline-none focus:border-zinc-500 px-2 py-1\"\n                    />\n                  </div>\n\n                  <div class=\"flex flex-row items-start gap-3\">\n                    <label\n                      ref={setNotesLabel}\n                      for=\"notes\"\n                      class=\"w-20 text-right font-medium pt-1\"\n                    >\n                      Notes\n                    </label>\n                    <textarea\n                      ref={setNotes}\n                      id=\"notes\"\n                      name=\"notes\"\n                      rows=\"4\"\n                      onDblClick={handleNotesDoubleClick}\n                      autocomplete=\"off\"\n                      class=\"flex-1 text-sm rounded border border-zinc-300 dark:border-zinc-600 bg-white dark:bg-zinc-700\n                  text-black dark:text-white outline-none focus:border-zinc-500 px-2 py-1 resize-y\n                  min-h-[100px] max-h-[200px] md:max-h-none\"\n                    />\n                  </div>\n\n                  <div\n                    class=\"flex flex-row items-center gap-3\"\n                    ref={setBelowNotes}\n                  >\n                    <label for=\"password\" class=\"w-20 text-right  font-medium\">\n                      Password\n                    </label>\n                    <input\n                      ref={setPassword}\n                      type=\"text\"\n                      name=\"password\"\n                      id=\"password\"\n                      autocomplete=\"off\"\n                      class=\"flex-1 rounded border border-zinc-300 dark:border-zinc-600 bg-white dark:bg-zinc-700\n                        text-black dark:text-white outline-none focus:border-zinc-500 px-2 py-1\"\n                    />\n                  </div>\n\n                  <div class=\"mt-4\">\n                    <button\n                      type=\"submit\"\n                      class=\"w-full bg-[#c2a8d4] hover:bg-[#9770b6] text-black font-bold\n                         py-2 px-4 rounded\"\n                    >\n                      Submit Paste!\n                    </button>\n                  </div>\n\n                  <input\n                    ref={setData}\n                    type=\"text\"\n                    hidden\n                    name=\"data\"\n                    id=\"data\"\n                  />\n                </div>\n              </div>\n            </div>\n\n            <div\n              ref={setFooter}\n              class=\"mt-8 pt-6 flex flex-col items-center space-y-1\"\n            >\n              <Show when={live() !== \"\"}>\n                <h1 class=\"text-sm font-bold text-[#c2a8d4]\">\n                  {live()} active PokeBin users!\n                </h1>\n              </Show>\n              <Show when={total() !== \"\"}>\n                <h1 class=\"text-sm font-bold text-[#c2a8d4]\">\n                  {total()} total PokeBins created!\n                </h1>\n              </Show>\n              <div>\n                <PatreonButton />\n              </div>\n              <a\n                href=\"/about\"\n                class=\"text-[#c2a8d4] hover:text-[#9770b6] text-base\"\n              >\n                About PokeBin\n              </a>\n              <a\n                href=\"/settings\"\n                class=\"text-[#c2a8d4] hover:text-[#9770b6] text-base\"\n              >\n                Settings\n              </a>\n              <span class=\"text-gray-600 opacity-20 text-xs\">\n                © Nelvana LLC\n              </span>\n            </div>\n          </div>\n        </form>\n      </main>\n    </Show>\n  );\n};\n\nexport default App;\n","import { exports, memory } from \"./wasm_helpers\";\n\nexport function encrypt(message: string, passphrase: string): string | null {\n  if (!exports || !memory) {\n    return null;\n  }\n  const passphrase_len = passphrase.length;\n  const message_len = message.length;\n\n  // Allocate a single buffer for both strings\n  const buffer_ptr = exports.allocUint8(passphrase_len + message_len);\n  if (!buffer_ptr) {\n    console.error(\"Failed to allocate memory\");\n    return null;\n  }\n\n  // Get a view of memory\n  let memoryView = new Uint8Array(exports.memory.buffer);\n\n  // Copy the passphrase and message into the single buffer\n  const passphraseBuffer = new TextEncoder().encode(passphrase);\n  const messageBuffer = new TextEncoder().encode(message);\n\n  // Write passphrase at the beginning of the buffer\n  for (let i = 0; i < passphrase_len; i++) {\n    memoryView[buffer_ptr + i] = passphraseBuffer[i];\n  }\n\n  // Write message right after the passphrase\n  for (let i = 0; i < message_len; i++) {\n    memoryView[buffer_ptr + passphrase_len + i] = messageBuffer[i];\n  }\n\n  // Single call to encrypt\n  const success = exports.encryptMessage(\n    buffer_ptr,\n    passphrase_len,\n    message_len,\n  );\n\n  if (!success) {\n    console.error(\"Failed to encrypt message\");\n    exports.resetArena();\n    return null;\n  }\n\n  // Get result information from separate functions\n  const resultPtr = exports.getResultPtr();\n  const resultLen = exports.getResultLen();\n\n  if (resultPtr === 0 || resultLen === 0) {\n    console.error(\"Invalid result\");\n    exports.resetArena();\n    return null;\n  }\n\n  // Get a fresh view of memory after the WASM function call\n  memoryView = new Uint8Array(exports.memory.buffer);\n\n  const decoder = new TextDecoder();\n  const result_message = decoder.decode(\n    memoryView.slice(resultPtr, resultPtr + resultLen),\n  );\n\n  // Reset the arena instead of individual frees\n  exports.resetArena();\n\n  return result_message;\n}\n\nexport function decrypt(encrypted: string, passphrase: string): string | null {\n  if (!exports || !memory) {\n    return null;\n  }\n  const passphrase_len = passphrase.length;\n  const encrypted_len = encrypted.length;\n\n  // Allocate a single buffer for both strings\n  const buffer_ptr = exports.allocUint8(passphrase_len + encrypted_len);\n  if (!buffer_ptr) {\n    console.error(\"Failed to allocate memory\");\n    return null;\n  }\n\n  // Get a view of memory\n  let memoryView = new Uint8Array(exports.memory.buffer);\n\n  // Copy the passphrase and message into the single buffer\n  const passphraseBuffer = new TextEncoder().encode(passphrase);\n  const encryptedBuffer = new TextEncoder().encode(encrypted);\n\n  // Write passphrase at the beginning of the buffer\n  for (let i = 0; i < passphrase_len; i++) {\n    memoryView[buffer_ptr + i] = passphraseBuffer[i];\n  }\n\n  // Write message right after the passphrase\n  for (let i = 0; i < encrypted_len; i++) {\n    memoryView[buffer_ptr + passphrase_len + i] = encryptedBuffer[i];\n  }\n\n  // Single call to encrypt\n  const success = exports.decryptMessage(\n    buffer_ptr,\n    passphrase_len,\n    encrypted_len,\n  );\n\n  if (!success) {\n    console.error(\"Failed to encrypt message\");\n    exports.resetArena();\n    return null;\n  }\n\n  // Get result information from separate functions\n  const resultPtr = exports.getResultPtr();\n  const resultLen = exports.getResultLen();\n\n  if (resultPtr === 0 || resultLen === 0) {\n    console.error(\"Invalid result\");\n    exports.resetArena();\n    return null;\n  }\n\n  // Get a fresh view of memory after the WASM function call\n  memoryView = new Uint8Array(exports.memory.buffer);\n\n  const decoder = new TextDecoder();\n  const result_message = decoder.decode(\n    memoryView.slice(resultPtr, resultPtr + resultLen),\n  );\n\n  // Reset the arena instead of individual frees\n  exports.resetArena();\n\n  return result_message;\n}\n","import { render } from 'solid-js/web';\nimport App from './app.tsx';\n\nconst root = document.getElementById('root');\nif (root) {\n    render(() => <App />, root);\n}\n","__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n        if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n            Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n        }\n    }\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif (chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor (var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--)\n\t\t\tdeferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif (\n\t\t\t\t(priority & (1 === 0) || notFulfilled >= priority) &&\n\t\t\t\tObject.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))\n\t\t\t) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif (priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif (fulfilled) {\n\t\t\tdeferred.splice(i--, 1);\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};\n","__webpack_require__.p = \"/\";","__webpack_require__.rv = () => (\"1.3.12\")","\n      // object to store loaded and loading chunks\n      // undefined = chunk not loaded, null = chunk preloaded/prefetched\n      // [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\n      var installedChunks = {\"95\": 0,\"980\": 0,};\n      __webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif (chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor (moduleId in moreModules) {\n\t\t\tif (__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif (runtime) var result = runtime(__webpack_require__);\n\t}\n\tif (parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor (; i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif (\n\t\t\t__webpack_require__.o(installedChunks, chunkId) &&\n\t\t\tinstalledChunks[chunkId]\n\t\t) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n};\n\nvar chunkLoadingGlobal = self[\"webpackChunkweb\"] = self[\"webpackChunkweb\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));\n","__webpack_require__.ruid = \"bundler=rspack@1.3.12\";\n"],"names":["exports","memory","instance","decodeString","pointer","length","slice","Uint8Array","TextDecoder","initWasm","inst","wasmModule","WebAssembly","fetch","Error","console","now","BigInt","Date","createQRCodeCallback","ptr","size","version_response","version","utf8ToBase64","str","btoa","String","TextEncoder","Uint32Array","_tmpl$","App","form","setForm","createSignal","paste","setPaste","password","setPassword","title","setTitle","author","setAuthor","notes","setNotes","format","setFormat","rental","setRental","data","setData","notesLabel","setNotesLabel","footer","setFooter","top","setTop","belowNotes","setBelowNotes","total","setTotal","live","setLive","isReady","setIsReady","darkModeString","localStorage","getItem","darkMode","JSON","parse","sett","_","darkModeToggle","dark","meta","body","document","getElementsByTagName","classList","add","remove","querySelector","createElement","setAttribute","head","appendChild","handleNotesDoubleClick","notesEl","style","height","handleForm","e","preventDefault","start","pasteEl","value","alert","valid","validatePaste","pasteBuffer","buffer_ptr","memoryView","success","log","passwordEl","titleEl","authorEl","formatEl","rentalEl","dataEl","formEl","paste_string","trim","base_data","content","form_data","encrypted","stringify","end","submit","password_value","encrypt","message","passphrase","passphrase_len","message_len","passphraseBuffer","messageBuffer","i","resultPtr","resultLen","result_message","decoder","disabled","createEffect","onMount","socket","WebSocket","onopen","then","r","text","initWebWasm","resizeNotes","footerEl","topEl","belowNotesEl","notesLabelEl","labelHeight","clientHeight","availableHeight","window","innerHeight","maxHeight","_$createComponent","Show","when","_$memo","children","_el$","_tmpl$3","_el$2","firstChild","_el$3","_el$5","_el$4","nextSibling","_el$6","_el$7","_el$9","_el$8","_el$1","_el$0","_el$11","_el$10","_el$12","_el$14","_el$13","_el$15","_el$17","_el$16","_el$18","_el$20","_el$19","_el$21","_el$22","_el$23","_el$24","_el$26","_el$25","_el$28","_el$27","_el$29","_el$34","addEventListener","_$use","_$setAttribute","logo","setProperty","$$dblclick","_$insert","_el$30","_el$31","_el$32","_tmpl$2","_el$33","PatreonButton","_$delegateEvents","root","getElementById","render","Object","self"],"mappings":"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"}