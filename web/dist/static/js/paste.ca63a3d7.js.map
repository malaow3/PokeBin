{"version":3,"file":"static/js/paste.ca63a3d7.js","sources":["webpack://web/./src/helpers.ts","webpack://web/./src/watermark.tsx","webpack://web/./src/PasteView.tsx","webpack://web/./src/encryption.ts","webpack://web/./src/paste.tsx"],"sourcesContent":["export let exports: WebAssemblyExports;\nexport let memory: WebAssembly.Memory;\nimport { encrypt, decrypt } from \"./encryption.ts\";\n\ninterface WebAssemblyExports {\n  memory: WebAssembly.Memory;\n\n  init(seed: bigint): void;\n\n  allocUint8(length: number): number;\n\n  encryptMessage(\n    buffer_ptr: number,\n    passphrase_len: number,\n    message_len: number,\n  ): boolean;\n\n  resetArena(): void;\n  free(pointer: number, length: number): void;\n\n  getResultPtr(): number;\n  getResultLen(): number;\n  decryptMessage(\n    buffer_ptr: number,\n    passphrase_len: number,\n    encrypted_len: number,\n  ): boolean;\n\n  validatePaste(buffer_ptr: number, paste_len: number): number;\n\n  sendPerson(person_ptr: number): void;\n  receivePerson(buffer_ptr: number, buffer_len: number): number;\n  destroyPerson(person_ptr: number): void;\n\n  parsePaste(\n    buffer_ptr: number,\n    buffer_len: number,\n    twoDimages: boolean,\n  ): number;\n  destroyPaste(paste_ptr: number): void;\n}\n\nconst sizeOfUint32 = Uint32Array.BYTES_PER_ELEMENT;\nconst sizeOfUint8 = Uint8Array.BYTES_PER_ELEMENT;\nconst sizeOfNullByte = Uint8Array.BYTES_PER_ELEMENT;\nconst nullByte = 0x00;\n\nfunction decodeString(pointer: number, length: number) {\n  const slice = new Uint8Array(memory.buffer, pointer, length);\n  return new TextDecoder().decode(slice);\n}\n\nfunction decodeNullTerminatedString(pointer: number) {\n  if (pointer === 0) return \"\";\n\n  // Get current memory buffer size\n  const memSize = memory.buffer.byteLength;\n\n  // Ensure pointer is within bounds\n  if (pointer >= memSize) {\n    console.error(`Invalid pointer: ${pointer} exceeds memory size ${memSize}`);\n    return \"\";\n  }\n\n  // Create a view starting from pointer\n  const slice = new Uint8Array(memory.buffer, pointer);\n\n  // Find null terminator, but limit search to avoid buffer overflow\n  const maxLength = memSize - pointer;\n  const length = slice.findIndex((value: number, index) => {\n    if (index >= maxLength) return true;\n    return value === nullByte;\n  });\n\n  if (length === -1 || length === 0) {\n    return \"\";\n  }\n\n  try {\n    return decodeString(pointer, length);\n  } catch (e) {\n    console.error(`Failed to decode string at pointer ${pointer}:`, e);\n    return \"\";\n  }\n}\n\nfunction encodeNullTerminatedString(string: string) {\n  const buffer = new TextEncoder().encode(string);\n  const sizeOfNullTerminatedString = buffer.length + sizeOfNullByte;\n  const pointer = exports.allocUint8(sizeOfNullTerminatedString);\n  const slice = new Uint8Array(\n    memory.buffer,\n    pointer,\n    sizeOfNullTerminatedString,\n  );\n  slice.set(buffer);\n  slice[buffer.length] = nullByte;\n  return pointer;\n}\n\nasync function initWasm() {\n  const wasmModule = await WebAssembly.instantiateStreaming(fetch(\"/wasm\"), {\n    env: {\n      _throwError(pointer: number, length: number) {\n        const message = decodeString(pointer, length);\n        throw new Error(message);\n      },\n      _consoleLog(pointer: number, length: number) {\n        const message = decodeString(pointer, length);\n        console.log(message);\n      },\n    },\n  });\n  const instance = wasmModule.instance;\n  exports = instance.exports as unknown as WebAssemblyExports;\n  memory = exports.memory;\n\n  const now = BigInt(Date.now());\n  exports.init(now);\n}\n\nfunction validatePaste(paste: string): number {\n  if (!exports || !memory) {\n    return -1;\n  }\n\n  const buffer_ptr = exports.allocUint8(paste.length);\n  if (!buffer_ptr) {\n    console.error(\"Failed to allocate memory\");\n    return -1;\n  }\n\n  // Get a view of memory\n  const memoryView = new Uint8Array(exports.memory.buffer);\n\n  // Copy the passphrase and message into the single buffer\n  const pasteBuffer = new TextEncoder().encode(paste);\n  for (let i = 0; i < paste.length; i++) {\n    memoryView[buffer_ptr + i] = pasteBuffer[i];\n  }\n\n  const success = exports.validatePaste(buffer_ptr, paste.length);\n  exports.resetArena();\n\n  return success;\n}\n\nfunction alignTo4Bytes(pointer: number): number {\n  return Math.ceil(pointer / 4) * 4;\n}\n\nexport type Move = {\n  name: string;\n  type1: string;\n};\n\nexport type Pokemon = {\n  name: string;\n  nickname: string;\n  item: string;\n  gender: string;\n  item_image: string;\n  pokemon_image: string;\n  moves_len: number;\n  moves: Move[];\n  evs: number[];\n  ivs: number[];\n  lines_count: number;\n  lines: string[];\n  last_stat_ev: string;\n  last_stat_iv: string;\n  type1: string;\n  type2: string;\n  ability: string;\n  level: number;\n  shiny: string;\n  hidden_power: string;\n  tera_type: string;\n  nature: string;\n};\n\nexport type Paste = {\n  title: string;\n  author: string;\n  notes: string;\n  format: string;\n  rental: string;\n  pokemon_len: number;\n  pokemon: Pokemon[];\n  isOts: boolean;\n};\n\nfunction decodeMove(movePtr: number): Move {\n  try {\n    let offset = 0;\n    const namePtr = new Uint32Array(memory.buffer, movePtr, 1);\n    const nameSlice = namePtr[0];\n    const name = decodeNullTerminatedString(nameSlice);\n    offset += sizeOfUint32;\n\n    const type1Ptr = new Uint32Array(memory.buffer, movePtr + offset, 1);\n    const type1Slice = type1Ptr[0];\n    const type1 = decodeNullTerminatedString(type1Slice);\n\n    return { name, type1 };\n  } catch (e) {\n    console.error(e);\n    return { name: \"\", type1: \"\" };\n  }\n}\n\nfunction decodePokemon(pokemonPtr: number): Pokemon {\n  try {\n    const basePtr = pokemonPtr;\n    let offset = 0;\n    const namePtr = new Uint32Array(memory.buffer, basePtr, 1);\n    const nameSlice = namePtr[0];\n    const name = decodeNullTerminatedString(nameSlice);\n    offset += sizeOfUint32;\n\n    const nicknamePtr = new Uint32Array(memory.buffer, basePtr + offset, 1);\n    const nicknameSlice = nicknamePtr[0];\n    const nickname = decodeNullTerminatedString(nicknameSlice);\n    offset += sizeOfUint32;\n\n    const itemPtr = new Uint32Array(memory.buffer, basePtr + offset, 1);\n    const itemSlice = itemPtr[0];\n    const item = decodeNullTerminatedString(itemSlice);\n    offset += sizeOfUint32;\n\n    const genderPtr = new Uint32Array(memory.buffer, basePtr + offset, 1);\n    const genderNum = genderPtr[0];\n    offset += sizeOfUint32;\n\n    const itemImagePtr = new Uint32Array(memory.buffer, basePtr + offset, 1);\n    const itemImageSlice = itemImagePtr[0];\n    const itemImage = decodeNullTerminatedString(itemImageSlice);\n    offset += sizeOfUint32;\n\n    const pokemonImagePtr = new Uint32Array(memory.buffer, basePtr + offset, 1);\n    const pokemonImageSlice = pokemonImagePtr[0];\n    const pokemonImage = decodeNullTerminatedString(pokemonImageSlice);\n    offset += sizeOfUint32;\n\n    const movesLenPtr = new Uint32Array(memory.buffer, basePtr + offset, 1);\n    const moves_len = movesLenPtr[0];\n    offset += sizeOfUint32;\n\n    const movesArrayPtrSlice = new Uint32Array(\n      memory.buffer,\n      basePtr + offset,\n      1,\n    );\n    const movesArrayPointer = movesArrayPtrSlice[0];\n\n    const movesArray = new Uint32Array(\n      memory.buffer,\n      movesArrayPointer,\n      moves_len,\n    );\n\n    const moves: Move[] = [];\n    if (moves_len > 0) {\n      for (let i = 0; i < moves_len; i++) {\n        const currentMovePtr = movesArray[i];\n        try {\n          const move = decodeMove(currentMovePtr);\n          moves.push(move);\n        } catch (e) {\n          console.error(`Error decoding move at index ${i}:`, e);\n        }\n        offset += sizeOfUint8;\n      }\n    } else {\n      offset += sizeOfUint32;\n    }\n\n    let gender = \"\";\n    if (genderNum === 77) {\n      gender = \"M\";\n    } else if (genderNum === 70) {\n      gender = \"F\";\n    }\n\n    const evs: number[] = [];\n    for (let i = 0; i < 6; i++) {\n      const evPtr = new Uint32Array(memory.buffer, basePtr + offset, 1);\n      const evValue = evPtr[0];\n      evs.push(evValue);\n      offset += sizeOfUint32;\n    }\n\n    const ivs: number[] = [];\n    for (let i = 0; i < 6; i++) {\n      const ivPtr = new Uint32Array(memory.buffer, basePtr + offset, 1);\n      const ivValue = ivPtr[0];\n      ivs.push(ivValue);\n      offset += sizeOfUint32;\n    }\n\n    const linesLenPointer = basePtr + offset;\n    const linesLenSlice = new Uint32Array(memory.buffer, linesLenPointer, 1);\n    const lines_len = linesLenSlice[0];\n    offset += sizeOfUint32;\n\n    const lines: string[] = [];\n    if (lines_len > 0) {\n      // Decode items array pointer - ensure 4-byte alignment\n      const linesArrayPtrPointer = basePtr + offset;\n      const linesArrayPtrSlice = new Uint32Array(\n        memory.buffer,\n        linesArrayPtrPointer,\n        1,\n      );\n      const linesArrayPointer = linesArrayPtrSlice[0];\n\n      // Decode each line - ensure the pointer is properly aligned\n      const alignedLinesArrayPointer = alignTo4Bytes(linesArrayPointer);\n      const linesArraySlice = new Uint32Array(\n        memory.buffer,\n        alignedLinesArrayPointer,\n        lines_len,\n      );\n\n      for (let i = 0; i < lines_len; i++) {\n        const linePtr = linesArraySlice[i];\n        const line = decodeNullTerminatedString(linePtr);\n        lines.push(line);\n      }\n\n      offset += sizeOfUint32 * lines_len;\n    } else {\n      offset += sizeOfUint32;\n    }\n\n    const lastStatEvPtr = new Uint32Array(memory.buffer, basePtr + offset, 1);\n    const lastStatEvSlice = lastStatEvPtr[0];\n    const last_stat_ev = decodeNullTerminatedString(lastStatEvSlice);\n    offset += sizeOfUint32;\n\n    const lastStatIvPtr = new Uint32Array(memory.buffer, basePtr + offset, 1);\n    const lastStatIvSlice = lastStatIvPtr[0];\n    const last_stat_iv = decodeNullTerminatedString(lastStatIvSlice);\n    offset += sizeOfUint32;\n\n    const type1Ptr = new Uint32Array(memory.buffer, basePtr + offset, 1);\n    const type1Slice = type1Ptr[0];\n    const type1 = decodeNullTerminatedString(type1Slice);\n    offset += sizeOfUint32;\n\n    const type2Ptr = new Uint32Array(memory.buffer, basePtr + offset, 1);\n    const type2Slice = type2Ptr[0];\n    const type2 = decodeNullTerminatedString(type2Slice);\n    offset += sizeOfUint32;\n\n    const abilityPtr = new Uint32Array(memory.buffer, basePtr + offset, 1);\n    const abilitySlice = abilityPtr[0];\n    const ability = decodeNullTerminatedString(abilitySlice);\n    offset += sizeOfUint32;\n\n    const levelPtr = new Uint32Array(memory.buffer, basePtr + offset, 1);\n    const level = levelPtr[0];\n    offset += sizeOfUint32;\n\n    const shinyPtr = new Uint32Array(memory.buffer, basePtr + offset, 1);\n    const shinySlice = shinyPtr[0];\n    const shiny = decodeNullTerminatedString(shinySlice);\n    offset += sizeOfUint32;\n\n    const hpPointer = new Uint32Array(memory.buffer, basePtr + offset, 1);\n    const hpSlice = hpPointer[0];\n    const hidden_power = decodeNullTerminatedString(hpSlice);\n    offset += sizeOfUint32;\n\n    const teraTypePointer = new Uint32Array(memory.buffer, basePtr + offset, 1);\n    const teraTypeSlice = teraTypePointer[0];\n    const tera_type = decodeNullTerminatedString(teraTypeSlice);\n    offset += sizeOfUint32;\n\n    const naturePointer = new Uint32Array(memory.buffer, basePtr + offset, 1);\n    const natureSlice = naturePointer[0];\n    const nature = decodeNullTerminatedString(natureSlice);\n    offset += sizeOfUint32;\n\n    return {\n      name,\n      nickname,\n      item,\n      gender,\n      item_image: itemImage,\n      pokemon_image: pokemonImage,\n      moves_len: moves_len,\n      moves,\n      evs,\n      ivs,\n      lines_count: lines_len,\n      lines,\n      last_stat_ev,\n      last_stat_iv,\n      type1,\n      type2,\n      ability,\n      level,\n      shiny,\n      hidden_power,\n      tera_type,\n      nature,\n    };\n  } catch (e) {\n    console.error(e);\n    return {\n      name: \"\",\n      nickname: \"\",\n      item: \"\",\n      gender: \"\",\n      item_image: \"\",\n      pokemon_image: \"\",\n      moves_len: 0,\n      moves: [],\n      evs: [],\n      ivs: [],\n      lines_count: 0,\n      lines: [],\n      last_stat_ev: \"\",\n      last_stat_iv: \"\",\n      type1: \"\",\n      type2: \"\",\n      ability: \"\",\n      level: 100,\n      shiny: \"\",\n      hidden_power: \"\",\n      tera_type: \"\",\n      nature: \"\",\n    };\n  }\n}\n\nfunction decodePaste(pastePtr: number): Paste {\n  try {\n    // Access the header pointer\n    const titleSlice = new Uint32Array(memory.buffer, pastePtr, 1);\n    const titlePtr = titleSlice[0];\n    const title = decodeNullTerminatedString(titlePtr);\n\n    const authorSlice = new Uint32Array(\n      memory.buffer,\n      pastePtr + sizeOfUint32,\n      1,\n    );\n    const authorPtr = authorSlice[0];\n    const author = decodeNullTerminatedString(authorPtr);\n\n    const notesSlice = new Uint32Array(\n      memory.buffer,\n      pastePtr + sizeOfUint32 * 2,\n      1,\n    );\n    const notesPtr = notesSlice[0];\n    const notes = decodeNullTerminatedString(notesPtr);\n\n    const formatSlice = new Uint32Array(\n      memory.buffer,\n      pastePtr + sizeOfUint32 * 3,\n      1,\n    );\n    const formatPtr = formatSlice[0];\n    const format = decodeNullTerminatedString(formatPtr);\n\n    const rentalSlice = new Uint32Array(\n      memory.buffer,\n      pastePtr + sizeOfUint32 * 4,\n      1,\n    );\n    const rentalPtr = rentalSlice[0];\n    const rental = decodeNullTerminatedString(rentalPtr);\n\n    const pokemonLenPtr = pastePtr + sizeOfUint32 * 5;\n    const pokemonLenSlice = new Uint32Array(memory.buffer, pokemonLenPtr, 1);\n    const pokemon_len = pokemonLenSlice[0];\n\n    // Decode items array pointer - ensure 4-byte alignment\n    const pokemonArrayPtrPointer = alignTo4Bytes(pastePtr + sizeOfUint32 * 6);\n    const pokemonArrayPtrSlice = new Uint32Array(\n      memory.buffer,\n      pokemonArrayPtrPointer,\n      1,\n    );\n    const pokemonArrayPointer = pokemonArrayPtrSlice[0];\n\n    // Decode each item - ensure the pointer is properly aligned\n    const pokemon: Pokemon[] = [];\n    const alignedPokemonArrayPointer = alignTo4Bytes(pokemonArrayPointer);\n    const pokemonArraySlice = new Uint32Array(\n      memory.buffer,\n      alignedPokemonArrayPointer,\n      pokemon_len,\n    );\n\n    for (let i = 0; i < pokemon_len; i++) {\n      const pokemonPtr = pokemonArraySlice[i];\n      const mon = decodePokemon(pokemonPtr);\n      pokemon.push(mon);\n    }\n\n    const isOtsOffset = pokemonArrayPtrPointer + sizeOfUint32;\n    const isOtsValue = new Uint32Array(memory.buffer, isOtsOffset, 1)[0];\n    const isOts = isOtsValue === 1;\n\n    const paste = {\n      title,\n      author,\n      notes,\n      format,\n      rental,\n      pokemon_len,\n      pokemon,\n      isOts,\n    };\n\n    return paste;\n  } finally {\n    exports.destroyPaste(pastePtr);\n  }\n}\n\nexport function parsePaste(data: string, twoDimages: boolean): Paste | null {\n  if (!exports || !memory) {\n    return null;\n  }\n\n  const input = encodeNullTerminatedString(data);\n  const input_len = data.length;\n\n  const pastePtr = exports.parsePaste(input, input_len, twoDimages);\n  const paste = decodePaste(pastePtr);\n\n  exports.resetArena();\n\n  return paste;\n}\n\nexport { encrypt, initWasm, decrypt, validatePaste };\n","import { createEffect, createSignal, onMount } from \"solid-js\";\nimport logo from \"../public/logo/large_logo_cropped.webp\";\n\nfunction Watermark() {\n  const [isFixed, setIsFixed] = createSignal(false);\n  const [dir, setDir] = createSignal(\"shrink\");\n  const [prevSize, setPrevSize] = createSignal(window.innerWidth);\n\n  function check() {\n    if (window.innerWidth <= 1290) {\n      if (dir() === \"shrink\") {\n        setIsFixed(true);\n      }\n    } else {\n      setIsFixed(false);\n    }\n  }\n\n  onMount(() => {\n    window.onresize = () => {\n      if (window.innerWidth < prevSize()) {\n        setDir(\"shrink\");\n        setPrevSize(window.innerWidth);\n      } else {\n        setDir(\"grow\");\n        setPrevSize(window.innerWidth);\n      }\n      check();\n    };\n    check();\n  });\n\n  createEffect(() => {\n    check();\n  });\n\n  // return (\n  //   <div\n  //     id=\"NOCOPY\"\n  //     style={{\n  //       position: isFixed() ? \"fixed\" : \"relative\",\n  //       display: \"flex\",\n  //       \"flex-direction\": isFixed() ? \"column\" : \"row\",\n  //       \"font-size\": \"32px\",\n  //       bottom: \"30px\",\n  //       right: \"10px\",\n  //       // color: 'rgba(255, 255, 255, 0.6)',\n  //       color: \"rgba(251, 173, 255, 0.75)\",\n  //       \"pointer-events\": \"none\",\n  //       \"z-index\": 9999,\n  //       \"transform-origin\": \"bottom right\",\n  //       \"user-select\": \"none\",\n  //       \"-webkit-user-select\": \"none\",\n  //       \"-moz-user-select\": \"none\",\n  //       \"-ms-user-select\": \"none\",\n  //       \"align-items\": \"center\",\n  //       \"white-space\": \"nowrap\",\n  //       \"margin-top\": \"20px\",\n  //       \"margin-left\": \"20px\",\n  //     }}\n  //   >\n  //     <div class=\"flex flex-row justify-center align-middle items-center\">\n  //       <span>PokeBin</span>\n  //       <img\n  //         class=\"ml-1\"\n  //         src=\"/assets/favicon/android-chrome-192x192.png\"\n  //         style={{\n  //           height: \"32px\",\n  //           width: \"32px\",\n  //           \"margin-right\": \"4px\",\n  //           scale: 1.0,\n  //           opacity: 0.75,\n  //           top: \"-2px\",\n  //         }}\n  //         alt=\"It's Spheal!\"\n  //       />\n  //     </div>\n  //     <PatreonButton />\n  //   </div>\n  // );\n  return (\n    <div\n      id=\"NOCOPY\"\n      style={{\n        position: isFixed() ? \"fixed\" : \"relative\",\n        display: \"flex\",\n        bottom: \"10px\",\n        right: isFixed() ? \"30px\" : undefined, // Only set right when fixed\n        left: isFixed() ? undefined : \"30px\", // Only set left when not fixed\n        \"flex-direction\": isFixed() ? \"column\" : \"row\",\n        \"pointer-events\": \"none\",\n        \"z-index\": 9999,\n        \"transform-origin\": \"bottom right\",\n        \"user-select\": \"none\",\n        \"-webkit-user-select\": \"none\",\n        \"-moz-user-select\": \"none\",\n        \"-ms-user-select\": \"none\",\n        \"align-items\": \"center\",\n        \"white-space\": \"nowrap\",\n      }}\n    >\n      <img\n        src={logo}\n        style={{\n          height: \"50px\",\n          width: \"100px\",\n          transform: \"scale(1.5)\", // 1.5x bigger visually\n        }}\n        class=\"border-none outline-none shadow-none\"\n        alt=\"PokeBin Logo\"\n      />\n    </div>\n  );\n}\n\nexport default Watermark;\n","import {\n  createSignal,\n  createEffect,\n  onCleanup,\n  onMount,\n  For,\n  Show,\n} from \"solid-js\";\nimport \"./app.css\";\nimport \"./paste.css\";\nimport Watermark from \"./watermark\";\nimport { decrypt, initWasm, parsePaste, type Paste } from \"./helpers\";\n\nfunction stripIvsEvs(pasteText: string): string {\n  // Remove lines that start with \"IVs:\" or \"EVs:\" (case-insensitive, optional whitespace)\n  return pasteText\n    .split(\"\\n\")\n    .filter((line) => !/^\\s*(IVs:|EVs:)/i.test(line))\n    .join(\"\\n\");\n}\n\nconst PasteView = () => {\n  const [paste, setPaste] = createSignal<Paste | null>(null);\n  const [isEncrypted, setIsEncrypted] = createSignal(false);\n  const [data, setData] = createSignal(\"\");\n  const [title, setTitle] = createSignal<string | null>(null);\n  const [showNotes, setShowNotes] = createSignal(false);\n  const [notesOpacity, setNotesOpacity] = createSignal(1.0);\n  const [notesWidth, setNotesWidth] = createSignal(\"300px\");\n  const [showModal, setShowModal] = createSignal(false);\n\n  type PasteUpload = {\n    title: string;\n    author: string;\n    notes: string;\n    format: string;\n    rental: string;\n    content: string;\n  };\n  type FormUpload = {\n    data: PasteUpload;\n    encrypted: boolean;\n  };\n\n  async function handleCreateOts() {\n    if (isEncrypted()) return;\n    // Get the original paste text (from your `data` signal)\n    const originalPaste = data();\n    if (!originalPaste) return;\n\n    // If the paste is encrypted, you may need to handle that separately.\n    // For now, assume it's plain text or JSON string.\n    let pasteObj: FormUpload;\n    try {\n      pasteObj = { encrypted: false, data: JSON.parse(originalPaste) };\n    } catch {\n      return;\n    }\n\n    // Remove IVs/EVs from the content\n    pasteObj.data.content = stripIvsEvs(pasteObj.data.content);\n\n    // Prepare form data\n    const form = document.createElement(\"form\");\n    form.method = \"POST\";\n    form.action = \"/create\";\n    form.style.display = \"none\";\n\n    // Helper to add a field\n    function addField(name: string, value: string) {\n      const input = document.createElement(\"input\");\n      input.type = \"hidden\";\n      input.name = name;\n      input.value = value;\n      form.appendChild(input);\n    }\n\n    // Add all relevant fields\n    addField(\n      \"data\",\n      btoa(decodeURIComponent(encodeURIComponent(JSON.stringify(pasteObj)))),\n    );\n\n    document.body.appendChild(form);\n    form.submit();\n  }\n\n  const moveColorsString = localStorage.getItem(\"moveColors\");\n  let moveColors = true;\n  if (moveColorsString !== null) {\n    moveColors = JSON.parse(moveColorsString);\n  }\n\n  const twoDImagesString = localStorage.getItem(\"twoDImages\");\n  let twoDImages = false;\n  if (twoDImagesString !== null) {\n    twoDImages = JSON.parse(twoDImagesString);\n  }\n\n  const darkModeString = localStorage.getItem(\"darkMode\");\n  let darkMode = true;\n  if (darkModeString !== null) {\n    darkMode = JSON.parse(darkModeString);\n  }\n\n  const [sett, setSett] = createSignal({\n    moveColors: moveColors,\n    twoDImages: twoDImages,\n    darkMode: darkMode,\n  });\n\n  function makeTransparentOnMouseover() {\n    setNotesOpacity(0.2);\n  }\n\n  function makeOpaqueOnFocus() {\n    setNotesOpacity(1.0);\n  }\n\n  function decodeHtmlEntities(str: string): string {\n    const txt = document.createElement(\"textarea\");\n    txt.innerHTML = str;\n    const decoded = txt.value;\n    txt.remove(); // remove from DOM (if it was ever attached)\n    return decoded;\n  }\n\n  function updateWidths() {\n    const main = document.getElementsByTagName(\"main\")[0];\n    const sidebar = document.getElementById(\"sidebar\");\n    const notes = document.getElementById(\"notes\");\n\n    if (!main && !sidebar && !notes) return;\n\n    const articles = document.getElementsByTagName(\"article\");\n    let end = articles.length;\n    if (articles.length > 4) {\n      end = 4;\n    }\n\n    const windowWidth = window.innerWidth;\n    for (let i = 0; i < end; i++) {\n      if (windowWidth > 1024) {\n        const margin_bottom = Math.floor(window.innerHeight * 0.02);\n        articles[i].style.marginBottom = `${margin_bottom}px`;\n      }\n    }\n\n    if (windowWidth <= 1024) {\n      // Mobile layout\n      setNotesWidth(\"300px\");\n    } else {\n      // Desktop layout\n      const calculatedWidth = windowWidth - 420;\n      const width = Math.min(Math.max(calculatedWidth, 300), 600);\n      setNotesWidth(`${width}px`);\n    }\n  }\n\n  function setSelectable(value: boolean, id: string) {\n    const element = document.getElementById(id);\n    if (element === null) {\n      return;\n    }\n\n    // First update the style\n    if (value) {\n      element.style.userSelect = \"text\";\n    } else {\n      element.style.userSelect = \"auto\";\n    }\n\n    // Set the style to be selectable for ALL children recursively\n    const children = element.children;\n\n    const children_list = [];\n\n    for (let i = 0; i < children.length; i++) {\n      children_list.push(children[i]);\n    }\n    while (children_list.length > 0) {\n      const child = children_list.pop() as HTMLElement;\n      if (child === null || child === undefined) {\n        break;\n      }\n\n      // Add all children to the list\n      for (let i = 0; i < child.children.length; i++) {\n        children_list.push(child.children[i]);\n      }\n      if (value) {\n        // Set the style to be unselectable\n        for (let i = 0; i < children.length; i++) {\n          child.style.userSelect = \"auto\";\n        }\n      } else {\n        for (let i = 0; i < children.length; i++) {\n          child.style.userSelect = \"none\";\n        }\n      }\n    }\n  }\n\n  async function copyPaste() {\n    const main = document.getElementsByTagName(\"main\")[0];\n\n    if (!main) {\n      return;\n    }\n\n    let text = \"\";\n    const articles = main.querySelectorAll(\"article\");\n\n    articles.forEach((article, _) => {\n      const monTitle = article.querySelector(\"#mon_title\");\n      if (monTitle) {\n        text += `${monTitle.textContent?.trim()}\\n`;\n      }\n\n      // Extract ability, level, shiny, tera type, etc.\n      const attributeDivs = article.querySelectorAll(\".attribute-line\");\n      attributeDivs.forEach((div, _) => {\n        text += `${div.textContent?.trim()}\\n`;\n      });\n\n      const moves = article.querySelectorAll(\".move-line\");\n      moves.forEach((move, _) => {\n        text += `${move.textContent?.trim()}\\n`;\n      });\n\n      text += \"\\n\"; // Add a newline between Pokemon entries\n    });\n\n    // Copy the data to the clipboard.\n    await navigator.clipboard.writeText(text.trim());\n  }\n\n  // Update document title when title changes\n  createEffect(() => {\n    const currentTitle = title();\n    if (currentTitle) {\n      document.title = decodeHtmlEntities(currentTitle);\n    }\n\n    window.addEventListener(\"resize\", updateWidths);\n  });\n\n  createEffect(() => {\n    // Only run if data is loaded\n    if (!data()) return;\n    // Re-parse with the current twoDImages setting\n    const parsedPaste = parsePaste(data(), sett().twoDImages);\n    setPaste(parsedPaste);\n    if (parsedPaste) {\n      setTitle(parsedPaste.title);\n    }\n  });\n\n  function darkModeToggle() {\n    const body = document.getElementsByTagName(\"body\")[0];\n    if (sett().darkMode) {\n      body.classList.add(\"dark\");\n      body.classList.remove(\"light\");\n    } else {\n      body.classList.add(\"light\");\n      body.classList.remove(\"dark\");\n    }\n  }\n\n  createEffect(() => {\n    darkModeToggle();\n  });\n\n  onMount(async () => {\n    const url = window.location.href;\n    const items = url.split(\"/\");\n    const id = items[items.length - 1];\n    const response = await fetch(`/${id}/json`);\n    const json = await response.json();\n\n    await initWasm();\n    const wsUrl = \"/ws\";\n    const socket = new WebSocket(wsUrl);\n    socket.onopen = async () => {\n      console.log(\"WebSocket connected to:\", wsUrl);\n    };\n\n    if (json.encrypted) {\n      setIsEncrypted(true);\n      // Get user input via popup.\n      let done = false;\n      let promptMsg = \"Enter password\";\n      while (!done) {\n        let passkey = prompt(promptMsg, \"\");\n        while (passkey === \"\" || passkey === null) {\n          promptMsg = \"Enter password\";\n          passkey = prompt(promptMsg, \"\");\n        }\n        const decrypted = decrypt(json.data, passkey as string);\n        if (decrypted == null) {\n          promptMsg = \"Invalid password\";\n        } else {\n          setData(decrypted);\n          done = true;\n        }\n      }\n    } else {\n      setData(JSON.stringify(json.data));\n    }\n\n    darkModeToggle();\n\n    window.addEventListener(\"resize\", updateWidths);\n    updateWidths();\n\n    onCleanup(() => {\n      window.removeEventListener(\"resize\", updateWidths);\n    });\n\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.key === \"Escape\") {\n        setShowModal(false);\n      }\n    };\n    window.addEventListener(\"keydown\", handleKeyDown);\n    onCleanup(() => window.removeEventListener(\"keydown\", handleKeyDown));\n  });\n\n  return (\n    <Show when={paste()}>\n      {(currentPaste) => (\n        <div class=\"content-wrapper\">\n          <div class=\"side-content\" id=\"sidebar\">\n            <div class=\"sidebar-inner md:ml-10 md:mr-2\">\n              <Show\n                when={\n                  currentPaste().title !== \"\" ||\n                  currentPaste().author !== \"\" ||\n                  currentPaste().format !== \"\" ||\n                  currentPaste().rental !== \"\"\n                }\n              >\n                <div\n                  role=\"note\"\n                  class=\"metadata\"\n                  id=\"metadata\"\n                  style={{ \"user-select\": \"none\" }}\n                  onMouseOver={() => setSelectable(true, \"metadata\")}\n                  onFocus={() => setSelectable(true, \"metadata\")}\n                  onMouseOut={() => setSelectable(false, \"metadata\")}\n                  onBlur={() => setSelectable(false, \"metadata\")}\n                >\n                  <Show when={currentPaste().title !== \"\"}>\n                    <h1\n                      class=\"text-[#c2a8d4] text-2xl font-semibold\"\n                      id=\"title\"\n                      style={{ \"user-select\": \"none\" }}\n                      aria-label={currentPaste().title}\n                      innerHTML={currentPaste().title}\n                    />\n                  </Show>\n                  <Show when={currentPaste().author !== \"\"}>\n                    <p\n                      class=\"text-base\"\n                      id=\"author\"\n                      style={{ \"user-select\": \"none\" }}\n                      innerHTML={`By: ${currentPaste().author}`}\n                    />\n                  </Show>\n                  <Show when={currentPaste().format !== \"\"}>\n                    <p\n                      class=\"text-base\"\n                      id=\"format\"\n                      style={{ \"user-select\": \"none\" }}\n                    >\n                      Format: {currentPaste().format}\n                    </p>\n                  </Show>\n                  <Show when={currentPaste().rental !== \"\"}>\n                    <p\n                      class=\"text-base\"\n                      id=\"rental\"\n                      style={{ \"user-select\": \"none\" }}\n                    >\n                      Rental: {currentPaste().rental}\n                    </p>\n                  </Show>\n                </div>\n              </Show>\n              <div class=\"notes-section my-1\">\n                <Show when={currentPaste().notes !== \"\"}>\n                  <button\n                    class=\"cursor-pointer h-[30px] font-bold bg-[#c2a8d4] hover:bg-[#9770b6] text-black w-[175px] mt-1 py-1 border-none rounded\"\n                    type=\"button\"\n                    onClick={() => {\n                      setShowNotes(!showNotes());\n                      const notes =\n                        document.getElementsByClassName(\"notes-content\");\n                      if (notes.length > 0) {\n                        const notes_obj = notes[0] as HTMLElement;\n                        if (notes_obj.getBoundingClientRect().top < 0) {\n                          notes_obj.style.top = \"0px\";\n                        }\n                      }\n\n                      if (showNotes()) {\n                        setNotesOpacity(1.0);\n                      }\n                    }}\n                  >\n                    {showNotes() ? \"Hide notes\" : \"Show notes\"}\n                  </button>\n                  <Show when={showNotes()}>\n                    <div\n                      role=\"note\"\n                      class=\"notes-content bg-zinc-600 border border-ccc p-5 rounded shadow-lg z-20\"\n                      onMouseOver={() => {\n                        makeOpaqueOnFocus();\n                        setSelectable(true, \"notes\");\n                      }}\n                      onFocus={() => {\n                        makeOpaqueOnFocus();\n                        setSelectable(true, \"notes\");\n                      }}\n                      onMouseOut={() => {\n                        makeTransparentOnMouseover();\n                        setSelectable(false, \"notes\");\n                      }}\n                      onBlur={() => {\n                        makeTransparentOnMouseover();\n                        setSelectable(false, \"notes\");\n                      }}\n                      style={{\n                        width: notesWidth(),\n                        opacity: notesOpacity(),\n                        \"user-select\": \"none\",\n                        \"z-index\": 2,\n                      }}\n                    >\n                      <p\n                        id=\"notes\"\n                        class=\"!text-white\"\n                        innerHTML={currentPaste().notes.replace(\n                          /\\n/g,\n                          \"<br />\",\n                        )}\n                      />\n                    </div>\n                  </Show>\n                </Show>\n              </div>\n            </div>\n            <div id=\"buttons\">\n              <button\n                style={{ \"user-select\": \"none\" }}\n                type=\"submit\"\n                onClick={copyPaste}\n                class=\"w-[175px] h-[30px] copy-button font-bold bg-[#c2a8d4] hover:bg-[#9770b6] text-black py-1 rounded mb-1\"\n              >\n                Copy\n              </button>\n              <br />\n              <button\n                class=\"cursor-pointer h-[30px] font-bold bg-[#c2a8d4] hover:bg-[#9770b6] text-black w-[175px] mt-1 py-1 border-none rounded\"\n                style={{ \"user-select\": \"none\" }}\n                type=\"button\"\n                onClick={() => setShowModal(true)}\n              >\n                Settings\n              </button>\n            </div>\n          </div>\n          <div class=\"main\">\n            <For each={currentPaste().pokemon}>\n              {(pokemon) => {\n                return (\n                  <article>\n                    <div class=\"img mr-2\">\n                      <Show when={pokemon.item_image !== \"\"}>\n                        <span class=\"img-item\" style={pokemon.item_image} />\n                      </Show>\n                      <img\n                        class=\"img-pokemon\"\n                        src={pokemon.pokemon_image}\n                        alt={pokemon.name}\n                      />\n                    </div>\n\n                    <div class=\"paste\">\n                      <div id=\"mon_title\">\n                        <Show\n                          when={pokemon.nickname !== \"\"}\n                          fallback={\n                            <>\n                              <span\n                                class={`type-${pokemon.type1} inline-element`}\n                              >\n                                {pokemon.name}\n                              </span>\n                              <Show when={pokemon.gender !== \"\"}>\n                                <span\n                                  innerHTML={` (<span class=\"inline-element gender-${pokemon.gender}\">${pokemon.gender}</span>)`}\n                                />\n                              </Show>\n                            </>\n                          }\n                        >\n                          {pokemon.nickname} (\n                          <span class={`type-${pokemon.type1} inline-element`}>\n                            {pokemon.name}\n                          </span>\n                          )\n                          <Show when={pokemon.gender !== \"\"}>\n                            <span\n                              innerHTML={` (<span class=\"inline-element gender-${pokemon.gender}\">${pokemon.gender}</span>)`}\n                            />\n                          </Show>\n                        </Show>\n                        <Show when={pokemon.item !== \"\"}>\n                          <span> @ </span>\n                          <span\n                            class=\"inline-element\"\n                            innerHTML={`${pokemon.item.trim()}`}\n                          />\n                        </Show>\n                      </div>\n\n                      <Show when={pokemon.ability !== \"\"}>\n                        <div class=\"attribute-line\">\n                          <span class=\"attr\">Ability:</span> {pokemon.ability}\n                        </div>\n                      </Show>\n                      <Show when={pokemon.level !== 100}>\n                        <div class=\"attribute-line\">\n                          <span class=\"attr\">Level:</span> {pokemon.level}\n                        </div>\n                      </Show>\n                      <Show when={pokemon.shiny !== \"\"}>\n                        <div class=\"attribute-line\">\n                          <span class=\"attr\">Shiny:</span> {pokemon.shiny}\n                        </div>\n                      </Show>\n                      <Show when={pokemon.hidden_power !== \"\"}>\n                        <div class=\"attribute-line\">\n                          <span class=\"attr\">Hidden Power:</span>{\" \"}\n                          <span class={`type-${pokemon.hidden_power}`}>\n                            {pokemon.hidden_power}\n                          </span>\n                        </div>\n                      </Show>\n                      <Show when={pokemon.tera_type !== \"\"}>\n                        <div class=\"attribute-line\">\n                          <span class=\"attr\">Tera Type:</span>{\" \"}\n                          <span class={`type-${pokemon.tera_type}`}>\n                            {pokemon.tera_type}\n                          </span>\n                        </div>\n                      </Show>\n                      <Show when={pokemon.last_stat_ev !== \"\"}>\n                        <div class=\"attribute-line\">\n                          EVs:&nbsp;\n                          <Show when={pokemon.evs[0] !== 0}>\n                            <span class=\"stat-hp\">{pokemon.evs[0]} HP</span>\n                            <Show when={pokemon.last_stat_ev !== \"hp\"}>/</Show>\n                          </Show>\n                          <Show when={pokemon.evs[1] !== 0}>\n                            <span class=\"stat-atk\">{pokemon.evs[1]} Atk</span>\n                            <Show when={pokemon.last_stat_ev !== \"atk\"}>/</Show>\n                          </Show>\n                          <Show when={pokemon.evs[2] !== 0}>\n                            <span class=\"stat-def\">{pokemon.evs[2]} Def</span>\n                            <Show when={pokemon.last_stat_ev !== \"def\"}>/</Show>\n                          </Show>\n                          <Show when={pokemon.evs[3] !== 0}>\n                            <span class=\"stat-spa\">{pokemon.evs[3]} SpA</span>\n                            <Show when={pokemon.last_stat_ev !== \"spa\"}>/</Show>\n                          </Show>\n                          <Show when={pokemon.evs[4] !== 0}>\n                            <span class=\"stat-spd\">{pokemon.evs[4]} SpD</span>\n                            <Show when={pokemon.last_stat_ev !== \"spd\"}>/</Show>\n                          </Show>\n                          <Show when={pokemon.evs[5] !== 0}>\n                            <span class=\"stat-spe\">{pokemon.evs[5]} Spe</span>\n                          </Show>\n                        </div>\n                      </Show>\n\n                      <Show when={pokemon.nature !== \"\"}>\n                        <div class=\"attribute-line\">{pokemon.nature}</div>\n                      </Show>\n\n                      <Show when={pokemon.last_stat_iv !== \"\"}>\n                        <div class=\"attribute-line\">\n                          IVs:&nbsp;\n                          <Show when={pokemon.ivs[0] !== 31}>\n                            {pokemon.ivs[0]} HP\n                            <Show when={pokemon.last_stat_iv !== \"hp\"}>/</Show>\n                          </Show>\n                          <Show when={pokemon.ivs[1] !== 31}>\n                            {pokemon.ivs[1]} Atk\n                            <Show when={pokemon.last_stat_iv !== \"atk\"}>/</Show>\n                          </Show>\n                          <Show when={pokemon.ivs[2] !== 31}>\n                            {pokemon.ivs[2]} Def\n                            <Show when={pokemon.last_stat_iv !== \"def\"}>/</Show>\n                          </Show>\n                          <Show when={pokemon.ivs[3] !== 31}>\n                            {pokemon.ivs[3]} SpA\n                            <Show when={pokemon.last_stat_iv !== \"spa\"}>/</Show>\n                          </Show>\n                          <Show when={pokemon.ivs[4] !== 31}>\n                            {pokemon.ivs[4]} SpD\n                            <Show when={pokemon.last_stat_iv !== \"spd\"}>/</Show>\n                          </Show>\n                          <Show when={pokemon.ivs[5] !== 31}>\n                            {pokemon.ivs[5]} Spe\n                          </Show>\n                        </div>\n                      </Show>\n\n                      <For each={pokemon.moves}>\n                        {(move) => (\n                          <div class=\"move-line\">\n                            <Show\n                              when={sett().moveColors}\n                              fallback={\n                                <>\n                                  <span class={`type-${move.type1}`}>-</span>\n                                  <span style={{ color: \"white\" }}>\n                                    {\" \"}\n                                    {move.name}\n                                  </span>\n                                </>\n                              }\n                            >\n                              <span class={`type-${move.type1}`}>\n                                - {move.name}\n                              </span>\n                            </Show>\n                          </div>\n                        )}\n                      </For>\n                      <br\n                        class=\"display-none\"\n                        style={{ \"line-height\": \"0px\" }}\n                      />\n                      <br\n                        class=\"display-none\"\n                        style={{ \"line-height\": \"0px\" }}\n                      />\n                    </div>\n                  </article>\n                );\n              }}\n            </For>\n          </div>\n          <Watermark />\n          <Show when={showModal()}>\n            <div\n              class=\"fixed inset-0 bg-black/20 backdrop-blur-sm flex items-center justify-center z-100 !text-white\"\n              onClick={() => setShowModal(false)}\n              onKeyDown={(e) => e.stopPropagation()}\n              tabindex=\"-1\"\n            >\n              <div\n                class=\"relative bg-white dark:bg-zinc-800 rounded-lg p-6 max-w-lg w-full max-h-[90vh] overflow-y-auto shadow-lg\"\n                onClick={(e) => e.stopPropagation()}\n                onKeyDown={() => {}}\n                tabindex=\"0\"\n              >\n                <button\n                  type=\"button\"\n                  class=\"absolute top-2 right-2 text-gray-500 hover:text-gray-700 dark:hover:text-gray-300\"\n                  onClick={() => setShowModal(false)}\n                  aria-label=\"Close modal\"\n                >\n                  ✕\n                </button>\n                <h2 class=\"text-xl font-semibold mb-4\">Settings</h2>\n                <div class=\"flex flex-col gap-2 w-60\">\n                  <div class=\"flex flex-row items-center gap-4\">\n                    <label for=\"colors\" class=\"font-medium cursor-pointer w-32\">\n                      Move colors\n                    </label>\n                    <input\n                      id=\"colors\"\n                      name=\"colors\"\n                      type=\"checkbox\"\n                      class=\"align-middle\"\n                      checked={sett().moveColors}\n                      onChange={(e) => {\n                        const value = JSON.stringify(e.target.checked);\n                        localStorage.setItem(\"moveColors\", value);\n                        setSett({\n                          ...sett(),\n                          moveColors: e.target.checked,\n                        });\n                      }}\n                    />\n                  </div>\n                  <div class=\"flex flex-row items-center gap-4\">\n                    <label\n                      for=\"twoDImages\"\n                      class=\"font-medium cursor-pointer w-32\"\n                    >\n                      2D images\n                    </label>\n                    <input\n                      id=\"twoDImages\"\n                      name=\"twoDImages\"\n                      type=\"checkbox\"\n                      class=\"align-middle\"\n                      checked={sett().twoDImages}\n                      onChange={(e) => {\n                        const value = JSON.stringify(e.target.checked);\n                        localStorage.setItem(\"twoDImages\", value);\n                        setSett({\n                          ...sett(),\n                          twoDImages: e.target.checked,\n                        });\n                      }}\n                    />\n                  </div>\n                  <div class=\"flex flex-row items-center gap-4\">\n                    <label\n                      for=\"darkMode\"\n                      class=\"font-medium cursor-pointer w-32\"\n                    >\n                      Dark Mode\n                    </label>\n                    <input\n                      id=\"darkMode\"\n                      name=\"darkMode\"\n                      type=\"checkbox\"\n                      class=\"align-middle\"\n                      checked={sett().darkMode}\n                      onChange={(e) => {\n                        const value = JSON.stringify(e.target.checked);\n                        localStorage.setItem(\"darkMode\", value);\n                        setSett({\n                          ...sett(),\n                          darkMode: e.target.checked,\n                        });\n                      }}\n                    />\n                  </div>\n                </div>\n                <Show when={!currentPaste().isOts && !isEncrypted()}>\n                  <div class=\"flex flex-row gap-4 align-middle mt-2\">\n                    <button\n                      type=\"button\"\n                      onClick={handleCreateOts}\n                      class=\"bg-[#c2a8d4] hover:bg-[#9770b6] text-black px-4 py-0 rounded text-base font-bold\"\n                    >\n                      Create OTS\n                    </button>\n                  </div>\n                </Show>\n              </div>\n            </div>\n          </Show>\n        </div>\n      )}\n    </Show>\n  );\n};\n\nexport default PasteView;\n","import { exports, memory } from \"./helpers\";\n\nexport function encrypt(message: string, passphrase: string): string | null {\n  if (!exports || !memory) {\n    return null;\n  }\n  const passphrase_len = passphrase.length;\n  const message_len = message.length;\n\n  // Allocate a single buffer for both strings\n  const buffer_ptr = exports.allocUint8(passphrase_len + message_len);\n  if (!buffer_ptr) {\n    console.error(\"Failed to allocate memory\");\n    return null;\n  }\n\n  // Get a view of memory\n  let memoryView = new Uint8Array(exports.memory.buffer);\n\n  // Copy the passphrase and message into the single buffer\n  const passphraseBuffer = new TextEncoder().encode(passphrase);\n  const messageBuffer = new TextEncoder().encode(message);\n\n  // Write passphrase at the beginning of the buffer\n  for (let i = 0; i < passphrase_len; i++) {\n    memoryView[buffer_ptr + i] = passphraseBuffer[i];\n  }\n\n  // Write message right after the passphrase\n  for (let i = 0; i < message_len; i++) {\n    memoryView[buffer_ptr + passphrase_len + i] = messageBuffer[i];\n  }\n\n  // Single call to encrypt\n  const success = exports.encryptMessage(\n    buffer_ptr,\n    passphrase_len,\n    message_len,\n  );\n\n  if (!success) {\n    console.error(\"Failed to encrypt message\");\n    exports.resetArena();\n    return null;\n  }\n\n  // Get result information from separate functions\n  const resultPtr = exports.getResultPtr();\n  const resultLen = exports.getResultLen();\n\n  if (resultPtr === 0 || resultLen === 0) {\n    console.error(\"Invalid result\");\n    exports.resetArena();\n    return null;\n  }\n\n  // Get a fresh view of memory after the WASM function call\n  memoryView = new Uint8Array(exports.memory.buffer);\n\n  const decoder = new TextDecoder();\n  const result_message = decoder.decode(\n    memoryView.slice(resultPtr, resultPtr + resultLen),\n  );\n\n  // Reset the arena instead of individual frees\n  exports.resetArena();\n\n  return result_message;\n}\n\nexport function decrypt(encrypted: string, passphrase: string): string | null {\n  if (!exports || !memory) {\n    return null;\n  }\n  const passphrase_len = passphrase.length;\n  const encrypted_len = encrypted.length;\n\n  // Allocate a single buffer for both strings\n  const buffer_ptr = exports.allocUint8(passphrase_len + encrypted_len);\n  if (!buffer_ptr) {\n    console.error(\"Failed to allocate memory\");\n    return null;\n  }\n\n  // Get a view of memory\n  let memoryView = new Uint8Array(exports.memory.buffer);\n\n  // Copy the passphrase and message into the single buffer\n  const passphraseBuffer = new TextEncoder().encode(passphrase);\n  const encryptedBuffer = new TextEncoder().encode(encrypted);\n\n  // Write passphrase at the beginning of the buffer\n  for (let i = 0; i < passphrase_len; i++) {\n    memoryView[buffer_ptr + i] = passphraseBuffer[i];\n  }\n\n  // Write message right after the passphrase\n  for (let i = 0; i < encrypted_len; i++) {\n    memoryView[buffer_ptr + passphrase_len + i] = encryptedBuffer[i];\n  }\n\n  // Single call to encrypt\n  const success = exports.decryptMessage(\n    buffer_ptr,\n    passphrase_len,\n    encrypted_len,\n  );\n\n  if (!success) {\n    console.error(\"Failed to encrypt message\");\n    exports.resetArena();\n    return null;\n  }\n\n  // Get result information from separate functions\n  const resultPtr = exports.getResultPtr();\n  const resultLen = exports.getResultLen();\n\n  if (resultPtr === 0 || resultLen === 0) {\n    console.error(\"Invalid result\");\n    exports.resetArena();\n    return null;\n  }\n\n  // Get a fresh view of memory after the WASM function call\n  memoryView = new Uint8Array(exports.memory.buffer);\n\n  const decoder = new TextDecoder();\n  const result_message = decoder.decode(\n    memoryView.slice(resultPtr, resultPtr + resultLen),\n  );\n\n  // Reset the arena instead of individual frees\n  exports.resetArena();\n\n  return result_message;\n}\n","import { render } from 'solid-js/web';\nimport Paste from './PasteView';\n\nconst root = document.getElementById('root');\nif (root) {\n    render(() => <Paste />, root);\n}\n"],"names":["exports","memory","_el$","_el$2","isFixed","setIsFixed","createSignal","dir","setDir","prevSize","setPrevSize","window","innerWidth","check","onMount","onresize","createEffect","_tmpl$","firstChild","style","setProperty","_$setAttribute","logo","_$effect","_p$","_v$","_v$2","undefined","_v$3","_v$4","e","removeProperty","t","a","o","sizeOfUint32","Uint32Array","sizeOfUint8","Uint8Array","sizeOfNullByte","decodeString","pointer","length","slice","TextDecoder","decodeNullTerminatedString","memSize","console","maxLength","value","index","initWasm","instance","wasmModule","WebAssembly","fetch","Error","now","BigInt","Date","alignTo4Bytes","Math","PasteView","paste","setPaste","isEncrypted","setIsEncrypted","data","setData","title","setTitle","showNotes","setShowNotes","notesOpacity","setNotesOpacity","notesWidth","setNotesWidth","showModal","setShowModal","handleCreateOts","pasteObj","originalPaste","encrypted","JSON","parse","content","pasteText","split","filter","line","test","join","form","document","createElement","method","action","display","btoa","decodeURIComponent","encodeURIComponent","stringify","input","type","name","appendChild","body","submit","moveColorsString","localStorage","getItem","moveColors","twoDImagesString","twoDImages","darkModeString","darkMode","sett","setSett","updateWidths","main","getElementsByTagName","sidebar","getElementById","notes","articles","end","windowWidth","i","margin_bottom","floor","innerHeight","marginBottom","width","min","max","setSelectable","id","element","userSelect","children","children_list","push","child","pop","copyPaste","text","querySelectorAll","forEach","article","_","monTitle","querySelector","textContent","trim","attributeDivs","div","moves","move","navigator","clipboard","writeText","darkModeToggle","classList","add","remove","currentTitle","decodeHtmlEntities","str","txt","innerHTML","decoded","addEventListener","parsedPaste","parsePaste","twoDimages","encodeNullTerminatedString","string","buffer","TextEncoder","sizeOfNullTerminatedString","input_len","decodePaste","pastePtr","titlePtr","titleSlice","authorPtr","authorSlice","author","notesPtr","notesSlice","formatPtr","formatSlice","format","rentalPtr","rentalSlice","rental","pokemon_len","pokemonLenSlice","pokemonArrayPtrPointer","pokemonArrayPointer","pokemonArrayPtrSlice","pokemon","alignedPokemonArrayPointer","pokemonArraySlice","pokemonPtr","mon","decodePokemon","offset","nameSlice","namePtr","nicknameSlice","nicknamePtr","basePtr","nickname","itemSlice","itemPtr","item","genderNum","genderPtr","itemImageSlice","itemImagePtr","itemImage","pokemonImageSlice","pokemonImagePtr","pokemonImage","moves_len","movesLenPtr","movesArrayPointer","movesArrayPtrSlice","movesArray","currentMovePtr","decodeMove","movePtr","type1Slice","type1Ptr","type1","gender","evs","evValue","evPtr","ivs","ivValue","ivPtr","linesLenPointer","lines_len","linesLenSlice","lines","linesArrayPtrPointer","linesArrayPointer","linesArrayPtrSlice","alignedLinesArrayPointer","linesArraySlice","linePtr","lastStatEvSlice","lastStatEvPtr","last_stat_ev","lastStatIvSlice","lastStatIvPtr","last_stat_iv","type2Slice","type2Ptr","type2","abilitySlice","abilityPtr","ability","level","levelPtr","shinySlice","shinyPtr","shiny","hpSlice","hpPointer","hidden_power","teraTypeSlice","teraTypePointer","tera_type","natureSlice","naturePointer","nature","isOtsValue","isOts","items","url","location","href","response","json","socket","WebSocket","onopen","log","done","promptMsg","passkey","prompt","decrypted","decrypt","passphrase","passphrase_len","encrypted_len","buffer_ptr","memoryView","passphraseBuffer","encryptedBuffer","resultPtr","resultLen","result_message","decoder","onCleanup","removeEventListener","handleKeyDown","key","_$createComponent","Show","when","currentPaste","_el$3","_el$11","_el$16","_el$18","_el$19","_tmpl$10","_el$17","_el$15","nextSibling","_$insert","_el$4","_tmpl$5","$$mouseout","$$mouseover","_el$5","_el$6","_tmpl$2","_el$7","_tmpl$3","_el$9","_tmpl$4","_el$12","_tmpl$6","$$click","getElementsByClassName","notes_obj","getBoundingClientRect","top","_el$13","_tmpl$7","_el$14","_v$5","replace","For","each","_el$36","_el$37","_el$39","_el$40","_el$41","_el$80","_el$81","_tmpl$29","item_image","_el$38","_tmpl$11","_$p","_$style","fallback","_el$82","_tmpl$12","_$className","_el$83","_el$42","_$memo","_el$43","_el$45","_tmpl$13","_tmpl$14","_el$46","_tmpl$15","_el$47","_el$49","_tmpl$16","_el$50","_el$52","_tmpl$17","_el$53","_el$55","_tmpl$18","_el$58","_el$57","_el$56","_el$59","_tmpl$19","_el$62","_el$61","_el$60","_el$63","_tmpl$26","_el$65","_el$66","_tmpl$20","_el$67","_el$68","_tmpl$21","_el$69","_el$70","_tmpl$22","_el$71","_el$72","_tmpl$23","_el$73","_el$74","_tmpl$24","_el$75","_tmpl$25","_el$76","_el$77","_tmpl$27","_el$78","_tmpl$28","_el$84","_tmpl$31","_el$87","_el$88","_tmpl$32","_tmpl$33","_el$85","_tmpl$30","_v$6","pokemon_image","_v$7","Watermark","_el$20","_tmpl$9","_el$21","_el$22","_el$25","_el$24","_el$23","_el$27","_el$26","_el$28","_el$30","_el$29","_el$33","_el$32","_el$31","$$keydown","stopPropagation","target","checked","setItem","_el$34","_tmpl$8","_el$35","_$delegateEvents","root","render","Paste"],"mappings":"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"}