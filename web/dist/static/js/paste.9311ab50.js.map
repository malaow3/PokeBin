{"version":3,"file":"static/js/paste.9311ab50.js","sources":["webpack://web/./src/wasm_helpers.ts","webpack://web/./src/web_wasm_helpers.ts","webpack://web/./src/wasm_utils.ts","webpack://web/./src/utils.ts","webpack://web/./src/settings.ts","webpack://web/./src/watermark.tsx","webpack://web/./src/settingsForm.tsx","webpack://web/./src/PasteViewBase.tsx","webpack://web/./src/PasteViewNew.tsx","webpack://web/./src/PasteView.tsx","webpack://web/./src/encryption.ts","webpack://web/./src/paste.tsx"],"sourcesContent":["export let exports: WebAssemblyExports;\nexport let memory: WebAssembly.Memory;\nimport { encrypt, decrypt } from \"./encryption.ts\";\nimport { type WasmInstance, decodeString } from \"./wasm_utils.ts\";\n\nlet instance: WasmInstance;\n\ninterface WebAssemblyExports {\n  memory: WebAssembly.Memory;\n\n  init(seed: bigint): void;\n\n  allocUint8(length: number): number;\n\n  encryptMessage(\n    buffer_ptr: number,\n    passphrase_len: number,\n    message_len: number,\n  ): boolean;\n\n  resetArena(): void;\n  free(pointer: number, length: number): void;\n\n  getResultPtr(): number;\n  getResultLen(): number;\n  decryptMessage(\n    buffer_ptr: number,\n    passphrase_len: number,\n    encrypted_len: number,\n  ): boolean;\n}\n\nasync function initWasm() {\n  const wasmModule = await WebAssembly.instantiateStreaming(fetch(\"/wasm\"), {\n    env: {\n      _throwError(pointer: number, length: number) {\n        const message = decodeString(instance, pointer, length);\n        throw new Error(message);\n      },\n      _consoleLog(pointer: number, length: number) {\n        const message = decodeString(instance, pointer, length);\n        console.log(message);\n      },\n    },\n  });\n  const inst = wasmModule.instance;\n  exports = inst.exports as unknown as WebAssemblyExports;\n  memory = exports.memory;\n\n  instance = {\n    exports: exports,\n    memory: memory,\n  };\n\n  const now = BigInt(Date.now());\n  exports.init(now);\n}\n\nexport { encrypt, initWasm, decrypt };\n","import type { Accessor, Setter } from \"solid-js\";\nimport type { Settings } from \"./settings.ts\";\nimport {\n  type WasmInstance,\n  decodeNullTerminatedString,\n  decodeString,\n  encodeNullTerminatedString,\n  sizeOfUint32,\n} from \"./wasm_utils.ts\";\nimport { getId } from \"./utils.ts\";\nexport let exports: WebAssemblyExports;\nexport let memory: WebAssembly.Memory;\n\ninterface WebAssemblyExports {\n  memory: WebAssembly.Memory;\n\n  init(seed: bigint): void;\n\n  allocUint8(length: number): number;\n\n  resetArena(): void;\n  free(pointer: number, length: number): void;\n\n  validatePaste(buffer_ptr: number, paste_len: number): number;\n  parsePaste(\n    buffer_ptr: number,\n    buffer_len: number,\n    twoDimages: boolean,\n  ): number;\n  destroyPaste(paste_ptr: number): void;\n\n  savePasteToLastViewed(\n    limit: number,\n    packedStringPointer: number,\n    packedStringLength: number,\n    pasteJsonPointer: number,\n    pasteJsonLength: number,\n  ): number;\n\n  getPackedPtr(): number;\n  getPackedLen(): number;\n  resetPackedResult(): void;\n}\n\nlet instance: WasmInstance;\n\nexport async function initWasm() {\n  const wasmModule = await WebAssembly.instantiateStreaming(\n    fetch(\"/web_wasm\"),\n    {\n      env: {\n        _throwError(pointer: number, length: number) {\n          const message = decodeString(instance, pointer, length);\n          throw new Error(message);\n        },\n        _consoleLog(pointer: number, length: number) {\n          const message = decodeString(instance, pointer, length);\n          console.log(message);\n        },\n      },\n    },\n  );\n  const inst = wasmModule.instance;\n  exports = inst.exports as unknown as WebAssemblyExports;\n  memory = exports.memory;\n\n  instance = {\n    exports: exports,\n    memory: memory,\n  };\n\n  const now = BigInt(Date.now());\n  exports.init(now);\n}\n\nexport function SavePasteToLastVisited(\n  sett: Accessor<Settings>,\n  setSett: Setter<Settings>,\n  paste: Paste,\n) {\n  if (sett().lastViewedCount === 0) {\n    return;\n  }\n  const packedString = sett().lastViewedPacked;\n  const { pointer: packedStringPointer, length: packedStringLength } =\n    encodeNullTerminatedString(instance, packedString);\n\n  // @ts-ignore: we need to add the ID to the paste struct\n  paste.id = getId();\n\n  const { pointer: pasteJsonPointer, length: pasteJsonLength } =\n    encodeNullTerminatedString(instance, JSON.stringify(paste));\n\n  instance.exports.savePasteToLastViewed(\n    sett().lastViewedCount,\n    packedStringPointer,\n    packedStringLength,\n    pasteJsonPointer,\n    pasteJsonLength,\n  );\n\n  const packedPtr = instance.exports.getPackedPtr();\n  const packedLen = instance.exports.getPackedLen();\n\n  if (packedLen === -1) {\n    console.log(\"Failed to get packed string length\");\n    instance.exports.resetPackedResult();\n    return;\n  }\n\n  // Read the packed string as bytes\n  const packedBytes = new Uint8Array(memory.buffer, packedPtr, packedLen);\n\n  // Decode as UTF-8 string\n  const packed = new TextDecoder().decode(packedBytes);\n  console.log(packed);\n\n  setSett({ ...sett(), lastViewedPacked: packed });\n  localStorage.setItem(\"lastViewedPacked\", packed);\n\n  instance.exports.resetPackedResult();\n  instance.exports.resetArena();\n}\n\nexport function validatePaste(paste: string): number {\n  if (!exports || !memory) {\n    return -1;\n  }\n\n  const pasteBuffer = new TextEncoder().encode(paste);\n  const buffer_ptr = exports.allocUint8(pasteBuffer.length);\n  if (!buffer_ptr) {\n    console.error(\"Failed to allocate memory\");\n    return -1;\n  }\n\n  // Get a view of memory\n  const memoryView = new Uint8Array(exports.memory.buffer);\n\n  // Copy the entire buffer\n  memoryView.set(pasteBuffer, buffer_ptr);\n\n  const success = exports.validatePaste(buffer_ptr, pasteBuffer.length);\n  exports.resetArena();\n\n  return success;\n}\n\nfunction alignTo4Bytes(pointer: number): number {\n  return Math.ceil(pointer / 4) * 4;\n}\n\nexport type Move = {\n  name: string;\n  type1: string;\n};\n\nexport type Pokemon = {\n  name: string;\n  nickname: string;\n  item: string;\n  gender: string;\n  item_image: string;\n  pokemon_image: string;\n  moves_len: number;\n  moves: Move[];\n  evs: number[];\n  ivs: number[];\n  lines_count: number;\n  lines: string[];\n  last_stat_ev: string;\n  last_stat_iv: string;\n  type1: string;\n  type2: string;\n  ability: string;\n  level: number;\n  shiny: string;\n  hidden_power: string;\n  tera_type: string;\n  nature: string;\n};\n\nexport type Paste = {\n  title: string;\n  author: string;\n  notes: string;\n  format: string;\n  rental: string;\n  pokemon_len: number;\n  pokemon: Pokemon[];\n  isOts: boolean;\n};\n\nfunction decodeMove(movePtr: number): Move {\n  try {\n    let offset = 0;\n    const namePtr = new Uint32Array(memory.buffer, movePtr, 1);\n    const nameSlice = namePtr[0];\n    const name = decodeNullTerminatedString(instance, nameSlice);\n    offset += sizeOfUint32;\n\n    const type1Ptr = new Uint32Array(memory.buffer, movePtr + offset, 1);\n    const type1Slice = type1Ptr[0];\n    const type1 = decodeNullTerminatedString(instance, type1Slice);\n\n    return { name, type1 };\n  } catch (e) {\n    console.error(e);\n    return { name: \"\", type1: \"\" };\n  }\n}\n\nfunction decodePokemon(pokemonPtr: number): Pokemon {\n  try {\n    const basePtr = pokemonPtr;\n    let offset = 0;\n    const namePtr = new Uint32Array(memory.buffer, basePtr, 1);\n    const nameSlice = namePtr[0];\n    const name = decodeNullTerminatedString(instance, nameSlice);\n    offset += sizeOfUint32;\n\n    const nicknamePtr = new Uint32Array(memory.buffer, basePtr + offset, 1);\n    const nicknameSlice = nicknamePtr[0];\n    const nickname = decodeNullTerminatedString(instance, nicknameSlice);\n    offset += sizeOfUint32;\n\n    const itemPtr = new Uint32Array(memory.buffer, basePtr + offset, 1);\n    const itemSlice = itemPtr[0];\n    const item = decodeNullTerminatedString(instance, itemSlice);\n    offset += sizeOfUint32;\n\n    const genderPtr = new Uint32Array(memory.buffer, basePtr + offset, 1);\n    const genderNum = genderPtr[0];\n    offset += sizeOfUint32;\n\n    const itemImagePtr = new Uint32Array(memory.buffer, basePtr + offset, 1);\n    const itemImageSlice = itemImagePtr[0];\n    const itemImage = decodeNullTerminatedString(instance, itemImageSlice);\n    offset += sizeOfUint32;\n\n    const pokemonImagePtr = new Uint32Array(memory.buffer, basePtr + offset, 1);\n    const pokemonImageSlice = pokemonImagePtr[0];\n    const pokemonImage = decodeNullTerminatedString(\n      instance,\n      pokemonImageSlice,\n    );\n    offset += sizeOfUint32;\n\n    const movesLenPtr = new Uint32Array(memory.buffer, basePtr + offset, 1);\n    const moves_len = movesLenPtr[0];\n    offset += sizeOfUint32;\n\n    const movesArrayPtrSlice = new Uint32Array(\n      memory.buffer,\n      basePtr + offset,\n      1,\n    );\n    const movesArrayPointer = movesArrayPtrSlice[0];\n\n    const movesArray = new Uint32Array(\n      memory.buffer,\n      movesArrayPointer,\n      moves_len,\n    );\n\n    const moves: Move[] = [];\n    if (moves_len > 0) {\n      for (let i = 0; i < moves_len; i++) {\n        const currentMovePtr = movesArray[i];\n        try {\n          const move = decodeMove(currentMovePtr);\n          moves.push(move);\n        } catch (e) {\n          console.error(`Error decoding move at index ${i}:`, e);\n        }\n      }\n    }\n    offset += sizeOfUint32;\n\n    let gender = \"\";\n    if (genderNum === 77) {\n      gender = \"M\";\n    } else if (genderNum === 70) {\n      gender = \"F\";\n    }\n\n    const evs: number[] = [];\n    for (let i = 0; i < 6; i++) {\n      const evPtr = new Uint32Array(memory.buffer, basePtr + offset, 1);\n      const evValue = evPtr[0];\n      evs.push(evValue);\n      offset += sizeOfUint32;\n    }\n\n    const ivs: number[] = [];\n    for (let i = 0; i < 6; i++) {\n      const ivPtr = new Uint32Array(memory.buffer, basePtr + offset, 1);\n      const ivValue = ivPtr[0];\n      ivs.push(ivValue);\n      offset += sizeOfUint32;\n    }\n\n    const linesLenPointer = basePtr + offset;\n    const linesLenSlice = new Uint32Array(memory.buffer, linesLenPointer, 1);\n    const lines_len = linesLenSlice[0];\n    offset += sizeOfUint32;\n\n    const lines: string[] = [];\n    if (lines_len > 0) {\n      // Decode items array pointer - ensure 4-byte alignment\n      const linesArrayPtrPointer = basePtr + offset;\n      const linesArrayPtrSlice = new Uint32Array(\n        memory.buffer,\n        linesArrayPtrPointer,\n        1,\n      );\n      const linesArrayPointer = linesArrayPtrSlice[0];\n\n      // Decode each line - ensure the pointer is properly aligned\n      const alignedLinesArrayPointer = alignTo4Bytes(linesArrayPointer);\n      const linesArraySlice = new Uint32Array(\n        memory.buffer,\n        alignedLinesArrayPointer,\n        lines_len,\n      );\n\n      for (let i = 0; i < lines_len; i++) {\n        const linePtr = linesArraySlice[i];\n        const line = decodeNullTerminatedString(instance, linePtr);\n        lines.push(line);\n      }\n\n      offset += sizeOfUint32 * lines_len;\n    } else {\n      offset += sizeOfUint32;\n    }\n\n    const lastStatEvPtr = new Uint32Array(memory.buffer, basePtr + offset, 1);\n    const lastStatEvSlice = lastStatEvPtr[0];\n    const last_stat_ev = decodeNullTerminatedString(instance, lastStatEvSlice);\n    offset += sizeOfUint32;\n\n    const lastStatIvPtr = new Uint32Array(memory.buffer, basePtr + offset, 1);\n    const lastStatIvSlice = lastStatIvPtr[0];\n    const last_stat_iv = decodeNullTerminatedString(instance, lastStatIvSlice);\n    offset += sizeOfUint32;\n\n    const type1Ptr = new Uint32Array(memory.buffer, basePtr + offset, 1);\n    const type1Slice = type1Ptr[0];\n    const type1 = decodeNullTerminatedString(instance, type1Slice);\n    offset += sizeOfUint32;\n\n    const type2Ptr = new Uint32Array(memory.buffer, basePtr + offset, 1);\n    const type2Slice = type2Ptr[0];\n    const type2 = decodeNullTerminatedString(instance, type2Slice);\n    offset += sizeOfUint32;\n\n    const abilityPtr = new Uint32Array(memory.buffer, basePtr + offset, 1);\n    const abilitySlice = abilityPtr[0];\n    const ability = decodeNullTerminatedString(instance, abilitySlice);\n    offset += sizeOfUint32;\n\n    const levelPtr = new Uint32Array(memory.buffer, basePtr + offset, 1);\n    const level = levelPtr[0];\n    offset += sizeOfUint32;\n\n    const shinyPtr = new Uint32Array(memory.buffer, basePtr + offset, 1);\n    const shinySlice = shinyPtr[0];\n    const shiny = decodeNullTerminatedString(instance, shinySlice);\n    offset += sizeOfUint32;\n\n    const hpPointer = new Uint32Array(memory.buffer, basePtr + offset, 1);\n    const hpSlice = hpPointer[0];\n    const hidden_power = decodeNullTerminatedString(instance, hpSlice);\n    offset += sizeOfUint32;\n\n    const teraTypePointer = new Uint32Array(memory.buffer, basePtr + offset, 1);\n    const teraTypeSlice = teraTypePointer[0];\n    const tera_type = decodeNullTerminatedString(instance, teraTypeSlice);\n    offset += sizeOfUint32;\n\n    const naturePointer = new Uint32Array(memory.buffer, basePtr + offset, 1);\n    const natureSlice = naturePointer[0];\n    const nature = decodeNullTerminatedString(instance, natureSlice);\n    offset += sizeOfUint32;\n\n    return {\n      name,\n      nickname,\n      item,\n      gender,\n      item_image: itemImage,\n      pokemon_image: pokemonImage,\n      moves_len: moves_len,\n      moves,\n      evs,\n      ivs,\n      lines_count: lines_len,\n      lines,\n      last_stat_ev,\n      last_stat_iv,\n      type1,\n      type2,\n      ability,\n      level,\n      shiny,\n      hidden_power,\n      tera_type,\n      nature,\n    };\n  } catch (e) {\n    console.error(e);\n    return {\n      name: \"\",\n      nickname: \"\",\n      item: \"\",\n      gender: \"\",\n      item_image: \"\",\n      pokemon_image: \"\",\n      moves_len: 0,\n      moves: [],\n      evs: [],\n      ivs: [],\n      lines_count: 0,\n      lines: [],\n      last_stat_ev: \"\",\n      last_stat_iv: \"\",\n      type1: \"\",\n      type2: \"\",\n      ability: \"\",\n      level: 100,\n      shiny: \"\",\n      hidden_power: \"\",\n      tera_type: \"\",\n      nature: \"\",\n    };\n  }\n}\n\nfunction decodePaste(pastePtr: number): Paste {\n  try {\n    // Access the header pointer\n    const titleSlice = new Uint32Array(memory.buffer, pastePtr, 1);\n    const titlePtr = titleSlice[0];\n    const title = decodeNullTerminatedString(instance, titlePtr);\n\n    const authorSlice = new Uint32Array(\n      memory.buffer,\n      pastePtr + sizeOfUint32,\n      1,\n    );\n    const authorPtr = authorSlice[0];\n    const author = decodeNullTerminatedString(instance, authorPtr);\n\n    const notesSlice = new Uint32Array(\n      memory.buffer,\n      pastePtr + sizeOfUint32 * 2,\n      1,\n    );\n    const notesPtr = notesSlice[0];\n    const notes = decodeNullTerminatedString(instance, notesPtr);\n\n    const formatSlice = new Uint32Array(\n      memory.buffer,\n      pastePtr + sizeOfUint32 * 3,\n      1,\n    );\n    const formatPtr = formatSlice[0];\n    const format = decodeNullTerminatedString(instance, formatPtr);\n\n    const rentalSlice = new Uint32Array(\n      memory.buffer,\n      pastePtr + sizeOfUint32 * 4,\n      1,\n    );\n    const rentalPtr = rentalSlice[0];\n    const rental = decodeNullTerminatedString(instance, rentalPtr);\n\n    const pokemonLenPtr = pastePtr + sizeOfUint32 * 5;\n    const pokemonLenSlice = new Uint32Array(memory.buffer, pokemonLenPtr, 1);\n    const pokemon_len = pokemonLenSlice[0];\n\n    // Decode items array pointer - ensure 4-byte alignment\n    const pokemonArrayPtrPointer = alignTo4Bytes(pastePtr + sizeOfUint32 * 6);\n    const pokemonArrayPtrSlice = new Uint32Array(\n      memory.buffer,\n      pokemonArrayPtrPointer,\n      1,\n    );\n    const pokemonArrayPointer = pokemonArrayPtrSlice[0];\n\n    // Decode each item - ensure the pointer is properly aligned\n    const pokemon: Pokemon[] = [];\n    const alignedPokemonArrayPointer = alignTo4Bytes(pokemonArrayPointer);\n    const pokemonArraySlice = new Uint32Array(\n      memory.buffer,\n      alignedPokemonArrayPointer,\n      pokemon_len,\n    );\n\n    for (let i = 0; i < pokemon_len; i++) {\n      const pokemonPtr = pokemonArraySlice[i];\n      const mon = decodePokemon(pokemonPtr);\n      pokemon.push(mon);\n    }\n\n    const isOtsOffset = pokemonArrayPtrPointer + sizeOfUint32;\n    const isOtsValue = new Uint32Array(memory.buffer, isOtsOffset, 1)[0];\n    const isOts = isOtsValue === 1;\n\n    const paste = {\n      title,\n      author,\n      notes,\n      format,\n      rental,\n      pokemon_len,\n      pokemon,\n      isOts,\n    };\n\n    return paste;\n  } finally {\n    exports.destroyPaste(pastePtr);\n  }\n}\n\nexport function parsePaste(data: string, twoDimages: boolean): Paste | null {\n  if (!exports || !memory) {\n    return null;\n  }\n\n  const { pointer, length } = encodeNullTerminatedString(instance, data);\n\n  const pastePtr = exports.parsePaste(pointer, length, twoDimages);\n  const paste = decodePaste(pastePtr);\n\n  exports.resetArena();\n\n  return paste;\n}\n\nexport function utf8ToBase64(str: string | undefined) {\n  // Encode to UTF-8 bytes, then to base64\n  return btoa(String.fromCharCode(...new TextEncoder().encode(str)));\n}\n\nexport function base64ToUtf8(b64: string) {\n  // Decode base64 to bytes, then decode as UTF-8\n  return new TextDecoder().decode(\n    Uint8Array.from(atob(b64), (c) => c.charCodeAt(0)),\n  );\n}\n","export const sizeOfUint32 = Uint32Array.BYTES_PER_ELEMENT;\nexport const sizeOfNullByte = Uint8Array.BYTES_PER_ELEMENT;\nexport const nullByte = 0x00;\n\nexport type WasmInstance = {\n  // biome-ignore lint/suspicious/noExplicitAny : The exports type can change based on the Wasm module\n  exports: any;\n  memory: WebAssembly.Memory;\n};\n\nexport function decodeString(\n  instance: WasmInstance,\n  pointer: number,\n  length: number,\n) {\n  const slice = new Uint8Array(instance.memory.buffer, pointer, length);\n  return new TextDecoder().decode(slice);\n}\n\nexport function decodeNullTerminatedString(\n  instance: WasmInstance,\n  pointer: number,\n) {\n  if (pointer === 0) return \"\";\n\n  // Get current memory buffer size\n  const memSize = instance.memory.buffer.byteLength;\n\n  // Ensure pointer is within bounds\n  if (pointer >= memSize) {\n    console.error(`Invalid pointer: ${pointer} exceeds memory size ${memSize}`);\n    return \"\";\n  }\n\n  // Create a view starting from pointer\n  const slice = new Uint8Array(instance.memory.buffer, pointer);\n\n  // Find null terminator, but limit search to avoid buffer overflow\n  const maxLength = memSize - pointer;\n  const length = slice.findIndex((value: number, index) => {\n    if (index >= maxLength) return true;\n    return value === nullByte;\n  });\n\n  if (length === -1 || length === 0) {\n    return \"\";\n  }\n\n  try {\n    return decodeString(instance, pointer, length);\n  } catch (e) {\n    console.error(`Failed to decode string at pointer ${pointer}:`, e);\n    return \"\";\n  }\n}\n\nexport function encodeNullTerminatedString(\n  instance: WasmInstance,\n  string: string,\n) {\n  const buffer = new TextEncoder().encode(string);\n  const sizeOfNullTerminatedString = buffer.length + sizeOfNullByte;\n  const pointer = instance.exports.allocUint8(sizeOfNullTerminatedString);\n  const slice = new Uint8Array(\n    instance.memory.buffer,\n    pointer,\n    sizeOfNullTerminatedString,\n  );\n  slice.set(buffer);\n  slice[buffer.length] = nullByte;\n  return { pointer, length: buffer.length };\n}\n","export function getId(): string {\n  const url = window.location.href;\n  const items = url.split(\"/\");\n  const id = items[items.length - 1];\n  return id;\n}\n","import { type Accessor, createSignal } from \"solid-js\";\n\nexport type Settings = {\n  moveColors: boolean;\n  twoDImages: boolean;\n  darkMode: boolean;\n  newFormat: boolean;\n  lastViewedCount: number;\n  lastViewedPacked: string;\n};\n\nexport function initSettings() {\n  const moveColorsString = localStorage.getItem(\"moveColors\");\n  let moveColors = true;\n  if (moveColorsString !== null) {\n    moveColors = JSON.parse(moveColorsString);\n  }\n\n  const twoDImagesString = localStorage.getItem(\"twoDImages\");\n  let twoDImages = false;\n  if (twoDImagesString !== null) {\n    twoDImages = JSON.parse(twoDImagesString);\n  }\n\n  const darkModeString = localStorage.getItem(\"darkMode\");\n  let darkMode = true;\n  if (darkModeString !== null) {\n    darkMode = JSON.parse(darkModeString);\n  }\n\n  const newFormatString = localStorage.getItem(\"newFormat\");\n  let newFormat = false;\n  if (newFormatString !== null) {\n    newFormat = JSON.parse(newFormatString);\n  }\n\n  const lastViewedCountString = localStorage.getItem(\"lastViewedCount\");\n  let lastViewedCount = 20;\n  if (lastViewedCountString !== null) {\n    lastViewedCount = JSON.parse(lastViewedCountString);\n  }\n\n  const lastViewedPackedString = localStorage.getItem(\"lastViewedPacked\");\n  let lastViewedPacked = \"\";\n  if (lastViewedPackedString !== null) {\n    lastViewedPacked = lastViewedPackedString;\n  }\n\n  const initSettings: Settings = {\n    moveColors: moveColors,\n    twoDImages: twoDImages,\n    darkMode: darkMode,\n    newFormat: newFormat,\n    lastViewedCount: lastViewedCount,\n    lastViewedPacked: lastViewedPacked,\n  };\n\n  const [sett, setSett] = createSignal<Settings>(initSettings);\n  return { sett, setSett };\n}\n\nfunction packedToList(packed: string) {\n  const list = packed.split(\"\\n\");\n  return list;\n}\n\nexport type PackedPaste = {\n  id: string;\n  name: string;\n  format: string;\n  pokemon: string[];\n};\n\nexport function getPackedPastes(): PackedPaste[] {\n  const packed = localStorage.getItem(\"lastViewedPacked\");\n  if (packed === null) {\n    return [];\n  }\n  const list: string[] = packedToList(packed);\n  return list.map((item) => {\n    const sections = item.split(\"|\");\n    return {\n      id: sections[0],\n      name: sections[1],\n      format: sections[2],\n      pokemon: sections.slice(3),\n    };\n  });\n}\n\nfunction listToPacked(list: PackedPaste[]): string {\n  let packedString = \"\";\n  for (let i = 0; i < list.length; i++) {\n    if (i > 0) {\n      packedString += \"\\n\";\n    }\n    packedString += `${list[i].id}|${list[i].name}|${list[i].format}`;\n    for (let j = 0; j < list[i].pokemon.length; j++) {\n      packedString += `|${list[i].pokemon[j]}`;\n    }\n  }\n  return packedString;\n}\n\nexport function removePackedPaste(\n  id: string,\n  sett: Accessor<Settings>,\n  setSett: (settings: Settings) => void,\n) {\n  const items = getPackedPastes().filter((item) => item.id !== id);\n  const newPacked = listToPacked(items);\n  localStorage.setItem(\"lastViewedPacked\", newPacked);\n  setSett({ ...sett(), lastViewedPacked: newPacked });\n}\n\nexport function updateSetting(\n  key: string,\n  value: boolean | number | string,\n  sett: Accessor<Settings>,\n  setSett: (settings: Settings) => void,\n) {\n  if (key === \"lastViewedCount\" && typeof value === \"number\") {\n    const list = packedToList(sett().lastViewedPacked);\n    if (value === 0) {\n      setSett({ ...sett(), lastViewedPacked: \"\" });\n    } else {\n      setSett({ ...sett(), lastViewedPacked: list.slice(0, value).join(\"\\n\") });\n    }\n  }\n\n  setSett({ ...sett(), [key]: value });\n  localStorage.setItem(key, JSON.stringify(value));\n}\n","import { createEffect, createSignal, onMount } from \"solid-js\";\nimport logo from \"../public/logo/large_logo_cropped.webp\";\n\nfunction Watermark() {\n  const [isFixed, setIsFixed] = createSignal(false);\n  const [dir, setDir] = createSignal(\"shrink\");\n  const [prevSize, setPrevSize] = createSignal(window.innerWidth);\n  const [height, setHeight] = createSignal(\"50px\");\n  const [width, setWidth] = createSignal(\"100px\");\n  const [bottom, setBottom] = createSignal(\"10px\");\n  const [padding, setPadding] = createSignal(\"0px\");\n\n  function check() {\n    const aspectRatio = window.innerWidth / window.innerHeight;\n\n    if (aspectRatio >= 1.84 && aspectRatio <= 1.87) {\n      setWidth(\"75px\");\n      setHeight(\"35px\");\n      setBottom(\"55px\");\n    } else if (window.innerWidth <= 450) {\n      setWidth(\"75px\");\n      setHeight(\"35px\");\n      setBottom(\"55px\");\n    } else if (window.innerWidth <= 1290) {\n      setWidth(\"75px\");\n      setHeight(\"35px\");\n      setBottom(\"60px\");\n    } else if (window.innerWidth <= 1400) {\n      setWidth(\"75px\");\n      setHeight(\"35px\");\n      setBottom(\"60px\");\n    } else {\n      setBottom(\"20px\");\n      setPadding(\"15px\");\n    }\n    if (window.innerWidth <= 1290) {\n      if (dir() === \"shrink\") {\n        setIsFixed(true);\n      }\n    } else {\n      setIsFixed(false);\n    }\n  }\n\n  onMount(() => {\n    window.onresize = () => {\n      if (window.innerWidth < prevSize()) {\n        setDir(\"shrink\");\n        setPrevSize(window.innerWidth);\n      } else {\n        setDir(\"grow\");\n        setPrevSize(window.innerWidth);\n      }\n      check();\n    };\n    check();\n  });\n\n  createEffect(() => {\n    check();\n  });\n\n  // return (\n  //   <div\n  //     id=\"NOCOPY\"\n  //     style={{\n  //       position: isFixed() ? \"fixed\" : \"relative\",\n  //       display: \"flex\",\n  //       \"flex-direction\": isFixed() ? \"column\" : \"row\",\n  //       \"font-size\": \"32px\",\n  //       bottom: \"30px\",\n  //       right: \"10px\",\n  //       // color: 'rgba(255, 255, 255, 0.6)',\n  //       color: \"rgba(251, 173, 255, 0.75)\",\n  //       \"pointer-events\": \"none\",\n  //       \"z-index\": 9999,\n  //       \"transform-origin\": \"bottom right\",\n  //       \"user-select\": \"none\",\n  //       \"-webkit-user-select\": \"none\",\n  //       \"-moz-user-select\": \"none\",\n  //       \"-ms-user-select\": \"none\",\n  //       \"align-items\": \"center\",\n  //       \"white-space\": \"nowrap\",\n  //       \"margin-top\": \"20px\",\n  //       \"margin-left\": \"20px\",\n  //     }}\n  //   >\n  //     <div class=\"flex flex-row justify-center align-middle items-center\">\n  //       <span>PokeBin</span>\n  //       <img\n  //         class=\"ml-1\"\n  //         src=\"/assets/favicon/android-chrome-192x192.png\"\n  //         style={{\n  //           height: \"32px\",\n  //           width: \"32px\",\n  //           \"margin-right\": \"4px\",\n  //           scale: 1.0,\n  //           opacity: 0.75,\n  //           top: \"-2px\",\n  //         }}\n  //         alt=\"It's Spheal!\"\n  //       />\n  //     </div>\n  //     <PatreonButton />\n  //   </div>\n  // );\n  return (\n    <div\n      id=\"NOCOPY\"\n      style={{\n        position: isFixed() ? \"fixed\" : \"relative\",\n        display: \"flex\",\n        bottom: bottom(),\n        \"padding-bottom\": padding(),\n        right: isFixed() ? \"30px\" : undefined, // Only set right when fixed\n        left: isFixed() ? undefined : \"30px\", // Only set left when not fixed\n        \"flex-direction\": isFixed() ? \"column\" : \"row\",\n        \"pointer-events\": \"none\",\n        \"z-index\": 9999,\n        \"transform-origin\": \"bottom right\",\n        \"user-select\": \"none\",\n        \"-webkit-user-select\": \"none\",\n        \"-moz-user-select\": \"none\",\n        \"-ms-user-select\": \"none\",\n        \"align-items\": \"center\",\n        \"white-space\": \"nowrap\",\n        width: \"100px\",\n        height: \"0px\",\n      }}\n    >\n      <img\n        src={logo}\n        style={{\n          height: height(),\n          width: width(),\n          transform: \"scale(1.5)\", // 1.5x bigger visually\n        }}\n        class=\"border-none outline-none shadow-none\"\n        alt=\"PokeBin Logo\"\n      />\n    </div>\n  );\n}\n\nexport default Watermark;\n","import type { JSX } from \"solid-js\";\nimport type { Settings } from \"./settings\";\n\ntype SettingsFormProps = {\n  settings: Settings;\n  onChange: (key: keyof Settings, value: boolean | number) => void;\n  children?: JSX.Element;\n};\n\nexport function SettingsForm(props: SettingsFormProps) {\n  return (\n    <div class=\"flex flex-col gap-2 w-80\">\n      <div class=\"flex flex-row items-center gap-4\">\n        <label for=\"newFormat\" class=\"font-medium cursor-pointer w-60\">\n          New paste format\n        </label>\n        <input\n          id=\"newFormat\"\n          name=\"newFormat\"\n          type=\"checkbox\"\n          class=\"align-middle\"\n          checked={!!props.settings.newFormat}\n          onChange={(e) => props.onChange(\"newFormat\", e.target.checked)}\n        />\n      </div>\n      <div class=\"flex flex-row items-center gap-4\">\n        <label for=\"colors\" class=\"font-medium cursor-pointer w-60\">\n          Move colors\n        </label>\n        <input\n          id=\"colors\"\n          name=\"colors\"\n          type=\"checkbox\"\n          class=\"align-middle\"\n          checked={props.settings.moveColors}\n          onChange={(e) => props.onChange(\"moveColors\", e.target.checked)}\n        />\n      </div>\n      <div class=\"flex flex-row items-center gap-4\">\n        <label for=\"twoDImages\" class=\"font-medium cursor-pointer w-60\">\n          2D images\n        </label>\n        <input\n          id=\"twoDImages\"\n          name=\"twoDImages\"\n          type=\"checkbox\"\n          class=\"align-middle\"\n          checked={props.settings.twoDImages}\n          onChange={(e) => props.onChange(\"twoDImages\", e.target.checked)}\n        />\n      </div>\n      <div class=\"flex flex-row items-center gap-4\">\n        <label for=\"darkMode\" class=\"font-medium cursor-pointer w-60\">\n          Dark Mode\n        </label>\n        <input\n          id=\"darkMode\"\n          name=\"darkMode\"\n          type=\"checkbox\"\n          class=\"align-middle\"\n          checked={props.settings.darkMode}\n          onChange={(e) => props.onChange(\"darkMode\", e.target.checked)}\n        />\n      </div>\n      <div class=\"flex flex-row items-center gap-4\">\n        <label for=\"lastViewed\" class=\"font-medium cursor-pointer w-60\">\n          Last viewed pastes count\n        </label>\n        <input\n          id=\"lastViewed\"\n          name=\"lastViewed\"\n          type=\"number\"\n          min={0}\n          max={25}\n          class=\"w-20 rounded border border-gray-300 px-2 py-1 focus:outline-none focus:ring-2 focus:ring-indigo-500 bg-white dark:bg-zinc-700 dark:text-white\"\n          value={props.settings.lastViewedCount}\n          onChange={(e) =>\n            props.onChange(\"lastViewedCount\", Number.parseInt(e.target.value))\n          }\n        />\n      </div>\n      {props.children}\n    </div>\n  );\n}\n","import type { Paste } from \"./web_wasm_helpers\";\nimport Watermark from \"./watermark\";\nimport { type Accessor, For, Show } from \"solid-js\";\nimport { type Settings, updateSetting } from \"./settings\";\nimport { SettingsForm } from \"./settingsForm\";\n\ntype Props = {\n  paste: Accessor<Paste | null>;\n  setSelectable: (value: boolean, id: string) => void;\n  setShowNotes: (value: boolean) => void;\n  showNotes: () => boolean;\n  makeOpaqueOnFocus: () => void;\n  makeTransparentOnMouseover: () => void;\n  notesWidth: () => string;\n  setNotesOpacity: (value: number) => void;\n  notesOpacity: () => number;\n  copyPaste: () => void;\n  setShowModal: (value: boolean) => void;\n  showModal: () => boolean;\n  sett: () => Settings;\n  setSett: (value: Settings) => void;\n  isEncrypted: () => boolean;\n  handleCreateOts: () => void;\n};\n\nexport default function PasteViewBase(props: Props) {\n  const paste = props.paste;\n  const setSelectable = props.setSelectable;\n  const setShowNotes = props.setShowNotes;\n  const showNotes = props.showNotes;\n  const setNotesOpacity = props.setNotesOpacity;\n  const makeOpaqueOnFocus = props.makeOpaqueOnFocus;\n  const makeTransparentOnMouseover = props.makeTransparentOnMouseover;\n  const notesWidth = props.notesWidth;\n  const notesOpacity = props.notesOpacity;\n  const copyPaste = props.copyPaste;\n  const setShowModal = props.setShowModal;\n  const showModal = props.showModal;\n  const sett = props.sett;\n  const setSett = props.setSett;\n  const isEncrypted = props.isEncrypted;\n  const handleCreateOts = props.handleCreateOts;\n\n  return (\n    <Show when={paste()}>\n      {(currentPaste) => (\n        <div class=\"content-wrapper\">\n          <div class=\"side-content\" id=\"sidebar\">\n            <div class=\"sidebar-inner md:ml-10 md:mr-2\">\n              <Show\n                when={\n                  currentPaste().title !== \"\" ||\n                  currentPaste().author !== \"\" ||\n                  currentPaste().format !== \"\" ||\n                  currentPaste().rental !== \"\"\n                }\n              >\n                <div\n                  role=\"note\"\n                  class=\"metadata\"\n                  id=\"metadata\"\n                  style={{\n                    \"user-select\": \"none\",\n                    \"min-width\": \"125px\",\n                  }}\n                  onMouseOver={() => setSelectable(true, \"metadata\")}\n                  onFocus={() => setSelectable(true, \"metadata\")}\n                  onMouseOut={() => setSelectable(false, \"metadata\")}\n                  onBlur={() => setSelectable(false, \"metadata\")}\n                >\n                  <Show when={currentPaste().title !== \"\"}>\n                    <h1\n                      class=\"text-[#c2a8d4] text-2xl font-semibold\"\n                      id=\"title\"\n                      style={{ \"user-select\": \"none\" }}\n                      aria-label={currentPaste().title}\n                      innerHTML={currentPaste().title}\n                    />\n                  </Show>\n                  <Show when={currentPaste().author !== \"\"}>\n                    <p\n                      class=\"text-base\"\n                      id=\"author\"\n                      style={{ \"user-select\": \"none\" }}\n                      innerHTML={`By: ${currentPaste().author}`}\n                    />\n                  </Show>\n                  <Show when={currentPaste().format !== \"\"}>\n                    <p\n                      class=\"text-base\"\n                      id=\"format\"\n                      style={{ \"user-select\": \"none\" }}\n                    >\n                      Format: {currentPaste().format}\n                    </p>\n                  </Show>\n                  <Show when={currentPaste().rental !== \"\"}>\n                    <p\n                      class=\"text-base\"\n                      id=\"rental\"\n                      style={{ \"user-select\": \"none\" }}\n                    >\n                      Rental: {currentPaste().rental}\n                    </p>\n                  </Show>\n                </div>\n              </Show>\n              <div class=\"notes-section my-1\">\n                <Show when={currentPaste().notes !== \"\"}>\n                  <button\n                    class=\"cursor-pointer h-[30px] font-bold bg-[#c2a8d4] hover:bg-[#9770b6] text-black w-[175px] mt-1 py-1 border-none rounded\"\n                    type=\"button\"\n                    onClick={() => {\n                      setShowNotes(!showNotes());\n                      const notes =\n                        document.getElementsByClassName(\"notes-content\");\n                      if (notes.length > 0) {\n                        const notes_obj = notes[0] as HTMLElement;\n                        if (notes_obj.getBoundingClientRect().top < 0) {\n                          notes_obj.style.top = \"0px\";\n                        }\n                      }\n\n                      if (showNotes()) {\n                        setNotesOpacity(1.0);\n                      }\n                    }}\n                  >\n                    {showNotes() ? \"Hide notes\" : \"Show notes\"}\n                  </button>\n                  <Show when={showNotes()}>\n                    <div\n                      role=\"note\"\n                      class=\"notes-content bg-zinc-600 border border-ccc p-5 rounded shadow-lg z-20\"\n                      onMouseOver={() => {\n                        makeOpaqueOnFocus();\n                        setSelectable(true, \"notes\");\n                      }}\n                      onFocus={() => {\n                        makeOpaqueOnFocus();\n                        setSelectable(true, \"notes\");\n                      }}\n                      onMouseOut={() => {\n                        makeTransparentOnMouseover();\n                        setSelectable(false, \"notes\");\n                      }}\n                      onBlur={() => {\n                        makeTransparentOnMouseover();\n                        setSelectable(false, \"notes\");\n                      }}\n                      style={{\n                        width: notesWidth(),\n                        opacity: notesOpacity(),\n                        \"user-select\": \"none\",\n                        \"z-index\": 2,\n                      }}\n                    >\n                      <p\n                        id=\"notes\"\n                        class=\"!text-white\"\n                        innerHTML={currentPaste().notes.replace(\n                          /\\n/g,\n                          \"<br />\",\n                        )}\n                      />\n                    </div>\n                  </Show>\n                </Show>\n              </div>\n            </div>\n            <div id=\"buttons\">\n              <button\n                style={{ \"user-select\": \"none\" }}\n                type=\"submit\"\n                onClick={copyPaste}\n                class=\"cursor-pointer w-[175px] h-[30px] copy-button font-bold bg-[#c2a8d4] hover:bg-[#9770b6] text-black py-1 rounded\"\n              >\n                Copy\n              </button>\n              <button\n                class=\"cursor-pointer h-[30px] font-bold bg-[#c2a8d4] hover:bg-[#9770b6] text-black w-[175px] py-1 rounded\"\n                style={{ \"user-select\": \"none\" }}\n                type=\"button\"\n                onClick={() => setShowModal(true)}\n              >\n                Settings\n              </button>\n            </div>\n          </div>\n          <div class=\"main\">\n            <For each={currentPaste().pokemon}>\n              {(pokemon) => {\n                return (\n                  <article>\n                    <div class=\"img mr-2\">\n                      <Show when={pokemon.item_image !== \"\"}>\n                        <span class=\"img-item\" style={pokemon.item_image} />\n                      </Show>\n                      <img\n                        class=\"img-pokemon\"\n                        src={pokemon.pokemon_image}\n                        alt={pokemon.name}\n                      />\n                    </div>\n\n                    <div class=\"paste\">\n                      <div id=\"mon_title\">\n                        <Show\n                          when={pokemon.nickname !== \"\"}\n                          fallback={\n                            <>\n                              <span\n                                class={`type-${pokemon.type1} inline-element`}\n                              >\n                                {pokemon.name}\n                              </span>\n                              <Show when={pokemon.gender !== \"\"}>\n                                <span\n                                  innerHTML={` (<span class=\"inline-element gender-${pokemon.gender}\">${pokemon.gender}</span>)`}\n                                />\n                              </Show>\n                            </>\n                          }\n                        >\n                          {pokemon.nickname} (\n                          <span class={`type-${pokemon.type1} inline-element`}>\n                            {pokemon.name}\n                          </span>\n                          )\n                          <Show when={pokemon.gender !== \"\"}>\n                            <span\n                              innerHTML={` (<span class=\"inline-element gender-${pokemon.gender}\">${pokemon.gender}</span>)`}\n                            />\n                          </Show>\n                        </Show>\n                        <Show when={pokemon.item !== \"\"}>\n                          <span> @ </span>\n                          <span\n                            class=\"inline-element\"\n                            innerHTML={`${pokemon.item.trim()}`}\n                          />\n                        </Show>\n                      </div>\n\n                      <Show when={pokemon.ability !== \"\"}>\n                        <div class=\"attribute-line\">\n                          <span class=\"attr\">Ability:</span> {pokemon.ability}\n                        </div>\n                      </Show>\n                      <Show when={pokemon.level !== 100}>\n                        <div class=\"attribute-line\">\n                          <span class=\"attr\">Level:</span> {pokemon.level}\n                        </div>\n                      </Show>\n                      <Show when={pokemon.shiny !== \"\"}>\n                        <div class=\"attribute-line\">\n                          <span class=\"attr\">Shiny:</span> {pokemon.shiny}\n                        </div>\n                      </Show>\n                      <Show when={pokemon.hidden_power !== \"\"}>\n                        <div class=\"attribute-line\">\n                          <span class=\"attr\">Hidden Power:</span>{\" \"}\n                          <span class={`type-${pokemon.hidden_power}`}>\n                            {pokemon.hidden_power}\n                          </span>\n                        </div>\n                      </Show>\n                      <Show when={pokemon.tera_type !== \"\"}>\n                        <div class=\"attribute-line\">\n                          <span class=\"attr\">Tera Type:</span>{\" \"}\n                          <span class={`type-${pokemon.tera_type}`}>\n                            {pokemon.tera_type}\n                          </span>\n                        </div>\n                      </Show>\n                      <Show when={pokemon.last_stat_ev !== \"\"}>\n                        <div class=\"attribute-line\">\n                          <span class=\"attr\">EVs: </span>\n                          <Show when={pokemon.evs[0] !== 0}>\n                            <span class=\"stat-hp\">{pokemon.evs[0]} HP</span>\n                            <Show when={pokemon.last_stat_ev !== \"hp\"}>/</Show>\n                          </Show>\n                          <Show when={pokemon.evs[1] !== 0}>\n                            <span class=\"stat-atk\">{pokemon.evs[1]} Atk</span>\n                            <Show when={pokemon.last_stat_ev !== \"atk\"}>/</Show>\n                          </Show>\n                          <Show when={pokemon.evs[2] !== 0}>\n                            <span class=\"stat-def\">{pokemon.evs[2]} Def</span>\n                            <Show when={pokemon.last_stat_ev !== \"def\"}>/</Show>\n                          </Show>\n                          <Show when={pokemon.evs[3] !== 0}>\n                            <span class=\"stat-spa\">{pokemon.evs[3]} SpA</span>\n                            <Show when={pokemon.last_stat_ev !== \"spa\"}>/</Show>\n                          </Show>\n                          <Show when={pokemon.evs[4] !== 0}>\n                            <span class=\"stat-spd\">{pokemon.evs[4]} SpD</span>\n                            <Show when={pokemon.last_stat_ev !== \"spd\"}>/</Show>\n                          </Show>\n                          <Show when={pokemon.evs[5] !== 0}>\n                            <span class=\"stat-spe\">{pokemon.evs[5]} Spe</span>\n                          </Show>\n                        </div>\n                      </Show>\n\n                      <Show when={pokemon.nature !== \"\"}>\n                        <div class=\"attribute-line\">\n                          <span class=\"attr\">{pokemon.nature}</span>\n                          <Show when={!pokemon.nature.endsWith(\" Nature\")}>\n                            <span class=\"attr\"> Nature</span>\n                          </Show>\n                        </div>\n                      </Show>\n                      <Show when={pokemon.last_stat_iv !== \"\"}>\n                        <div class=\"attribute-line\">\n                          <span class=\"attr\">IVs: </span>\n                          <Show when={pokemon.ivs[0] !== 31}>\n                            {pokemon.ivs[0]} HP\n                            <Show when={pokemon.last_stat_iv !== \"hp\"}>\n                              &nbsp;/&nbsp;\n                            </Show>\n                          </Show>\n                          <Show when={pokemon.ivs[1] !== 31}>\n                            {pokemon.ivs[1]} Atk\n                            <Show when={pokemon.last_stat_iv !== \"atk\"}>\n                              &nbsp;/&nbsp;\n                            </Show>\n                          </Show>\n                          <Show when={pokemon.ivs[2] !== 31}>\n                            {pokemon.ivs[2]} Def\n                            <Show when={pokemon.last_stat_iv !== \"def\"}>\n                              &nbsp;/&nbsp;\n                            </Show>\n                          </Show>\n                          <Show when={pokemon.ivs[3] !== 31}>\n                            {pokemon.ivs[3]} SpA\n                            <Show when={pokemon.last_stat_iv !== \"spa\"}>\n                              &nbsp;/&nbsp;\n                            </Show>\n                          </Show>\n                          <Show when={pokemon.ivs[4] !== 31}>\n                            {pokemon.ivs[4]} SpD\n                            <Show when={pokemon.last_stat_iv !== \"spd\"}>\n                              &nbsp;/&nbsp;\n                            </Show>\n                          </Show>\n                          <Show when={pokemon.ivs[5] !== 31}>\n                            {pokemon.ivs[5]} Spe\n                          </Show>\n                        </div>\n                      </Show>\n\n                      <For each={pokemon.moves}>\n                        {(move) => (\n                          <div class=\"move-line\">\n                            <Show\n                              when={sett().moveColors}\n                              fallback={\n                                <>\n                                  <span class={`type-${move.type1}`}>-</span>\n                                  <span style={{ color: \"white\" }}>\n                                    {\" \"}\n                                    {move.name}\n                                  </span>\n                                </>\n                              }\n                            >\n                              <span class={`type-${move.type1}`}>\n                                - {move.name}\n                              </span>\n                            </Show>\n                          </div>\n                        )}\n                      </For>\n                      <br\n                        class=\"display-none\"\n                        style={{ \"line-height\": \"0px\" }}\n                      />\n                    </div>\n                  </article>\n                );\n              }}\n            </For>\n          </div>\n          <br />\n          <Watermark />\n          <Show when={showModal()}>\n            <div\n              class=\"fixed inset-0 bg-black/20 backdrop-blur-sm flex items-center justify-center z-100 !text-white\"\n              onClick={() => setShowModal(false)}\n              onKeyDown={(e) => e.stopPropagation()}\n              tabindex=\"-1\"\n            >\n              <div\n                class=\"relative bg-zinc-800 rounded-lg p-6 max-w-lg w-full max-h-[90vh] overflow-y-auto shadow-lg\"\n                onClick={(e) => e.stopPropagation()}\n                onKeyDown={(e) => e.stopPropagation()}\n                tabindex=\"0\"\n              >\n                <button\n                  type=\"button\"\n                  class=\"absolute top-2 right-2 text-gray-500 hover:text-gray-700 dark:hover:text-gray-300\"\n                  onClick={() => setShowModal(false)}\n                  aria-label=\"Close modal\"\n                >\n                  ✕\n                </button>\n                <h2 class=\"text-xl font-semibold mb-4\">Settings</h2>\n                <SettingsForm\n                  settings={sett()}\n                  onChange={(key, value) => {\n                    updateSetting(key, value, sett, setSett);\n                  }}\n                >\n                  <Show when={!currentPaste().isOts && !isEncrypted()}>\n                    <div class=\"flex flex-row gap-4 align-middle mt-2\">\n                      <button\n                        type=\"button\"\n                        onClick={handleCreateOts}\n                        class=\"bg-[#c2a8d4] hover:bg-[#9770b6] text-black px-4 py-0 rounded text-base font-bold\"\n                      >\n                        Create OTS\n                      </button>\n                    </div>\n                  </Show>\n                </SettingsForm>\n              </div>\n            </div>\n          </Show>\n        </div>\n      )}\n    </Show>\n  );\n}\n","import type { Paste } from \"./web_wasm_helpers\";\nimport Watermark from \"./watermark\";\nimport { type Accessor, For, Show } from \"solid-js\";\nimport { updateSetting, type Settings } from \"./settings\";\nimport { SettingsForm } from \"./settingsForm\";\n\ntype Props = {\n  paste: Accessor<Paste | null>;\n  setSelectable: (value: boolean, id: string) => void;\n  setShowNotes: (value: boolean) => void;\n  showNotes: () => boolean;\n  makeOpaqueOnFocus: () => void;\n  makeTransparentOnMouseover: () => void;\n  notesWidth: () => string;\n  setNotesOpacity: (value: number) => void;\n  notesOpacity: () => number;\n  copyPaste: () => void;\n  setShowModal: (value: boolean) => void;\n  showModal: () => boolean;\n  sett: () => Settings;\n  setSett: (value: Settings) => void;\n  isEncrypted: () => boolean;\n  handleCreateOts: () => void;\n};\n\n// 0 = hp, 1 = atk, 2 = def, 3 = spa, 4 = spd, 5 = spe\n// const natureMap: { [key: string]: number[] | null } = {\n//   // Neutral\n//   Hardy: null,\n//   Docile: null,\n//   Bashful: null,\n//   Quirky: null,\n//   Serious: null,\n//   // Attack decreasing\n//   Bold: [2, 1],\n//   Modest: [3, 1],\n//   Calm: [4, 1],\n//   Timid: [5, 1],\n//   // Defense decreasing\n//   Lonely: [1, 2],\n//   Mild: [3, 2],\n//   Gentle: [4, 2],\n//   Hasty: [5, 2],\n//   // SpA decreasing\n//   Adamant: [1, 3],\n//   Impish: [2, 3],\n//   Careful: [4, 3],\n//   Jolly: [5, 3],\n//   // SpD decreasing\n//   Naughty: [1, 4],\n//   Lax: [2, 4],\n//   Rash: [3, 4],\n//   Naive: [5, 4],\n//   // Spe decreasing\n//   Brave: [1, 5],\n//   Relaxed: [2, 5],\n//   Quiet: [3, 5],\n//   Sassy: [4, 5],\n// };\n\nexport default function PasteViewNew(props: Props) {\n  const paste = props.paste;\n  const setSelectable = props.setSelectable;\n  const setShowNotes = props.setShowNotes;\n  const showNotes = props.showNotes;\n  const setNotesOpacity = props.setNotesOpacity;\n  const makeOpaqueOnFocus = props.makeOpaqueOnFocus;\n  const makeTransparentOnMouseover = props.makeTransparentOnMouseover;\n  const notesWidth = props.notesWidth;\n  const notesOpacity = props.notesOpacity;\n  const copyPaste = props.copyPaste;\n  const setShowModal = props.setShowModal;\n  const showModal = props.showModal;\n  const sett = props.sett;\n  const setSett = props.setSett;\n  const isEncrypted = props.isEncrypted;\n  const handleCreateOts = props.handleCreateOts;\n\n  return (\n    <Show when={paste()}>\n      {(currentPaste) => (\n        <div class=\"content-wrapper\">\n          <div class=\"side-content\" id=\"sidebar\">\n            <div class=\"sidebar-inner md:ml-10 md:mr-2\">\n              <Show\n                when={\n                  currentPaste().title !== \"\" ||\n                  currentPaste().author !== \"\" ||\n                  currentPaste().format !== \"\" ||\n                  currentPaste().rental !== \"\"\n                }\n              >\n                <div\n                  role=\"note\"\n                  class=\"metadata\"\n                  id=\"metadata\"\n                  style={{\n                    \"user-select\": \"none\",\n                    \"min-width\": \"125px\",\n                  }}\n                  onMouseOver={() => setSelectable(true, \"metadata\")}\n                  onFocus={() => setSelectable(true, \"metadata\")}\n                  onMouseOut={() => setSelectable(false, \"metadata\")}\n                  onBlur={() => setSelectable(false, \"metadata\")}\n                >\n                  <Show when={currentPaste().title !== \"\"}>\n                    <h1\n                      class=\"text-[#c2a8d4] text-2xl font-semibold\"\n                      id=\"title\"\n                      style={{ \"user-select\": \"none\" }}\n                      aria-label={currentPaste().title}\n                      innerHTML={currentPaste().title}\n                    />\n                  </Show>\n                  <Show when={currentPaste().author !== \"\"}>\n                    <p\n                      class=\"text-base\"\n                      id=\"author\"\n                      style={{ \"user-select\": \"none\" }}\n                      innerHTML={`By: ${currentPaste().author}`}\n                    />\n                  </Show>\n                  <Show when={currentPaste().format !== \"\"}>\n                    <p\n                      class=\"text-base\"\n                      id=\"format\"\n                      style={{ \"user-select\": \"none\" }}\n                    >\n                      Format: {currentPaste().format}\n                    </p>\n                  </Show>\n                  <Show when={currentPaste().rental !== \"\"}>\n                    <p\n                      class=\"text-base\"\n                      id=\"rental\"\n                      style={{ \"user-select\": \"none\" }}\n                    >\n                      Rental: {currentPaste().rental}\n                    </p>\n                  </Show>\n                </div>\n              </Show>\n              <div class=\"notes-section my-1\">\n                <Show when={currentPaste().notes !== \"\"}>\n                  <button\n                    class=\"cursor-pointer h-[30px] font-bold bg-[#c2a8d4] hover:bg-[#9770b6] text-black w-[175px] mt-1 py-1 border-none rounded\"\n                    type=\"button\"\n                    onClick={() => {\n                      setShowNotes(!showNotes());\n                      const notes =\n                        document.getElementsByClassName(\"notes-content\");\n                      if (notes.length > 0) {\n                        const notes_obj = notes[0] as HTMLElement;\n                        if (notes_obj.getBoundingClientRect().top < 0) {\n                          notes_obj.style.top = \"0px\";\n                        }\n                      }\n\n                      if (showNotes()) {\n                        setNotesOpacity(1.0);\n                      }\n                    }}\n                  >\n                    {showNotes() ? \"Hide notes\" : \"Show notes\"}\n                  </button>\n                  <Show when={showNotes()}>\n                    <div\n                      role=\"note\"\n                      class=\"notes-content bg-zinc-600 border border-ccc p-5 rounded shadow-lg z-20\"\n                      onMouseOver={() => {\n                        makeOpaqueOnFocus();\n                        setSelectable(true, \"notes\");\n                      }}\n                      onFocus={() => {\n                        makeOpaqueOnFocus();\n                        setSelectable(true, \"notes\");\n                      }}\n                      onMouseOut={() => {\n                        makeTransparentOnMouseover();\n                        setSelectable(false, \"notes\");\n                      }}\n                      onBlur={() => {\n                        makeTransparentOnMouseover();\n                        setSelectable(false, \"notes\");\n                      }}\n                      style={{\n                        width: notesWidth(),\n                        opacity: notesOpacity(),\n                        \"user-select\": \"none\",\n                        \"z-index\": 2,\n                      }}\n                    >\n                      <p\n                        id=\"notes\"\n                        class=\"!text-white\"\n                        innerHTML={currentPaste().notes.replace(\n                          /\\n/g,\n                          \"<br />\",\n                        )}\n                      />\n                    </div>\n                  </Show>\n                </Show>\n              </div>\n            </div>\n            <div id=\"buttons\">\n              <button\n                style={{ \"user-select\": \"none\" }}\n                type=\"submit\"\n                onClick={copyPaste}\n                class=\"cursor-pointer w-[175px] h-[30px] copy-button font-bold bg-[#c2a8d4] hover:bg-[#9770b6] text-black py-1 rounded\"\n              >\n                Copy\n              </button>\n              <button\n                class=\"cursor-pointer h-[30px] font-bold bg-[#c2a8d4] hover:bg-[#9770b6] text-black w-[175px] py-1 rounded\"\n                style={{ \"user-select\": \"none\" }}\n                type=\"button\"\n                onClick={() => setShowModal(true)}\n              >\n                Settings\n              </button>\n            </div>\n          </div>\n          <div class=\"main\">\n            <For each={currentPaste().pokemon}>\n              {(pokemon) => {\n                const stats: string[] = pokemon.evs.map((x) =>\n                  x !== 0 ? x.toString() : \"\",\n                );\n                // const nature = pokemon.nature;\n                // if (natureMap[nature] !== null) {\n                //   const indicies = natureMap[nature];\n                //   const increasingIdx = indicies[0];\n                //   const decreasingIdx = indicies[1];\n                //   stats[increasingIdx] = `${stats[increasingIdx]}+`;\n                //   stats[decreasingIdx] = `${stats[decreasingIdx]}-`;\n                //   let last_stat_idx = 0;\n                //   for (let i = 0; i < stats.length; i++) {\n                //     const stat = stats[i];\n                //     if (stat !== \"\") {\n                //       last_stat_idx = i;\n                //     }\n                //   }\n                //   switch (last_stat_idx) {\n                //     case 0:\n                //       pokemon.last_stat_ev = \"hp\";\n                //       break;\n                //     case 1:\n                //       pokemon.last_stat_ev = \"atk\";\n                //       break;\n                //     case 2:\n                //       pokemon.last_stat_ev = \"def\";\n                //       break;\n                //     case 3:\n                //       pokemon.last_stat_ev = \"spa\";\n                //       break;\n                //     case 4:\n                //       pokemon.last_stat_ev = \"spd\";\n                //       break;\n                //     case 5:\n                //       pokemon.last_stat_ev = \"spe\";\n                //       break;\n                //     default:\n                //       pokemon.last_stat_ev = \"\";\n                //       break;\n                //   }\n                // }\n                return (\n                  <article>\n                    <div class=\"img mr-2\">\n                      <Show when={pokemon.item_image !== \"\"}>\n                        <span class=\"img-item\" style={pokemon.item_image} />\n                      </Show>\n                      <img\n                        class=\"img-pokemon\"\n                        src={pokemon.pokemon_image}\n                        alt={pokemon.name}\n                      />\n                    </div>\n\n                    <div class=\"paste\">\n                      <div id=\"mon_title\">\n                        <Show\n                          when={pokemon.nickname !== \"\"}\n                          fallback={\n                            <>\n                              <span\n                                class={`type-${pokemon.type1} inline-element`}\n                              >\n                                {pokemon.name}\n                              </span>\n                              <Show when={pokemon.gender !== \"\"}>\n                                <span\n                                  innerHTML={` (<span class=\"inline-element gender-${pokemon.gender}\">${pokemon.gender}</span>)`}\n                                />\n                              </Show>\n                            </>\n                          }\n                        >\n                          {pokemon.nickname} (\n                          <span class={`type-${pokemon.type1} inline-element`}>\n                            {pokemon.name}\n                          </span>\n                          )\n                          <Show when={pokemon.gender !== \"\"}>\n                            <span\n                              innerHTML={` (<span class=\"inline-element gender-${pokemon.gender}\">${pokemon.gender}</span>)`}\n                            />\n                          </Show>\n                        </Show>\n                      </div>\n                      <Show\n                        when={pokemon.ability !== \"\" || pokemon.item !== \"\"}\n                      >\n                        <div class=\"attribute-line\">\n                          <Show when={pokemon.ability !== \"\"}>\n                            <span>[{pokemon.ability}]</span>\n                          </Show>\n                          <Show when={pokemon.item !== \"\"}>\n                            <span> @ </span>\n                            <span\n                              class=\"inline-element\"\n                              innerHTML={`${pokemon.item.trim()}`}\n                            />\n                          </Show>\n                        </div>\n                      </Show>\n                      <For each={pokemon.moves}>\n                        {(move) => (\n                          <div class=\"move-line\">\n                            <Show\n                              when={sett().moveColors}\n                              fallback={\n                                <>\n                                  <span class={`type-${move.type1}`}>-</span>\n                                  <span style={{ color: \"white\" }}>\n                                    {\" \"}\n                                    {move.name}\n                                  </span>\n                                </>\n                              }\n                            >\n                              <span class={`type-${move.type1}`}>\n                                - {move.name}\n                              </span>\n                            </Show>\n                          </div>\n                        )}\n                      </For>\n                      <Show when={!currentPaste().isOts}>\n                        <div class=\"attribute-line\">\n                          EVs:{\" \"}\n                          <Show when={stats[0] !== \"\"}>\n                            <span class=\"stat-hp\">{stats[0]} HP</span>\n                            <Show when={pokemon.last_stat_ev !== \"hp\"}>/</Show>\n                          </Show>\n                          <Show when={stats[1] !== \"\"}>\n                            <span class=\"stat-atk\">{stats[1]} Atk</span>\n                            <Show when={pokemon.last_stat_ev !== \"atk\"}>/</Show>\n                          </Show>\n                          <Show when={stats[2] !== \"\"}>\n                            <span class=\"stat-def\">{stats[2]} Def</span>\n                            <Show when={pokemon.last_stat_ev !== \"def\"}>/</Show>\n                          </Show>\n                          <Show when={stats[3] !== \"\"}>\n                            <span class=\"stat-spa\">{stats[3]} SpA</span>\n                            <Show when={pokemon.last_stat_ev !== \"spa\"}>/</Show>\n                          </Show>\n                          <Show when={stats[4] !== \"\"}>\n                            <span class=\"stat-spd\">{stats[4]} SpD</span>\n                            <Show when={pokemon.last_stat_ev !== \"spd\"}>/</Show>\n                          </Show>\n                          <Show when={stats[5] !== \"\"}>\n                            <span class=\"stat-spe\">{stats[5]} Spe</span>\n                          </Show>\n                        </div>\n                        <Show when={pokemon.nature !== \"\"}>\n                          <Show when={pokemon.nature.endsWith(\"Nature\")}>\n                            <div class=\"attribute-line\">{pokemon.nature}</div>\n                          </Show>\n                          <Show when={!pokemon.nature.endsWith(\"Nature\")}>\n                            <div class=\"attribute-line\">\n                              {pokemon.nature} Nature\n                            </div>\n                          </Show>\n                        </Show>\n                        <Show when={pokemon.last_stat_iv !== \"\"}>\n                          <div class=\"attribute-line\">\n                            IVs:{\" \"}\n                            <Show when={pokemon.ivs[0] !== 31}>\n                              {pokemon.ivs[0]} HP\n                              <Show when={pokemon.last_stat_iv !== \"hp\"}>\n                                &nbsp;/&nbsp;\n                              </Show>\n                            </Show>\n                            <Show when={pokemon.ivs[1] !== 31}>\n                              {pokemon.ivs[1]} Atk\n                              <Show when={pokemon.last_stat_iv !== \"atk\"}>\n                                &nbsp;/&nbsp;\n                              </Show>\n                            </Show>\n                            <Show when={pokemon.ivs[2] !== 31}>\n                              {pokemon.ivs[2]} Def\n                              <Show when={pokemon.last_stat_iv !== \"def\"}>\n                                &nbsp;/&nbsp;\n                              </Show>\n                            </Show>\n                            <Show when={pokemon.ivs[3] !== 31}>\n                              {pokemon.ivs[3]} SpA\n                              <Show when={pokemon.last_stat_iv !== \"spa\"}>\n                                &nbsp;/&nbsp;\n                              </Show>\n                            </Show>\n                            <Show when={pokemon.ivs[4] !== 31}>\n                              {pokemon.ivs[4]} SpD\n                              <Show when={pokemon.last_stat_iv !== \"spd\"}>\n                                &nbsp;/&nbsp;\n                              </Show>\n                            </Show>\n                            <Show when={pokemon.ivs[5] !== 31}>\n                              {pokemon.ivs[5]} Spe\n                            </Show>\n                          </div>\n                        </Show>\n                      </Show>\n\n                      <Show when={pokemon.level !== 100}>\n                        <div class=\"attribute-line\">\n                          <span class=\"attr\">Level:</span> {pokemon.level}\n                        </div>\n                      </Show>\n                      <Show when={pokemon.shiny !== \"\"}>\n                        <div class=\"attribute-line\">\n                          <span class=\"attr\">Shiny:</span> {pokemon.shiny}\n                        </div>\n                      </Show>\n                      <Show when={pokemon.hidden_power !== \"\"}>\n                        <div class=\"attribute-line\">\n                          <span class=\"attr\">Hidden Power:</span>{\" \"}\n                          <span class={`type-${pokemon.hidden_power}`}>\n                            {pokemon.hidden_power}\n                          </span>\n                        </div>\n                      </Show>\n                      <Show when={pokemon.tera_type !== \"\"}>\n                        <div class=\"attribute-line\">\n                          <span class=\"attr\">Tera Type:</span>{\" \"}\n                          <span class={`type-${pokemon.tera_type}`}>\n                            {pokemon.tera_type}\n                          </span>\n                        </div>\n                      </Show>\n                      <br\n                        class=\"display-none\"\n                        style={{ \"line-height\": \"-10px\" }}\n                      />\n                    </div>\n                  </article>\n                );\n              }}\n            </For>\n          </div>\n          <br />\n          <Watermark />\n          <Show when={showModal()}>\n            <div\n              class=\"fixed inset-0 bg-black/20 backdrop-blur-sm flex items-center justify-center z-100 !text-white\"\n              onClick={() => setShowModal(false)}\n              onKeyDown={(e) => e.stopPropagation()}\n              tabindex=\"-1\"\n            >\n              <div\n                class=\"relative bg-zinc-800 rounded-lg p-6 max-w-lg w-full max-h-[90vh] overflow-y-auto shadow-lg\"\n                onClick={(e) => e.stopPropagation()}\n                onKeyDown={(e) => e.stopPropagation()}\n                tabindex=\"0\"\n              >\n                <button\n                  type=\"button\"\n                  class=\"absolute top-2 right-2 text-gray-500 hover:text-gray-700 dark:hover:text-gray-300\"\n                  onClick={() => setShowModal(false)}\n                  aria-label=\"Close modal\"\n                >\n                  ✕\n                </button>\n                <h2 class=\"text-xl font-semibold mb-4\">Settings</h2>\n                <SettingsForm\n                  settings={sett()}\n                  onChange={(key, value) => {\n                    updateSetting(key, value, sett, setSett);\n                  }}\n                >\n                  <Show when={!currentPaste().isOts && !isEncrypted()}>\n                    <div class=\"flex flex-row gap-4 align-middle mt-2\">\n                      <button\n                        type=\"button\"\n                        onClick={handleCreateOts}\n                        class=\"bg-[#c2a8d4] hover:bg-[#9770b6] text-black px-4 py-0 rounded text-base font-bold\"\n                      >\n                        Create OTS\n                      </button>\n                    </div>\n                  </Show>\n                </SettingsForm>\n              </div>\n            </div>\n          </Show>\n        </div>\n      )}\n    </Show>\n  );\n}\n","import {\n  createSignal,\n  createEffect,\n  onCleanup,\n  onMount,\n  Switch,\n  Match,\n} from \"solid-js\";\nimport \"./app.css\";\nimport \"./paste.css\";\nimport { decrypt, initWasm } from \"./wasm_helpers\";\n\nimport {\n  initWasm as initWebWasm,\n  parsePaste,\n  type Paste,\n  utf8ToBase64,\n  SavePasteToLastVisited,\n} from \"./web_wasm_helpers\";\n\nimport { initSettings } from \"./settings\";\nimport PasteViewBase from \"./PasteViewBase\";\nimport PasteViewNew from \"./PasteViewNew\";\nimport { getId } from \"./utils\";\n\nfunction stripIvsEvs(pasteText: string): string {\n  // Remove lines that start with \"IVs:\" or \"EVs:\" (case-insensitive, optional whitespace)\n  return pasteText\n    .split(\"\\n\")\n    .filter((line) => !/^\\s*(IVs:|EVs:)/i.test(line))\n    .join(\"\\n\");\n}\n\nconst PasteView = () => {\n  const [paste, setPaste] = createSignal<Paste | null>(null);\n  const [isEncrypted, setIsEncrypted] = createSignal(false);\n  const [data, setData] = createSignal(\"\");\n  const [title, setTitle] = createSignal<string | null>(null);\n  const [showNotes, setShowNotes] = createSignal(false);\n  const [notesOpacity, setNotesOpacity] = createSignal(1.0);\n  const [notesWidth, setNotesWidth] = createSignal(\"300px\");\n  const [showModal, setShowModal] = createSignal(false);\n\n  function updateThemeColor(darkMode: boolean) {\n    const meta = document.getElementById(\"theme-color-meta\");\n    if (meta) {\n      meta.setAttribute(\"content\", darkMode ? \"#000000\" : \"#f9f9f9\");\n    }\n  }\n\n  type PasteUpload = {\n    title: string;\n    author: string;\n    notes: string;\n    format: string;\n    rental: string;\n    content: string;\n  };\n  type FormUpload = {\n    data: PasteUpload;\n    encrypted: boolean;\n  };\n\n  async function handleCreateOts() {\n    if (isEncrypted()) return;\n    // Get the original paste text (from your `data` signal)\n    const originalPaste = data();\n    if (!originalPaste) return;\n\n    // If the paste is encrypted, you may need to handle that separately.\n    // For now, assume it's plain text or JSON string.\n    let pasteObj: FormUpload;\n    try {\n      pasteObj = { encrypted: false, data: JSON.parse(originalPaste) };\n    } catch {\n      return;\n    }\n\n    // Remove IVs/EVs from the content\n    pasteObj.data.content = stripIvsEvs(pasteObj.data.content);\n\n    // Prepare form data\n    const form = document.createElement(\"form\");\n    form.method = \"POST\";\n    form.action = \"/create\";\n    form.style.display = \"none\";\n\n    // Helper to add a field\n    function addField(name: string, value: string) {\n      const input = document.createElement(\"input\");\n      input.type = \"hidden\";\n      input.name = name;\n      input.value = value;\n      form.appendChild(input);\n    }\n\n    // Add all relevant fields\n    const encoded = utf8ToBase64(JSON.stringify(pasteObj));\n    addField(\"data\", encoded);\n\n    document.body.appendChild(form);\n    form.submit();\n  }\n\n  const { sett, setSett } = initSettings();\n\n  function makeTransparentOnMouseover() {\n    setNotesOpacity(0.2);\n  }\n\n  function makeOpaqueOnFocus() {\n    setNotesOpacity(1.0);\n  }\n\n  function decodeHtmlEntities(str: string): string {\n    const txt = document.createElement(\"textarea\");\n    txt.innerHTML = str;\n    const decoded = txt.value;\n    txt.remove(); // remove from DOM (if it was ever attached)\n    return decoded;\n  }\n\n  function updateWidths() {\n    const main = document.getElementsByTagName(\"main\")[0];\n    const sidebar = document.getElementById(\"sidebar\");\n    const notes = document.getElementById(\"notes\");\n\n    if (!main && !sidebar && !notes) return;\n\n    const articles = document.getElementsByTagName(\"article\");\n    let end = articles.length;\n    if (articles.length > 4) {\n      end = 4;\n    }\n\n    const windowWidth = window.innerWidth;\n    for (let i = 0; i < end; i++) {\n      if (windowWidth > 1024) {\n        const margin_bottom = Math.floor(window.innerHeight * 0.02);\n        articles[i].style.marginBottom = `${margin_bottom}px`;\n      }\n    }\n\n    if (windowWidth <= 1024) {\n      // Mobile layout\n      setNotesWidth(\"300px\");\n    } else {\n      // Desktop layout\n      const calculatedWidth = windowWidth - 420;\n      const width = Math.min(Math.max(calculatedWidth, 300), 600);\n      setNotesWidth(`${width}px`);\n    }\n  }\n\n  function setSelectable(value: boolean, id: string) {\n    const element = document.getElementById(id);\n    if (element === null) {\n      return;\n    }\n\n    // First update the style\n    if (value) {\n      element.style.userSelect = \"text\";\n    } else {\n      element.style.userSelect = \"auto\";\n    }\n\n    // Set the style to be selectable for ALL children recursively\n    const children = element.children;\n\n    const children_list = [];\n\n    for (let i = 0; i < children.length; i++) {\n      children_list.push(children[i]);\n    }\n    while (children_list.length > 0) {\n      const child = children_list.pop() as HTMLElement;\n      if (child === null || child === undefined) {\n        break;\n      }\n\n      // Add all children to the list\n      for (let i = 0; i < child.children.length; i++) {\n        children_list.push(child.children[i]);\n      }\n      if (value) {\n        // Set the style to be unselectable\n        for (let i = 0; i < children.length; i++) {\n          child.style.userSelect = \"auto\";\n        }\n      } else {\n        for (let i = 0; i < children.length; i++) {\n          child.style.userSelect = \"none\";\n        }\n      }\n    }\n  }\n\n  async function copyPasteBase() {\n    console.log(\"Copying paste to clipboard...\");\n    const main = document.getElementsByClassName(\"main\")[0];\n\n    if (!main) {\n      return;\n    }\n\n    let text = \"\";\n    const articles = main.querySelectorAll(\"article\");\n\n    articles.forEach((article, _) => {\n      const monTitle = article.querySelector(\"#mon_title\");\n      if (monTitle) {\n        text += `${monTitle.textContent?.trim()}\\n`;\n      }\n\n      // Extract ability, level, shiny, tera type, etc.\n      const attributeDivs = article.querySelectorAll(\".attribute-line\");\n      attributeDivs.forEach((div, _) => {\n        text += `${div.textContent?.trim()}\\n`;\n      });\n\n      const moves = article.querySelectorAll(\".move-line\");\n      moves.forEach((move, _) => {\n        text += `${move.textContent?.trim()}\\n`;\n      });\n\n      text += \"\\n\"; // Add a newline between Pokemon entries\n    });\n\n    // Copy the data to the clipboard.\n    console.log(text.trim());\n    await navigator.clipboard.writeText(text.trim());\n    console.log(\"Paste copied to clipboard.\");\n  }\n\n  async function copyPasteNew() {\n    console.log(\"Copying paste to clipboard...\");\n    const main = document.getElementsByClassName(\"main\")[0];\n\n    if (!main) {\n      return;\n    }\n\n    let text = \"\";\n    const articles = main.querySelectorAll(\"article\");\n\n    articles.forEach((article, _) => {\n      const monTitle = article.querySelector(\"#mon_title\");\n      if (monTitle) {\n        text += `${monTitle.textContent?.trim()}\\n`;\n      }\n\n      const abilityItem = article.querySelector(\"#ability-item\");\n      if (abilityItem) {\n        text += `${abilityItem.textContent?.trim()}\\n`;\n      }\n\n      const moves = article.querySelectorAll(\".move-line\");\n      moves.forEach((move, _) => {\n        text += `${move.textContent?.trim()}\\n`;\n      });\n\n      // Extract ability, level, shiny, tera type, etc.\n      const attributeDivs = article.querySelectorAll(\".attribute-line\");\n      attributeDivs.forEach((div, _) => {\n        text += `${div.textContent?.trim()}\\n`;\n      });\n\n      text += \"\\n\"; // Add a newline between Pokemon entries\n    });\n\n    // Copy the data to the clipboard.\n    console.log(text.trim());\n    await navigator.clipboard.writeText(text.trim());\n    console.log(\"Paste copied to clipboard.\");\n  }\n\n  // Update document title when title changes\n  createEffect(() => {\n    const currentTitle = title();\n    if (currentTitle) {\n      document.title = decodeHtmlEntities(currentTitle);\n    }\n\n    window.addEventListener(\"resize\", updateWidths);\n  });\n\n  createEffect(() => {\n    // Only run if data is loaded\n    if (!data()) return;\n    // Re-parse with the current twoDImages setting\n    const parsedPaste = parsePaste(data(), sett().twoDImages);\n    setPaste(parsedPaste);\n    if (parsedPaste) {\n      setTitle(parsedPaste.title);\n    }\n  });\n\n  function darkModeToggle() {\n    const body = document.getElementsByTagName(\"body\")[0];\n    if (sett().darkMode) {\n      body.classList.add(\"dark\");\n      body.classList.remove(\"light\");\n    } else {\n      body.classList.add(\"light\");\n      body.classList.remove(\"dark\");\n    }\n    updateThemeColor(sett().darkMode);\n  }\n\n  createEffect(() => {\n    darkModeToggle();\n  });\n\n  onMount(async () => {\n    const id = getId();\n    const response = await fetch(`/${id}/json`);\n    const json = await response.json();\n\n    await initWasm();\n    await initWebWasm();\n    const wsUrl = \"/ws\";\n    const socket = new WebSocket(wsUrl);\n    socket.onopen = async () => {\n      console.log(\"WebSocket connected to:\", wsUrl);\n    };\n\n    if (json.encrypted) {\n      setIsEncrypted(true);\n      // Get user input via popup.\n      let done = false;\n      let promptMsg = \"Enter password\";\n      while (!done) {\n        let passkey = prompt(promptMsg, \"\");\n        while (passkey === \"\" || passkey === null) {\n          promptMsg = \"Enter password\";\n          passkey = prompt(promptMsg, \"\");\n        }\n        const decrypted = decrypt(json.data, passkey as string);\n        if (decrypted == null) {\n          promptMsg = \"Invalid password\";\n        } else {\n          setData(decrypted);\n          done = true;\n        }\n      }\n    } else {\n      setData(JSON.stringify(json.data));\n    }\n\n    darkModeToggle();\n\n    window.addEventListener(\"resize\", updateWidths);\n    updateWidths();\n\n    onCleanup(() => {\n      window.removeEventListener(\"resize\", updateWidths);\n    });\n\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.key === \"Escape\") {\n        setShowModal(false);\n      }\n    };\n    window.addEventListener(\"keydown\", handleKeyDown);\n    onCleanup(() => window.removeEventListener(\"keydown\", handleKeyDown));\n\n    const root = document.getElementById(\"root\");\n    if (root) {\n      if (root.clientHeight <= window.innerHeight) {\n        root.style.overflowY = \"hidden\";\n      }\n    }\n\n    const paste_value = paste();\n    if (paste_value !== null) {\n      SavePasteToLastVisited(sett, setSett, paste_value);\n    }\n  });\n\n  return (\n    <Switch>\n      <Match when={sett().newFormat}>\n        <PasteViewNew\n          paste={paste}\n          setShowModal={setShowModal}\n          setSelectable={setSelectable}\n          setShowNotes={setShowNotes}\n          showNotes={showNotes}\n          makeOpaqueOnFocus={makeOpaqueOnFocus}\n          makeTransparentOnMouseover={makeTransparentOnMouseover}\n          notesWidth={notesWidth}\n          setNotesOpacity={setNotesOpacity}\n          notesOpacity={notesOpacity}\n          copyPaste={copyPasteNew}\n          showModal={showModal}\n          sett={sett}\n          setSett={setSett}\n          isEncrypted={isEncrypted}\n          handleCreateOts={handleCreateOts}\n        />\n      </Match>\n      <Match when={!sett().newFormat}>\n        <PasteViewBase\n          paste={paste}\n          setShowModal={setShowModal}\n          setSelectable={setSelectable}\n          setShowNotes={setShowNotes}\n          showNotes={showNotes}\n          makeOpaqueOnFocus={makeOpaqueOnFocus}\n          makeTransparentOnMouseover={makeTransparentOnMouseover}\n          notesWidth={notesWidth}\n          setNotesOpacity={setNotesOpacity}\n          notesOpacity={notesOpacity}\n          copyPaste={copyPasteBase}\n          showModal={showModal}\n          sett={sett}\n          setSett={setSett}\n          isEncrypted={isEncrypted}\n          handleCreateOts={handleCreateOts}\n        />\n      </Match>\n    </Switch>\n  );\n};\n\nexport default PasteView;\n","import { exports, memory } from \"./wasm_helpers\";\n\nexport function encrypt(message: string, passphrase: string): string | null {\n  if (!exports || !memory) {\n    return null;\n  }\n  const passphrase_len = passphrase.length;\n  const message_len = message.length;\n\n  // Allocate a single buffer for both strings\n  const buffer_ptr = exports.allocUint8(passphrase_len + message_len);\n  if (!buffer_ptr) {\n    console.error(\"Failed to allocate memory\");\n    return null;\n  }\n\n  // Get a view of memory\n  let memoryView = new Uint8Array(exports.memory.buffer);\n\n  // Copy the passphrase and message into the single buffer\n  const passphraseBuffer = new TextEncoder().encode(passphrase);\n  const messageBuffer = new TextEncoder().encode(message);\n\n  // Write passphrase at the beginning of the buffer\n  for (let i = 0; i < passphrase_len; i++) {\n    memoryView[buffer_ptr + i] = passphraseBuffer[i];\n  }\n\n  // Write message right after the passphrase\n  for (let i = 0; i < message_len; i++) {\n    memoryView[buffer_ptr + passphrase_len + i] = messageBuffer[i];\n  }\n\n  // Single call to encrypt\n  const success = exports.encryptMessage(\n    buffer_ptr,\n    passphrase_len,\n    message_len,\n  );\n\n  if (!success) {\n    console.error(\"Failed to encrypt message\");\n    exports.resetArena();\n    return null;\n  }\n\n  // Get result information from separate functions\n  const resultPtr = exports.getResultPtr();\n  const resultLen = exports.getResultLen();\n\n  if (resultPtr === 0 || resultLen === 0) {\n    console.error(\"Invalid result\");\n    exports.resetArena();\n    return null;\n  }\n\n  // Get a fresh view of memory after the WASM function call\n  memoryView = new Uint8Array(exports.memory.buffer);\n\n  const decoder = new TextDecoder();\n  const result_message = decoder.decode(\n    memoryView.slice(resultPtr, resultPtr + resultLen),\n  );\n\n  // Reset the arena instead of individual frees\n  exports.resetArena();\n\n  return result_message;\n}\n\nexport function decrypt(encrypted: string, passphrase: string): string | null {\n  if (!exports || !memory) {\n    return null;\n  }\n  const passphrase_len = passphrase.length;\n  const encrypted_len = encrypted.length;\n\n  // Allocate a single buffer for both strings\n  const buffer_ptr = exports.allocUint8(passphrase_len + encrypted_len);\n  if (!buffer_ptr) {\n    console.error(\"Failed to allocate memory\");\n    return null;\n  }\n\n  // Get a view of memory\n  let memoryView = new Uint8Array(exports.memory.buffer);\n\n  // Copy the passphrase and message into the single buffer\n  const passphraseBuffer = new TextEncoder().encode(passphrase);\n  const encryptedBuffer = new TextEncoder().encode(encrypted);\n\n  // Write passphrase at the beginning of the buffer\n  for (let i = 0; i < passphrase_len; i++) {\n    memoryView[buffer_ptr + i] = passphraseBuffer[i];\n  }\n\n  // Write message right after the passphrase\n  for (let i = 0; i < encrypted_len; i++) {\n    memoryView[buffer_ptr + passphrase_len + i] = encryptedBuffer[i];\n  }\n\n  // Single call to encrypt\n  const success = exports.decryptMessage(\n    buffer_ptr,\n    passphrase_len,\n    encrypted_len,\n  );\n\n  if (!success) {\n    console.error(\"Failed to encrypt message\");\n    exports.resetArena();\n    return null;\n  }\n\n  // Get result information from separate functions\n  const resultPtr = exports.getResultPtr();\n  const resultLen = exports.getResultLen();\n\n  if (resultPtr === 0 || resultLen === 0) {\n    console.error(\"Invalid result\");\n    exports.resetArena();\n    return null;\n  }\n\n  // Get a fresh view of memory after the WASM function call\n  memoryView = new Uint8Array(exports.memory.buffer);\n\n  const decoder = new TextDecoder();\n  const result_message = decoder.decode(\n    memoryView.slice(resultPtr, resultPtr + resultLen),\n  );\n\n  // Reset the arena instead of individual frees\n  exports.resetArena();\n\n  return result_message;\n}\n","import { render } from 'solid-js/web';\nimport Paste from './PasteView';\n\nconst root = document.getElementById('root');\nif (root) {\n    render(() => <Paste />, root);\n}\n"],"names":["exports","memory","instance","sizeOfUint32","Uint32Array","sizeOfNullByte","Uint8Array","decodeString","pointer","length","slice","TextDecoder","decodeNullTerminatedString","memSize","console","maxLength","value","index","e","encodeNullTerminatedString","string","buffer","TextEncoder","sizeOfNullTerminatedString","initWasm","inst","wasmModule","WebAssembly","fetch","Error","now","BigInt","Date","getId","items","url","window","alignTo4Bytes","Math","updateSetting","key","sett","setSett","list","packed","localStorage","JSON","_el$","_el$2","isFixed","setIsFixed","createSignal","dir","setDir","prevSize","setPrevSize","innerWidth","height","setHeight","width","setWidth","bottom","setBottom","padding","setPadding","check","aspectRatio","innerHeight","onMount","onresize","createEffect","_tmpl$","firstChild","style","setProperty","_$setAttribute","logo","_$effect","_p$","_v$","_v$2","_v$3","_v$4","undefined","_v$5","_v$6","_v$7","_v$8","removeProperty","t","a","o","i","n","s","h","SettingsForm","props","_el$4","_el$5","_el$7","_el$8","_el$10","_el$11","_el$13","_el$16","_el$3","nextSibling","_el$6","_el$9","_el$12","_el$15","_el$14","addEventListener","onChange","target","checked","Number","parseInt","_$insert","children","settings","newFormat","moveColors","twoDImages","darkMode","lastViewedCount","PasteViewBase","paste","setSelectable","setShowNotes","showNotes","setNotesOpacity","makeOpaqueOnFocus","makeTransparentOnMouseover","notesWidth","notesOpacity","copyPaste","setShowModal","showModal","isEncrypted","handleCreateOts","_$createComponent","Show","when","currentPaste","_el$17","_el$18","_tmpl$10","title","author","format","rental","_tmpl$5","$$mouseout","$$mouseover","innerHTML","_tmpl$2","_tmpl$3","_tmpl$4","notes","_tmpl$6","$$click","document","getElementsByClassName","notes_obj","getBoundingClientRect","top","_tmpl$7","replace","_$addEventListener","For","each","pokemon","_el$26","_el$27","_el$29","_el$30","_el$31","_el$72","_tmpl$30","item_image","_el$28","_tmpl$11","_$p","_$style","nickname","fallback","_el$73","_tmpl$12","name","_$className","type1","gender","_el$74","_el$32","_$memo","_el$33","item","_el$35","_tmpl$13","_tmpl$14","trim","ability","_el$36","_tmpl$15","_el$37","level","_el$39","_tmpl$16","_el$40","shiny","_el$42","_tmpl$17","_el$43","hidden_power","_el$45","_tmpl$18","_el$48","_el$47","_el$46","tera_type","_el$49","_tmpl$19","_el$52","_el$51","_el$50","last_stat_ev","_el$53","_tmpl$26","evs","_el$55","_el$56","_tmpl$20","_el$57","_el$58","_tmpl$21","_el$59","_el$60","_tmpl$22","_el$61","_el$62","_tmpl$23","_el$63","_el$64","_tmpl$24","_el$65","_tmpl$25","_el$66","nature","_el$67","_tmpl$28","_el$68","endsWith","_tmpl$27","last_stat_iv","_el$70","_tmpl$29","ivs","moves","move","_el$75","_tmpl$32","_el$78","_el$79","_tmpl$33","_tmpl$34","_el$76","_tmpl$31","pokemon_image","Watermark","_el$20","_tmpl$9","_el$21","_el$22","$$keydown","stopPropagation","isOts","_el$24","_tmpl$8","_el$25","_$delegateEvents","PasteViewNew","stats","map","x","toString","_el$77","_el$34","_el$38","_el$82","_el$83","_el$80","_el$41","_el$44","_el$54","_el$71","_el$69","PasteView","setPaste","setIsEncrypted","data","setData","setTitle","setNotesWidth","str","pasteObj","originalPaste","encrypted","parse","content","pasteText","split","filter","line","test","join","form","createElement","method","action","display","encoded","stringify","btoa","String","input","type","appendChild","body","submit","initSettings","moveColorsString","twoDImagesString","darkModeString","newFormatString","lastViewedCountString","lastViewedPackedString","lastViewedPacked","updateWidths","main","getElementsByTagName","sidebar","getElementById","articles","end","windowWidth","margin_bottom","floor","marginBottom","min","max","id","element","userSelect","children_list","push","child","pop","copyPasteBase","log","text","querySelectorAll","forEach","article","_","monTitle","querySelector","textContent","attributeDivs","div","navigator","clipboard","writeText","copyPasteNew","abilityItem","darkModeToggle","classList","add","remove","meta","setAttribute","currentTitle","decodeHtmlEntities","txt","decoded","parsedPaste","parsePaste","twoDimages","decodePaste","pastePtr","titlePtr","titleSlice","authorPtr","authorSlice","notesPtr","notesSlice","formatPtr","formatSlice","rentalPtr","rentalSlice","pokemon_len","pokemonLenSlice","pokemonArrayPtrPointer","pokemonArrayPointer","pokemonArrayPtrSlice","alignedPokemonArrayPointer","pokemonArraySlice","pokemonPtr","mon","decodePokemon","offset","nameSlice","namePtr","nicknameSlice","nicknamePtr","basePtr","itemSlice","itemPtr","genderNum","genderPtr","itemImageSlice","itemImagePtr","itemImage","pokemonImageSlice","pokemonImagePtr","pokemonImage","moves_len","movesLenPtr","movesArrayPointer","movesArrayPtrSlice","movesArray","currentMovePtr","decodeMove","movePtr","type1Slice","type1Ptr","evValue","evPtr","ivValue","ivPtr","linesLenPointer","lines_len","linesLenSlice","lines","linesArrayPtrPointer","linesArrayPointer","linesArrayPtrSlice","alignedLinesArrayPointer","linesArraySlice","linePtr","lastStatEvSlice","lastStatEvPtr","lastStatIvSlice","lastStatIvPtr","type2Slice","type2Ptr","type2","abilitySlice","abilityPtr","levelPtr","shinySlice","shinyPtr","hpSlice","hpPointer","teraTypeSlice","teraTypePointer","natureSlice","naturePointer","isOtsValue","response","json","initWebWasm","socket","WebSocket","onopen","done","promptMsg","passkey","prompt","decrypted","decrypt","passphrase","passphrase_len","encrypted_len","buffer_ptr","memoryView","passphraseBuffer","encryptedBuffer","resultPtr","resultLen","result_message","decoder","onCleanup","removeEventListener","handleKeyDown","root","clientHeight","overflowY","paste_value","SavePasteToLastVisited","packedString","packedStringPointer","packedStringLength","pasteJsonPointer","pasteJsonLength","packedPtr","packedLen","packedBytes","Switch","Match","render","Paste"],"mappings":"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"}