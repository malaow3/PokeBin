{"version":3,"file":"static/js/index.5545f762.js","sources":["webpack://web/./src/helpers.ts","webpack://web/./src/patreon.tsx","webpack://web/./src/app.tsx","webpack://web/./src/encryption.ts","webpack://web/./src/index.tsx"],"sourcesContent":["export let exports: WebAssemblyExports;\nexport let memory: WebAssembly.Memory;\nimport { encrypt, decrypt } from \"./encryption.ts\";\n\ninterface WebAssemblyExports {\n  memory: WebAssembly.Memory;\n\n  init(seed: bigint): void;\n\n  allocUint8(length: number): number;\n\n  encryptMessage(\n    buffer_ptr: number,\n    passphrase_len: number,\n    message_len: number,\n  ): boolean;\n\n  resetArena(): void;\n  free(pointer: number, length: number): void;\n\n  getResultPtr(): number;\n  getResultLen(): number;\n  decryptMessage(\n    buffer_ptr: number,\n    passphrase_len: number,\n    encrypted_len: number,\n  ): boolean;\n\n  validatePaste(buffer_ptr: number, paste_len: number): number;\n\n  sendPerson(person_ptr: number): void;\n  receivePerson(buffer_ptr: number, buffer_len: number): number;\n  destroyPerson(person_ptr: number): void;\n\n  parsePaste(\n    buffer_ptr: number,\n    buffer_len: number,\n    twoDimages: boolean,\n  ): number;\n  destroyPaste(paste_ptr: number): void;\n}\n\nconst sizeOfUint32 = Uint32Array.BYTES_PER_ELEMENT;\nconst sizeOfUint8 = Uint8Array.BYTES_PER_ELEMENT;\nconst sizeOfNullByte = Uint8Array.BYTES_PER_ELEMENT;\nconst nullByte = 0x00;\n\nfunction decodeString(pointer: number, length: number) {\n  const slice = new Uint8Array(memory.buffer, pointer, length);\n  return new TextDecoder().decode(slice);\n}\n\nfunction decodeNullTerminatedString(pointer: number) {\n  if (pointer === 0) return \"\";\n\n  // Get current memory buffer size\n  const memSize = memory.buffer.byteLength;\n\n  // Ensure pointer is within bounds\n  if (pointer >= memSize) {\n    console.error(`Invalid pointer: ${pointer} exceeds memory size ${memSize}`);\n    return \"\";\n  }\n\n  // Create a view starting from pointer\n  const slice = new Uint8Array(memory.buffer, pointer);\n\n  // Find null terminator, but limit search to avoid buffer overflow\n  const maxLength = memSize - pointer;\n  const length = slice.findIndex((value: number, index) => {\n    if (index >= maxLength) return true;\n    return value === nullByte;\n  });\n\n  if (length === -1 || length === 0) {\n    return \"\";\n  }\n\n  try {\n    return decodeString(pointer, length);\n  } catch (e) {\n    console.error(`Failed to decode string at pointer ${pointer}:`, e);\n    return \"\";\n  }\n}\n\nfunction encodeNullTerminatedString(string: string) {\n  const buffer = new TextEncoder().encode(string);\n  const sizeOfNullTerminatedString = buffer.length + sizeOfNullByte;\n  const pointer = exports.allocUint8(sizeOfNullTerminatedString);\n  const slice = new Uint8Array(\n    memory.buffer,\n    pointer,\n    sizeOfNullTerminatedString,\n  );\n  slice.set(buffer);\n  slice[buffer.length] = nullByte;\n  return pointer;\n}\n\nasync function initWasm() {\n  const wasmModule = await WebAssembly.instantiateStreaming(fetch(\"/wasm\"), {\n    env: {\n      _throwError(pointer: number, length: number) {\n        const message = decodeString(pointer, length);\n        throw new Error(message);\n      },\n      _consoleLog(pointer: number, length: number) {\n        const message = decodeString(pointer, length);\n        console.log(message);\n      },\n    },\n  });\n  const instance = wasmModule.instance;\n  exports = instance.exports as unknown as WebAssemblyExports;\n  memory = exports.memory;\n\n  const now = BigInt(Date.now());\n  exports.init(now);\n}\n\nfunction validatePaste(paste: string): number {\n  if (!exports || !memory) {\n    return -1;\n  }\n\n  const buffer_ptr = exports.allocUint8(paste.length);\n  if (!buffer_ptr) {\n    console.error(\"Failed to allocate memory\");\n    return -1;\n  }\n\n  // Get a view of memory\n  const memoryView = new Uint8Array(exports.memory.buffer);\n\n  // Copy the passphrase and message into the single buffer\n  const pasteBuffer = new TextEncoder().encode(paste);\n  for (let i = 0; i < paste.length; i++) {\n    memoryView[buffer_ptr + i] = pasteBuffer[i];\n  }\n\n  const success = exports.validatePaste(buffer_ptr, paste.length);\n  exports.resetArena();\n\n  return success;\n}\n\nfunction alignTo4Bytes(pointer: number): number {\n  return Math.ceil(pointer / 4) * 4;\n}\n\nexport type Move = {\n  name: string;\n  type1: string;\n};\n\nexport type Pokemon = {\n  name: string;\n  nickname: string;\n  item: string;\n  gender: string;\n  item_image: string;\n  pokemon_image: string;\n  moves_len: number;\n  moves: Move[];\n  evs: number[];\n  ivs: number[];\n  lines_count: number;\n  lines: string[];\n  last_stat_ev: string;\n  last_stat_iv: string;\n  type1: string;\n  type2: string;\n  ability: string;\n  level: number;\n  shiny: string;\n  hidden_power: string;\n  tera_type: string;\n  nature: string;\n};\n\nexport type Paste = {\n  title: string;\n  author: string;\n  notes: string;\n  format: string;\n  rental: string;\n  pokemon_len: number;\n  pokemon: Pokemon[];\n  isOts: boolean;\n};\n\nfunction decodeMove(movePtr: number): Move {\n  try {\n    let offset = 0;\n    const namePtr = new Uint32Array(memory.buffer, movePtr, 1);\n    const nameSlice = namePtr[0];\n    const name = decodeNullTerminatedString(nameSlice);\n    offset += sizeOfUint32;\n\n    const type1Ptr = new Uint32Array(memory.buffer, movePtr + offset, 1);\n    const type1Slice = type1Ptr[0];\n    const type1 = decodeNullTerminatedString(type1Slice);\n\n    return { name, type1 };\n  } catch (e) {\n    console.error(e);\n    return { name: \"\", type1: \"\" };\n  }\n}\n\nfunction decodePokemon(pokemonPtr: number): Pokemon {\n  try {\n    const basePtr = pokemonPtr;\n    let offset = 0;\n    const namePtr = new Uint32Array(memory.buffer, basePtr, 1);\n    const nameSlice = namePtr[0];\n    const name = decodeNullTerminatedString(nameSlice);\n    offset += sizeOfUint32;\n\n    const nicknamePtr = new Uint32Array(memory.buffer, basePtr + offset, 1);\n    const nicknameSlice = nicknamePtr[0];\n    const nickname = decodeNullTerminatedString(nicknameSlice);\n    offset += sizeOfUint32;\n\n    const itemPtr = new Uint32Array(memory.buffer, basePtr + offset, 1);\n    const itemSlice = itemPtr[0];\n    const item = decodeNullTerminatedString(itemSlice);\n    offset += sizeOfUint32;\n\n    const genderPtr = new Uint32Array(memory.buffer, basePtr + offset, 1);\n    const genderNum = genderPtr[0];\n    offset += sizeOfUint32;\n\n    const itemImagePtr = new Uint32Array(memory.buffer, basePtr + offset, 1);\n    const itemImageSlice = itemImagePtr[0];\n    const itemImage = decodeNullTerminatedString(itemImageSlice);\n    offset += sizeOfUint32;\n\n    const pokemonImagePtr = new Uint32Array(memory.buffer, basePtr + offset, 1);\n    const pokemonImageSlice = pokemonImagePtr[0];\n    const pokemonImage = decodeNullTerminatedString(pokemonImageSlice);\n    offset += sizeOfUint32;\n\n    const movesLenPtr = new Uint32Array(memory.buffer, basePtr + offset, 1);\n    const moves_len = movesLenPtr[0];\n    offset += sizeOfUint32;\n\n    const movesArrayPtrSlice = new Uint32Array(\n      memory.buffer,\n      basePtr + offset,\n      1,\n    );\n    const movesArrayPointer = movesArrayPtrSlice[0];\n\n    const movesArray = new Uint32Array(\n      memory.buffer,\n      movesArrayPointer,\n      moves_len,\n    );\n\n    const moves: Move[] = [];\n    if (moves_len > 0) {\n      for (let i = 0; i < moves_len; i++) {\n        const currentMovePtr = movesArray[i];\n        try {\n          const move = decodeMove(currentMovePtr);\n          moves.push(move);\n        } catch (e) {\n          console.error(`Error decoding move at index ${i}:`, e);\n        }\n        offset += sizeOfUint8;\n      }\n    } else {\n      offset += sizeOfUint32;\n    }\n\n    let gender = \"\";\n    if (genderNum === 77) {\n      gender = \"M\";\n    } else if (genderNum === 70) {\n      gender = \"F\";\n    }\n\n    const evs: number[] = [];\n    for (let i = 0; i < 6; i++) {\n      const evPtr = new Uint32Array(memory.buffer, basePtr + offset, 1);\n      const evValue = evPtr[0];\n      evs.push(evValue);\n      offset += sizeOfUint32;\n    }\n\n    const ivs: number[] = [];\n    for (let i = 0; i < 6; i++) {\n      const ivPtr = new Uint32Array(memory.buffer, basePtr + offset, 1);\n      const ivValue = ivPtr[0];\n      ivs.push(ivValue);\n      offset += sizeOfUint32;\n    }\n\n    const linesLenPointer = basePtr + offset;\n    const linesLenSlice = new Uint32Array(memory.buffer, linesLenPointer, 1);\n    const lines_len = linesLenSlice[0];\n    offset += sizeOfUint32;\n\n    const lines: string[] = [];\n    if (lines_len > 0) {\n      // Decode items array pointer - ensure 4-byte alignment\n      const linesArrayPtrPointer = basePtr + offset;\n      const linesArrayPtrSlice = new Uint32Array(\n        memory.buffer,\n        linesArrayPtrPointer,\n        1,\n      );\n      const linesArrayPointer = linesArrayPtrSlice[0];\n\n      // Decode each line - ensure the pointer is properly aligned\n      const alignedLinesArrayPointer = alignTo4Bytes(linesArrayPointer);\n      const linesArraySlice = new Uint32Array(\n        memory.buffer,\n        alignedLinesArrayPointer,\n        lines_len,\n      );\n\n      for (let i = 0; i < lines_len; i++) {\n        const linePtr = linesArraySlice[i];\n        const line = decodeNullTerminatedString(linePtr);\n        lines.push(line);\n      }\n\n      offset += sizeOfUint32 * lines_len;\n    } else {\n      offset += sizeOfUint32;\n    }\n\n    const lastStatEvPtr = new Uint32Array(memory.buffer, basePtr + offset, 1);\n    const lastStatEvSlice = lastStatEvPtr[0];\n    const last_stat_ev = decodeNullTerminatedString(lastStatEvSlice);\n    offset += sizeOfUint32;\n\n    const lastStatIvPtr = new Uint32Array(memory.buffer, basePtr + offset, 1);\n    const lastStatIvSlice = lastStatIvPtr[0];\n    const last_stat_iv = decodeNullTerminatedString(lastStatIvSlice);\n    offset += sizeOfUint32;\n\n    const type1Ptr = new Uint32Array(memory.buffer, basePtr + offset, 1);\n    const type1Slice = type1Ptr[0];\n    const type1 = decodeNullTerminatedString(type1Slice);\n    offset += sizeOfUint32;\n\n    const type2Ptr = new Uint32Array(memory.buffer, basePtr + offset, 1);\n    const type2Slice = type2Ptr[0];\n    const type2 = decodeNullTerminatedString(type2Slice);\n    offset += sizeOfUint32;\n\n    const abilityPtr = new Uint32Array(memory.buffer, basePtr + offset, 1);\n    const abilitySlice = abilityPtr[0];\n    const ability = decodeNullTerminatedString(abilitySlice);\n    offset += sizeOfUint32;\n\n    const levelPtr = new Uint32Array(memory.buffer, basePtr + offset, 1);\n    const level = levelPtr[0];\n    offset += sizeOfUint32;\n\n    const shinyPtr = new Uint32Array(memory.buffer, basePtr + offset, 1);\n    const shinySlice = shinyPtr[0];\n    const shiny = decodeNullTerminatedString(shinySlice);\n    offset += sizeOfUint32;\n\n    const hpPointer = new Uint32Array(memory.buffer, basePtr + offset, 1);\n    const hpSlice = hpPointer[0];\n    const hidden_power = decodeNullTerminatedString(hpSlice);\n    offset += sizeOfUint32;\n\n    const teraTypePointer = new Uint32Array(memory.buffer, basePtr + offset, 1);\n    const teraTypeSlice = teraTypePointer[0];\n    const tera_type = decodeNullTerminatedString(teraTypeSlice);\n    offset += sizeOfUint32;\n\n    const naturePointer = new Uint32Array(memory.buffer, basePtr + offset, 1);\n    const natureSlice = naturePointer[0];\n    const nature = decodeNullTerminatedString(natureSlice);\n    offset += sizeOfUint32;\n\n    return {\n      name,\n      nickname,\n      item,\n      gender,\n      item_image: itemImage,\n      pokemon_image: pokemonImage,\n      moves_len: moves_len,\n      moves,\n      evs,\n      ivs,\n      lines_count: lines_len,\n      lines,\n      last_stat_ev,\n      last_stat_iv,\n      type1,\n      type2,\n      ability,\n      level,\n      shiny,\n      hidden_power,\n      tera_type,\n      nature,\n    };\n  } catch (e) {\n    console.error(e);\n    return {\n      name: \"\",\n      nickname: \"\",\n      item: \"\",\n      gender: \"\",\n      item_image: \"\",\n      pokemon_image: \"\",\n      moves_len: 0,\n      moves: [],\n      evs: [],\n      ivs: [],\n      lines_count: 0,\n      lines: [],\n      last_stat_ev: \"\",\n      last_stat_iv: \"\",\n      type1: \"\",\n      type2: \"\",\n      ability: \"\",\n      level: 100,\n      shiny: \"\",\n      hidden_power: \"\",\n      tera_type: \"\",\n      nature: \"\",\n    };\n  }\n}\n\nfunction decodePaste(pastePtr: number): Paste {\n  try {\n    // Access the header pointer\n    const titleSlice = new Uint32Array(memory.buffer, pastePtr, 1);\n    const titlePtr = titleSlice[0];\n    const title = decodeNullTerminatedString(titlePtr);\n\n    const authorSlice = new Uint32Array(\n      memory.buffer,\n      pastePtr + sizeOfUint32,\n      1,\n    );\n    const authorPtr = authorSlice[0];\n    const author = decodeNullTerminatedString(authorPtr);\n\n    const notesSlice = new Uint32Array(\n      memory.buffer,\n      pastePtr + sizeOfUint32 * 2,\n      1,\n    );\n    const notesPtr = notesSlice[0];\n    const notes = decodeNullTerminatedString(notesPtr);\n\n    const formatSlice = new Uint32Array(\n      memory.buffer,\n      pastePtr + sizeOfUint32 * 3,\n      1,\n    );\n    const formatPtr = formatSlice[0];\n    const format = decodeNullTerminatedString(formatPtr);\n\n    const rentalSlice = new Uint32Array(\n      memory.buffer,\n      pastePtr + sizeOfUint32 * 4,\n      1,\n    );\n    const rentalPtr = rentalSlice[0];\n    const rental = decodeNullTerminatedString(rentalPtr);\n\n    const pokemonLenPtr = pastePtr + sizeOfUint32 * 5;\n    const pokemonLenSlice = new Uint32Array(memory.buffer, pokemonLenPtr, 1);\n    const pokemon_len = pokemonLenSlice[0];\n\n    // Decode items array pointer - ensure 4-byte alignment\n    const pokemonArrayPtrPointer = alignTo4Bytes(pastePtr + sizeOfUint32 * 6);\n    const pokemonArrayPtrSlice = new Uint32Array(\n      memory.buffer,\n      pokemonArrayPtrPointer,\n      1,\n    );\n    const pokemonArrayPointer = pokemonArrayPtrSlice[0];\n\n    // Decode each item - ensure the pointer is properly aligned\n    const pokemon: Pokemon[] = [];\n    const alignedPokemonArrayPointer = alignTo4Bytes(pokemonArrayPointer);\n    const pokemonArraySlice = new Uint32Array(\n      memory.buffer,\n      alignedPokemonArrayPointer,\n      pokemon_len,\n    );\n\n    for (let i = 0; i < pokemon_len; i++) {\n      const pokemonPtr = pokemonArraySlice[i];\n      const mon = decodePokemon(pokemonPtr);\n      pokemon.push(mon);\n    }\n\n    const isOtsOffset = pokemonArrayPtrPointer + sizeOfUint32;\n    const isOtsValue = new Uint32Array(memory.buffer, isOtsOffset, 1)[0];\n    const isOts = isOtsValue === 1;\n\n    const paste = {\n      title,\n      author,\n      notes,\n      format,\n      rental,\n      pokemon_len,\n      pokemon,\n      isOts,\n    };\n\n    return paste;\n  } finally {\n    exports.destroyPaste(pastePtr);\n  }\n}\n\nexport function parsePaste(data: string, twoDimages: boolean): Paste | null {\n  if (!exports || !memory) {\n    return null;\n  }\n\n  const input = encodeNullTerminatedString(data);\n  const input_len = data.length;\n\n  const pastePtr = exports.parsePaste(input, input_len, twoDimages);\n  const paste = decodePaste(pastePtr);\n\n  exports.resetArena();\n\n  return paste;\n}\n\nexport { encrypt, initWasm, decrypt, validatePaste };\n","import \"./patreon.css\";\n\nfunction PatreonButton() {\n  return (\n    <div style=\"user-select: none !important; z-index: 9999\">\n      <a\n        class=\"patreon-button\"\n        href=\"https://patreon.com/malaow3\"\n        target=\"_blank\"\n        rel=\"noreferrer\"\n      >\n        <img\n          width=\"16\"\n          height=\"16\"\n          class=\"octicon rounded-2 d-block\"\n          alt=\"patreon\"\n          src=\"https://github.githubassets.com/assets/patreon-96b15b9db4b9.svg\"\n        />\n        <span class=\"ml-2\">Support on Patreon</span>\n      </a>\n    </div>\n  );\n}\n\nexport default PatreonButton;\n","import \"./app.css\";\nimport { onMount, createSignal, Show, createEffect } from \"solid-js\";\nimport { encrypt, initWasm, validatePaste } from \"./helpers.ts\";\nimport PatreonButton from \"./patreon.tsx\";\nimport logo from \"../public/logo/large_logo_cropped.webp\";\n\nconst App = () => {\n  // Initialize refs with createSignal to track when they're defined\n  const [form, setForm] = createSignal<HTMLFormElement | undefined>();\n  const [paste, setPaste] = createSignal<HTMLTextAreaElement | undefined>();\n  const [password, setPassword] = createSignal<HTMLInputElement | undefined>();\n  const [title, setTitle] = createSignal<HTMLInputElement | undefined>();\n  const [author, setAuthor] = createSignal<HTMLInputElement | undefined>();\n  const [notes, setNotes] = createSignal<HTMLTextAreaElement | undefined>();\n  const [format, setFormat] = createSignal<HTMLInputElement | undefined>();\n  const [rental, setRental] = createSignal<HTMLInputElement | undefined>();\n  const [data, setData] = createSignal<HTMLInputElement | undefined>();\n  const [notesLabel, setNotesLabel] = createSignal<\n    HTMLLabelElement | undefined\n  >();\n  const [footer, setFooter] = createSignal<HTMLDivElement | undefined>();\n  const [top, setTop] = createSignal<HTMLDivElement | undefined>();\n  const [belowNotes, setBelowNotes] = createSignal<\n    HTMLDivElement | undefined\n  >();\n  const [total, setTotal] = createSignal<string>(\"\");\n  const [live, setLive] = createSignal<string>(\"\");\n  const [isReady, setIsReady] = createSignal(false);\n\n  function handleNotesDoubleClick() {\n    const notesEl = notes();\n    if (notesEl) {\n      notesEl.style.height = \"auto\";\n    }\n  }\n\n  const darkModeString = localStorage.getItem(\"darkMode\");\n  let darkMode = true;\n  if (darkModeString !== null) {\n    darkMode = JSON.parse(darkModeString);\n  }\n\n  const [sett, _] = createSignal({\n    darkMode: darkMode,\n  });\n\n  function darkModeToggle() {\n    const body = document.getElementsByTagName(\"body\")[0];\n    if (sett().darkMode) {\n      body.classList.add(\"dark\");\n      body.classList.remove(\"light\");\n    } else {\n      body.classList.add(\"light\");\n      body.classList.remove(\"dark\");\n    }\n  }\n\n  createEffect(() => {\n    darkModeToggle();\n  });\n\n  function resizeNotes() {\n    const notesEl = notes();\n    const footerEl = footer();\n    const topEl = top();\n    const belowNotesEl = belowNotes();\n    const notesLabelEl = notesLabel();\n\n    if (notesEl && footerEl && topEl && belowNotesEl && notesLabelEl) {\n      const labelHeight = notesLabelEl.clientHeight;\n      const availableHeight =\n        window.innerHeight -\n        topEl.clientHeight -\n        belowNotesEl.clientHeight -\n        footerEl.clientHeight -\n        labelHeight -\n        16;\n      notesEl.style.maxHeight = `${availableHeight}px`;\n    }\n  }\n\n  onMount(async () => {\n    darkModeToggle();\n    const wsUrl = \"/ws\";\n    const socket = new WebSocket(wsUrl);\n    socket.onopen = async () => {\n      console.log(\"WebSocket connected to:\", wsUrl);\n      setLive(await fetch(\"/live\").then((r) => r.text()));\n    };\n\n    setTotal(await fetch(\"/total\").then((r) => r.text()));\n\n    await initWasm();\n    setIsReady(true);\n\n    const version = await fetch(\"/version\");\n    const versionText = await version.text();\n    console.log(versionText);\n  });\n\n  createEffect(() => {\n    if (isReady() && total() !== \"\" && live() !== \"\") {\n      resizeNotes();\n    }\n  });\n\n  async function handleForm(e: Event) {\n    e.preventDefault();\n\n    const start = Date.now();\n    const pasteEl = paste();\n\n    if (!pasteEl) return false;\n\n    if (pasteEl.value === \"\") {\n      alert(\"Paste cannot be empty!\");\n      return false;\n    }\n\n    const valid = validatePaste(pasteEl.value);\n    if (valid !== 0) {\n      if (valid === -1) {\n        alert(\"PokeBin encountered an issue! Please refresh and try again!\");\n        return false;\n      }\n      if (valid === 6) {\n        alert(\"PokeBin contains too many Pokemon!\");\n        return false;\n      }\n      alert(\n        \"Not a valid PokeBin! If you believe this is incorrect, try re-copying from Showdown and please file an issue on GitHub.\",\n      );\n      return false;\n    }\n\n    const passwordEl = password();\n    const titleEl = title();\n    const authorEl = author();\n    const notesEl = notes();\n    const formatEl = format();\n    const rentalEl = rental();\n    const dataEl = data();\n    const formEl = form();\n\n    if (\n      !passwordEl ||\n      !titleEl ||\n      !authorEl ||\n      !notesEl ||\n      !formatEl ||\n      !rentalEl ||\n      !dataEl ||\n      !formEl\n    )\n      return false;\n\n    interface BaseDataJson {\n      title: string;\n      author: string;\n      notes: string;\n      format: string;\n      rental: string;\n      content: string;\n    }\n\n    interface FormData {\n      encrypted: boolean;\n      data: BaseDataJson | string;\n    }\n\n    let paste_string: string = pasteEl.value;\n    paste_string = paste_string.trim();\n\n    const base_data = {\n      title: titleEl.value,\n      author: authorEl.value,\n      notes: notesEl.value,\n      format: formatEl.value,\n      rental: rentalEl.value,\n      content: paste_string,\n    };\n\n    const form_data: FormData = {\n      encrypted: false,\n      data: base_data,\n    };\n\n    if (passwordEl.value === \"\") {\n      const jsonString = JSON.stringify(form_data);\n      const encoded = btoa(decodeURIComponent(encodeURIComponent(jsonString)));\n      dataEl.value = encoded;\n      const end = Date.now();\n      console.log(`Processing took ${end - start}ms`);\n      formEl.submit();\n      return true;\n    }\n\n    const password_value = passwordEl.value;\n    const form_content = JSON.stringify(base_data);\n    const encrypted = encrypt(form_content, password_value);\n\n    if (encrypted) {\n      form_data.encrypted = true;\n      form_data.data = encrypted;\n    } else {\n      throw new Error(\"Encryption failed\");\n    }\n\n    const jsonString = JSON.stringify(form_data);\n    const encoded = btoa(decodeURIComponent(encodeURIComponent(jsonString)));\n    dataEl.value = encoded;\n    passwordEl.disabled = true;\n    const end = Date.now();\n    console.log(`Processing took ${end - start}ms`);\n    formEl.submit();\n    return true;\n  }\n\n  return (\n    <Show when={total() !== \"\" && live() !== \"\"}>\n      <main class=\"min-h-screen flex flex-col overflow-auto bg-[#f9f9f9] dark:bg-zinc-950 text-black dark:text-white\">\n        <form\n          ref={setForm}\n          onSubmit={(e) => handleForm(e)}\n          action=\"/create\"\n          method=\"post\"\n          id=\"form\"\n          class=\"flex-1 flex md:flex-row flex-col overflow-auto\"\n        >\n          <textarea\n            ref={setPaste}\n            id=\"paste\"\n            name=\"paste\"\n            placeholder=\"Paste your tournament winning team here!\"\n            class=\"bg-white dark:bg-zinc-950 m-0 p-3 box-border text-black dark:text-white font-mono\n        resize-none outline-none border-none md:flex-1 h-[40vh] md:h-auto\"\n          />\n          <div class=\"md:w-[28rem] w-full bg-[#f9f9f9] dark:bg-zinc-900 text-black dark:text-white flex flex-col p-4 overflow-y-auto\">\n            <div class=\"flex-1 flex flex-col\">\n              <div ref={setTop}>\n                <div class=\"flex justify-center items-center mb-2\">\n                  <div class=\"w-[300px] aspect-[2/1]\">\n                    <img\n                      src={logo}\n                      style={{\n                        height: \"125px\",\n                        width: \"290px\",\n                      }}\n                      class=\"border-none outline-none shadow-none\"\n                      alt=\"PokeBin Logo\"\n                    />\n                  </div>\n                </div>\n\n                <div class=\"flex-1 flex flex-col gap-4\">\n                  <div class=\"flex flex-row items-center gap-3\">\n                    <label for=\"title\" class=\"w-20 text-right font-medium\">\n                      Title\n                    </label>\n                    <input\n                      ref={setTitle}\n                      type=\"text\"\n                      name=\"title\"\n                      id=\"title\"\n                      autocomplete=\"off\"\n                      class=\"flex-1 text-sm rounded border border-zinc-300 dark:border-zinc-600 bg-white dark:bg-zinc-700\n                  text-black dark:text-white outline-none focus:border-zinc-500 px-2 py-1\"\n                    />\n                  </div>\n\n                  <div class=\"flex flex-row items-center gap-3\">\n                    <label for=\"author\" class=\"w-20 text-right font-medium\">\n                      Author\n                    </label>\n                    <input\n                      ref={setAuthor}\n                      type=\"text\"\n                      name=\"author\"\n                      id=\"author\"\n                      autocomplete=\"off\"\n                      class=\"flex-1 text-sm rounded border border-zinc-300 dark:border-zinc-600 bg-white dark:bg-zinc-700\n                  text-black dark:text-white outline-none focus:border-zinc-500 px-2 py-1\"\n                    />\n                  </div>\n\n                  <div class=\"flex flex-row items-center gap-3\">\n                    <label for=\"rental\" class=\"w-20 text-right  font-medium\">\n                      Rental\n                    </label>\n                    <input\n                      ref={setRental}\n                      type=\"text\"\n                      name=\"rental\"\n                      id=\"rental\"\n                      autocomplete=\"off\"\n                      class=\"flex-1 rounded border border-zinc-300 dark:border-zinc-600 bg-white dark:bg-zinc-700\n                        text-black dark:text-white outline-none focus:border-zinc-500 px-2 py-1\"\n                      minLength=\"6\"\n                      maxLength=\"6\"\n                    />\n                  </div>\n\n                  <div class=\"flex flex-row items-center gap-3\">\n                    <label for=\"format\" class=\"w-20 text-right font-medium\">\n                      Format\n                    </label>\n                    <input\n                      ref={setFormat}\n                      type=\"text\"\n                      name=\"format\"\n                      id=\"format\"\n                      autocomplete=\"off\"\n                      class=\"flex-1 rounded border border-zinc-300 dark:border-zinc-600 bg-white dark:bg-zinc-700\n                        text-black dark:text-white outline-none focus:border-zinc-500 px-2 py-1\"\n                    />\n                  </div>\n\n                  <div class=\"flex flex-row items-start gap-3\">\n                    <label\n                      ref={setNotesLabel}\n                      for=\"notes\"\n                      class=\"w-20 text-right font-medium pt-1\"\n                    >\n                      Notes\n                    </label>\n                    <textarea\n                      ref={setNotes}\n                      id=\"notes\"\n                      name=\"notes\"\n                      rows=\"4\"\n                      onDblClick={handleNotesDoubleClick}\n                      autocomplete=\"off\"\n                      class=\"flex-1 text-sm rounded border border-zinc-300 dark:border-zinc-600 bg-white dark:bg-zinc-700\n                  text-black dark:text-white outline-none focus:border-zinc-500 px-2 py-1 resize-y\n                  min-h-[100px] max-h-[200px] md:max-h-none\"\n                    />\n                  </div>\n\n                  <div\n                    class=\"flex flex-row items-center gap-3\"\n                    ref={setBelowNotes}\n                  >\n                    <label for=\"password\" class=\"w-20 text-right  font-medium\">\n                      Password\n                    </label>\n                    <input\n                      ref={setPassword}\n                      type=\"text\"\n                      name=\"password\"\n                      id=\"password\"\n                      autocomplete=\"off\"\n                      class=\"flex-1 rounded border border-zinc-300 dark:border-zinc-600 bg-white dark:bg-zinc-700\n                        text-black dark:text-white outline-none focus:border-zinc-500 px-2 py-1\"\n                    />\n                  </div>\n\n                  <div class=\"mt-4\">\n                    <button\n                      type=\"submit\"\n                      class=\"w-full bg-[#c2a8d4] hover:bg-[#9770b6] text-black font-bold\n                         py-2 px-4 rounded\"\n                    >\n                      Submit Paste!\n                    </button>\n                  </div>\n\n                  <input\n                    ref={setData}\n                    type=\"text\"\n                    hidden\n                    name=\"data\"\n                    id=\"data\"\n                  />\n                </div>\n              </div>\n            </div>\n\n            <div\n              ref={setFooter}\n              class=\"mt-8 pt-6 flex flex-col items-center space-y-1\"\n            >\n              <Show when={live() !== \"\"}>\n                <h1 class=\"text-sm font-bold text-[#c2a8d4]\">\n                  {live()} active PokeBin users!\n                </h1>\n              </Show>\n              <Show when={total() !== \"\"}>\n                <h1 class=\"text-sm font-bold text-[#c2a8d4]\">\n                  {total()} total PokeBins created!\n                </h1>\n              </Show>\n              <div>\n                <PatreonButton />\n              </div>\n              <a\n                href=\"/about\"\n                class=\"text-[#c2a8d4] hover:text-[#9770b6] text-base\"\n              >\n                About PokeBin\n              </a>\n              <a\n                href=\"/settings\"\n                class=\"text-[#c2a8d4] hover:text-[#9770b6] text-base\"\n              >\n                Settings\n              </a>\n              <span class=\"text-gray-600 opacity-20 text-xs\">\n                © Nelvana LLC\n              </span>\n            </div>\n          </div>\n        </form>\n      </main>\n    </Show>\n  );\n};\n\nexport default App;\n","import { exports, memory } from \"./helpers\";\n\nexport function encrypt(message: string, passphrase: string): string | null {\n  if (!exports || !memory) {\n    return null;\n  }\n  const passphrase_len = passphrase.length;\n  const message_len = message.length;\n\n  // Allocate a single buffer for both strings\n  const buffer_ptr = exports.allocUint8(passphrase_len + message_len);\n  if (!buffer_ptr) {\n    console.error(\"Failed to allocate memory\");\n    return null;\n  }\n\n  // Get a view of memory\n  let memoryView = new Uint8Array(exports.memory.buffer);\n\n  // Copy the passphrase and message into the single buffer\n  const passphraseBuffer = new TextEncoder().encode(passphrase);\n  const messageBuffer = new TextEncoder().encode(message);\n\n  // Write passphrase at the beginning of the buffer\n  for (let i = 0; i < passphrase_len; i++) {\n    memoryView[buffer_ptr + i] = passphraseBuffer[i];\n  }\n\n  // Write message right after the passphrase\n  for (let i = 0; i < message_len; i++) {\n    memoryView[buffer_ptr + passphrase_len + i] = messageBuffer[i];\n  }\n\n  // Single call to encrypt\n  const success = exports.encryptMessage(\n    buffer_ptr,\n    passphrase_len,\n    message_len,\n  );\n\n  if (!success) {\n    console.error(\"Failed to encrypt message\");\n    exports.resetArena();\n    return null;\n  }\n\n  // Get result information from separate functions\n  const resultPtr = exports.getResultPtr();\n  const resultLen = exports.getResultLen();\n\n  if (resultPtr === 0 || resultLen === 0) {\n    console.error(\"Invalid result\");\n    exports.resetArena();\n    return null;\n  }\n\n  // Get a fresh view of memory after the WASM function call\n  memoryView = new Uint8Array(exports.memory.buffer);\n\n  const decoder = new TextDecoder();\n  const result_message = decoder.decode(\n    memoryView.slice(resultPtr, resultPtr + resultLen),\n  );\n\n  // Reset the arena instead of individual frees\n  exports.resetArena();\n\n  return result_message;\n}\n\nexport function decrypt(encrypted: string, passphrase: string): string | null {\n  if (!exports || !memory) {\n    return null;\n  }\n  const passphrase_len = passphrase.length;\n  const encrypted_len = encrypted.length;\n\n  // Allocate a single buffer for both strings\n  const buffer_ptr = exports.allocUint8(passphrase_len + encrypted_len);\n  if (!buffer_ptr) {\n    console.error(\"Failed to allocate memory\");\n    return null;\n  }\n\n  // Get a view of memory\n  let memoryView = new Uint8Array(exports.memory.buffer);\n\n  // Copy the passphrase and message into the single buffer\n  const passphraseBuffer = new TextEncoder().encode(passphrase);\n  const encryptedBuffer = new TextEncoder().encode(encrypted);\n\n  // Write passphrase at the beginning of the buffer\n  for (let i = 0; i < passphrase_len; i++) {\n    memoryView[buffer_ptr + i] = passphraseBuffer[i];\n  }\n\n  // Write message right after the passphrase\n  for (let i = 0; i < encrypted_len; i++) {\n    memoryView[buffer_ptr + passphrase_len + i] = encryptedBuffer[i];\n  }\n\n  // Single call to encrypt\n  const success = exports.decryptMessage(\n    buffer_ptr,\n    passphrase_len,\n    encrypted_len,\n  );\n\n  if (!success) {\n    console.error(\"Failed to encrypt message\");\n    exports.resetArena();\n    return null;\n  }\n\n  // Get result information from separate functions\n  const resultPtr = exports.getResultPtr();\n  const resultLen = exports.getResultLen();\n\n  if (resultPtr === 0 || resultLen === 0) {\n    console.error(\"Invalid result\");\n    exports.resetArena();\n    return null;\n  }\n\n  // Get a fresh view of memory after the WASM function call\n  memoryView = new Uint8Array(exports.memory.buffer);\n\n  const decoder = new TextDecoder();\n  const result_message = decoder.decode(\n    memoryView.slice(resultPtr, resultPtr + resultLen),\n  );\n\n  // Reset the arena instead of individual frees\n  exports.resetArena();\n\n  return result_message;\n}\n","import { render } from 'solid-js/web';\nimport App from './app.tsx';\n\nconst root = document.getElementById('root');\nif (root) {\n    render(() => <App />, root);\n}\n"],"names":["exports","memory","decodeString","pointer","length","slice","Uint8Array","TextDecoder","initWasm","instance","wasmModule","WebAssembly","fetch","Error","console","now","BigInt","Date","Uint32Array","_tmpl$","App","form","setForm","createSignal","paste","setPaste","password","setPassword","title","setTitle","author","setAuthor","notes","setNotes","format","setFormat","rental","setRental","data","setData","notesLabel","setNotesLabel","footer","setFooter","top","setTop","belowNotes","setBelowNotes","total","setTotal","live","setLive","isReady","setIsReady","handleNotesDoubleClick","notesEl","style","height","darkModeString","localStorage","getItem","darkMode","JSON","parse","sett","_","darkModeToggle","body","document","getElementsByTagName","classList","add","remove","handleForm","e","preventDefault","start","pasteEl","value","alert","valid","validatePaste","buffer_ptr","memoryView","pasteBuffer","TextEncoder","i","success","passwordEl","titleEl","authorEl","formatEl","rentalEl","dataEl","formEl","paste_string","trim","base_data","content","form_data","encrypted","btoa","decodeURIComponent","encodeURIComponent","stringify","end","log","submit","password_value","encrypt","message","passphrase","passphrase_len","message_len","passphraseBuffer","messageBuffer","resultPtr","resultLen","result_message","decoder","disabled","createEffect","onMount","socket","WebSocket","onopen","then","r","text","version","resizeNotes","footerEl","topEl","belowNotesEl","notesLabelEl","labelHeight","clientHeight","availableHeight","window","innerHeight","maxHeight","_$createComponent","Show","when","_$memo","children","_el$","_tmpl$3","_el$2","firstChild","_el$3","_el$5","_el$4","nextSibling","_el$6","_el$7","_el$9","_el$8","_el$11","_el$10","_el$13","_el$12","_el$14","_el$16","_el$15","_el$17","_el$19","_el$18","_el$20","_el$22","_el$21","_el$23","_el$24","_el$25","_el$26","_el$28","_el$27","_el$30","_el$29","_el$31","_el$36","addEventListener","_$use","_$setAttribute","logo","setProperty","$$dblclick","_$insert","_el$32","_el$33","_el$34","_tmpl$2","_el$35","PatreonButton","_$delegateEvents","root","getElementById","render"],"mappings":"kDAAWA,EACAC,E,sBA8CX,SAASC,EAAaC,CAAe,CAAEC,CAAc,EACnD,IAAMC,EAAQ,IAAIC,WAAWL,EAAO,MAAM,CAAEE,EAASC,GACrD,OAAO,IAAIG,cAAc,MAAM,CAACF,EAClC,CAkDA,eAAeG,IAebP,EAASD,AADTA,CAAAA,EAAUS,AADOC,AAZE,OAAMC,YAAY,oBAAoB,CAACC,MAAM,SAAU,CACxE,IAAK,CACH,YAAYT,CAAe,CAAEC,CAAc,EAEzC,MAAM,AAAIS,MADMX,EAAaC,EAASC,GAExC,EACA,YAAYD,CAAe,CAAEC,CAAc,EAEzCU,QAAQ,GAAG,CADKZ,EAAaC,EAASC,GAExC,CACF,CACF,EAAC,EAC2B,QAAQ,CACjB,OAAO,AAAD,EACR,MAAM,CAEvB,IAAMW,EAAMC,OAAOC,KAAK,GAAG,IAC3BjB,EAAQ,IAAI,CAACe,EACf,CA7EqBG,YAAY,iBAAiB,CAC9BZ,WAAW,iBAAiB,CACzBA,WAAW,iBAAiB,C,2UCpBnD,MAtBA,WACE,OAAAa,GAmBF,E,6pHC2YA,MA3ZYC,KAEV,GAAM,CAACC,EAAMC,EAAQ,CAAGC,AAAAA,GAAAA,EAAAA,EAAAA,AAAAA,IAClB,CAACC,EAAOC,EAAS,CAAGF,AAAAA,GAAAA,EAAAA,EAAAA,AAAAA,IACpB,CAACG,EAAUC,EAAY,CAAGJ,AAAAA,GAAAA,EAAAA,EAAAA,AAAAA,IAC1B,CAACK,EAAOC,EAAS,CAAGN,AAAAA,GAAAA,EAAAA,EAAAA,AAAAA,IACpB,CAACO,EAAQC,EAAU,CAAGR,AAAAA,GAAAA,EAAAA,EAAAA,AAAAA,IACtB,CAACS,EAAOC,EAAS,CAAGV,AAAAA,GAAAA,EAAAA,EAAAA,AAAAA,IACpB,CAACW,EAAQC,EAAU,CAAGZ,AAAAA,GAAAA,EAAAA,EAAAA,AAAAA,IACtB,CAACa,EAAQC,EAAU,CAAGd,AAAAA,GAAAA,EAAAA,EAAAA,AAAAA,IACtB,CAACe,EAAMC,EAAQ,CAAGhB,AAAAA,GAAAA,EAAAA,EAAAA,AAAAA,IAClB,CAACiB,EAAYC,EAAc,CAAGlB,AAAAA,GAAAA,EAAAA,EAAAA,AAAAA,IAG9B,CAACmB,EAAQC,EAAU,CAAGpB,AAAAA,GAAAA,EAAAA,EAAAA,AAAAA,IACtB,CAACqB,EAAKC,EAAO,CAAGtB,AAAAA,GAAAA,EAAAA,EAAAA,AAAAA,IAChB,CAACuB,EAAYC,EAAc,CAAGxB,AAAAA,GAAAA,EAAAA,EAAAA,AAAAA,IAG9B,CAACyB,EAAOC,EAAS,CAAG1B,AAAAA,GAAAA,EAAAA,EAAAA,AAAAA,EAAqB,IACzC,CAAC2B,EAAMC,EAAQ,CAAG5B,AAAAA,GAAAA,EAAAA,EAAAA,AAAAA,EAAqB,IACvC,CAAC6B,EAASC,EAAW,CAAG9B,AAAAA,GAAAA,EAAAA,EAAAA,AAAAA,EAAa,IAE3C,SAAS+B,IACP,IAAMC,EAAUvB,GACZuB,CAAAA,GACFA,CAAAA,EAAQC,KAAK,CAACC,MAAM,CAAG,MAAK,CAEhC,CAEA,IAAMC,EAAiBC,aAAaC,OAAO,CAAC,YACxCC,EAAW,EACXH,AAAmB,QAAnBA,GACFG,CAAAA,EAAWC,KAAKC,KAAK,CAACL,EAAc,EAGtC,GAAM,CAACM,EAAMC,EAAE,CAAG1C,AAAAA,GAAAA,EAAAA,EAAAA,AAAAA,EAAa,CAC7BsC,SAAUA,CACZ,GAEA,SAASK,IACP,IAAMC,EAAOC,SAASC,oBAAoB,CAAC,OAAO,CAAC,EAAE,AACjDL,CAAAA,IAAOH,QAAQ,EACjBM,EAAKG,SAAS,CAACC,GAAG,CAAC,QACnBJ,EAAKG,SAAS,CAACE,MAAM,CAAC,WAEtBL,EAAKG,SAAS,CAACC,GAAG,CAAC,SACnBJ,EAAKG,SAAS,CAACE,MAAM,CAAC,QAE1B,CAmDA,eAAeC,EAAWC,CAAQ,EAChCA,EAAEC,cAAc,GAEhB,IAAMC,EAAQ3D,KAAKF,GAAG,GAChB8D,EAAUrD,IAEhB,GAAI,CAACqD,EAAS,MAAO,GAErB,GAAIA,AAAkB,KAAlBA,EAAQC,KAAK,CAEf,OADAC,MAAM,0BACC,GAGT,IAAMC,EAAQC,AFElB,SAAuBzD,CAAa,EAClC,GAAI,CAACxB,GAAW,CAACC,EACf,OAAO,GAGT,IAAMiF,EAAalF,EAAQ,UAAU,CAACwB,EAAM,MAAM,EAClD,GAAI,CAAC0D,EAEH,OADApE,QAAQ,KAAK,CAAC,6BACP,GAIT,IAAMqE,EAAa,IAAI7E,WAAWN,EAAQ,MAAM,CAAC,MAAM,EAGjDoF,EAAc,IAAIC,cAAc,MAAM,CAAC7D,GAC7C,IAAK,IAAI8D,EAAI,EAAGA,EAAI9D,EAAM,MAAM,CAAE8D,IAChCH,CAAU,CAACD,EAAaI,EAAE,CAAGF,CAAW,CAACE,EAAE,CAG7C,IAAMC,EAAUvF,EAAQ,aAAa,CAACkF,EAAY1D,EAAM,MAAM,EAG9D,OAFAxB,EAAQ,UAAU,GAEXuF,CACT,EE1BgCV,EAAQC,KAAK,EACzC,GAAIE,AAAU,IAAVA,SACEA,AAAU,KAAVA,EACFD,MAAM,+DAGJC,AAAU,IAAVA,EACFD,MAAM,sCAGRA,MACE,2HAEK,GAGT,IAAMS,EAAa9D,IACb+D,EAAU7D,IACV8D,EAAW5D,IACXyB,EAAUvB,IACV2D,EAAWzD,IACX0D,EAAWxD,IACXyD,EAASvD,IACTwD,EAASzE,IAEf,GACE,CAACmE,GACD,CAACC,GACD,CAACC,GACD,CAACnC,GACD,CAACoC,GACD,CAACC,GACD,CAACC,GACD,CAACC,EAED,MAAO,GAgBT,IAAIC,EAAuBlB,EAAQC,KAAK,CACxCiB,EAAeA,EAAaC,IAAI,GAEhC,IAAMC,EAAY,CAChBrE,MAAO6D,EAAQX,KAAK,CACpBhD,OAAQ4D,EAASZ,KAAK,CACtB9C,MAAOuB,EAAQuB,KAAK,CACpB5C,OAAQyD,EAASb,KAAK,CACtB1C,OAAQwD,EAASd,KAAK,CACtBoB,QAASH,CACX,EAEMI,EAAsB,CAC1BC,UAAW,GACX9D,KAAM2D,CACR,EAEA,GAAIT,AAAqB,KAArBA,EAAWV,KAAK,CAAS,CAG3Be,EAAOf,KAAK,CADIuB,KAAKC,mBAAmBC,mBADrBzC,KAAK0C,SAAS,CAACL,MAGlC,IAAMM,EAAMxF,KAAKF,GAAG,GAGpB,OAFAD,QAAQ4F,GAAG,CAAC,CAAC,gBAAgB,EAAED,EAAM7B,EAAM,EAAE,CAAC,EAC9CkB,EAAOa,MAAM,GACN,EACT,CAEA,IAAMC,EAAiBpB,EAAWV,KAAK,CAEjCsB,EAAYS,ACrMf,SAAiBC,CAAe,CAAEC,CAAkB,EACzD,GAAI,CAAC/G,GAAW,CAACC,EACf,OAAO,KAET,IAAM+G,EAAiBD,EAAW,MAAM,CAClCE,EAAcH,EAAQ,MAAM,CAG5B5B,EAAalF,EAAAA,UAAkB,CAACgH,EAAiBC,GACvD,GAAI,CAAC/B,EAEH,OADApE,QAAQ,KAAK,CAAC,6BACP,KAIT,IAAIqE,EAAa,IAAI7E,WAAWN,EAAAA,MAAAA,CAAAA,MAAqB,EAG/CkH,EAAmB,IAAI7B,cAAc,MAAM,CAAC0B,GAC5CI,EAAgB,IAAI9B,cAAc,MAAM,CAACyB,GAG/C,IAAK,IAAIxB,EAAI,EAAGA,EAAI0B,EAAgB1B,IAClCH,CAAU,CAACD,EAAaI,EAAE,CAAG4B,CAAgB,CAAC5B,EAAE,CAIlD,IAAK,IAAIA,EAAI,EAAGA,EAAI2B,EAAa3B,IAC/BH,CAAU,CAACD,EAAa8B,EAAiB1B,EAAE,CAAG6B,CAAa,CAAC7B,EAAE,CAUhE,GAAI,CANYtF,EAAAA,cAAsB,CACpCkF,EACA8B,EACAC,GAMA,OAFAnG,QAAQ,KAAK,CAAC,6BACdd,EAAAA,UAAkB,GACX,KAIT,IAAMoH,EAAYpH,EAAAA,YAAoB,GAChCqH,EAAYrH,EAAAA,YAAoB,GAEtC,GAAIoH,AAAc,IAAdA,GAAmBC,AAAc,IAAdA,EAGrB,OAFAvG,QAAQ,KAAK,CAAC,kBACdd,EAAAA,UAAkB,GACX,KAITmF,EAAa,IAAI7E,WAAWN,EAAAA,MAAAA,CAAAA,MAAqB,EAGjD,IAAMsH,EAAiBC,AADP,IAAIhH,cACW,MAAM,CACnC4E,EAAW,KAAK,CAACiC,EAAWA,EAAYC,IAM1C,OAFArH,EAAAA,UAAkB,GAEXsH,CACT,EDkIyBxD,KAAK0C,SAAS,CAACP,GACIW,GAExC,GAAIR,EACFD,EAAUC,SAAS,CAAG,GACtBD,EAAU7D,IAAI,CAAG8D,OAEjB,MAAM,AAAIvF,MAAM,oBAKlBgF,CAAAA,EAAOf,KAAK,CADIuB,KAAKC,mBAAmBC,mBADrBzC,KAAK0C,SAAS,CAACL,MAGlCX,EAAWgC,QAAQ,CAAG,GACtB,IAAMf,EAAMxF,KAAKF,GAAG,GAGpB,OAFAD,QAAQ4F,GAAG,CAAC,CAAC,gBAAgB,EAAED,EAAM7B,EAAM,EAAE,CAAC,EAC9CkB,EAAOa,MAAM,GACN,EACT,CAEA,MAjKAc,AAAAA,GAAAA,EAAAA,EAAAA,AAAAA,EAAa,KACXvD,GACF,GAsBAwD,AAAAA,GAAAA,EAAAA,EAAAA,AAAAA,EAAQ,UACNxD,IAGAyD,AADe,IAAIC,UADL,OAEPC,MAAM,CAAG,UACd/G,QAAQ4F,GAAG,CAAC,0BAHA,OAIZvD,EAAQ,MAAMvC,MAAM,SAASkH,IAAI,CAAC,AAACC,GAAMA,EAAEC,IAAI,IACjD,EAEA/E,EAAS,MAAMrC,MAAM,UAAUkH,IAAI,CAAC,AAACC,GAAMA,EAAEC,IAAI,KAEjD,MAAMxH,IACN6C,EAAW,IAEX,IAAM4E,EAAU,MAAMrH,MAAM,YAE5BE,QAAQ4F,GAAG,CADS,MAAMuB,EAAQD,IAAI,GAExC,GAEAP,AAAAA,GAAAA,EAAAA,EAAAA,AAAAA,EAAa,KACPrE,KAAaJ,AAAY,KAAZA,KAAkBE,AAAW,KAAXA,KACjCgF,AAzCJ,WACE,IAAM3E,EAAUvB,IACVmG,EAAWzF,IACX0F,EAAQxF,IACRyF,EAAevF,IACfwF,EAAe9F,IAErB,GAAIe,GAAW4E,GAAYC,GAASC,GAAgBC,EAAc,CAChE,IAAMC,EAAcD,EAAaE,YAAY,CACvCC,EACJC,OAAOC,WAAW,CAClBP,EAAMI,YAAY,CAClBH,EAAaG,YAAY,CACzBL,EAASK,YAAY,CACrBD,EACA,EACFhF,CAAAA,EAAQC,KAAK,CAACoF,SAAS,CAAG,CAAC,EAAEH,EAAgB,EAAE,CAAC,AAClD,CACF,GAyBA,GAkHAI,AAAAA,GAAAA,EAAAA,EAAAA,AAAAA,EACGC,EAAAA,EAAI,MAACC,MAAI,OAAEC,AAAAA,GAAAA,EAAAA,EAAAA,AAAAA,EAAA,IAAAhG,AAAY,KAAZA,QAAkBE,AAAW,KAAXA,GAAa,MAAA+F,UAAA,KAAAC,EAAAC,IAAAC,EAAAF,EAAAG,UAAA,CAAAC,EAAAF,EAAAC,UAAA,CAAAE,EAAAC,AAAAF,EAAAG,WAAA,CAAAJ,UAAA,CAAAK,EAAAH,EAAAF,UAAA,CAAAM,GAAAD,EAAAL,UAAA,CAAAO,GAAAC,AAAAF,GAAAN,UAAA,CAAAA,UAAA,CAAAS,GAAAC,AAAAJ,GAAAF,WAAA,CAAAJ,UAAA,CAAAW,GAAAC,AAAAH,GAAAT,UAAA,CAAAI,WAAA,CAAAS,GAAAJ,GAAAL,WAAA,CAAAU,GAAAC,AAAAF,GAAAb,UAAA,CAAAI,WAAA,CAAAY,GAAAH,GAAAT,WAAA,CAAAa,GAAAC,AAAAF,GAAAhB,UAAA,CAAAI,WAAA,CAAAe,GAAAH,GAAAZ,WAAA,CAAAgB,GAAAC,AAAAF,GAAAnB,UAAA,CAAAI,WAAA,CAAAkB,GAAAH,GAAAf,WAAA,CAAAmB,GAAAD,GAAAtB,UAAA,CAAAwB,GAAAD,GAAAnB,WAAA,CAAAqB,GAAAH,GAAAlB,WAAA,CAAAsB,GAAAC,AAAAF,GAAAzB,UAAA,CAAAI,WAAA,CAAAwB,GAAAC,AAAAJ,GAAArB,WAAA,CAAAA,WAAA,CAAA0B,GAAA5B,EAAAE,WAAA,CAAA2B,GAAAD,GAAA9B,UAAA,CA6KjB,OA7KiBD,EAAAiC,gBAAA,UAI1B3G,GAAMD,EAAWC,IAAE4G,AAAAA,GAAAA,EAAAA,EAAAA,AAAAA,EADzBhK,EAAO8H,GAAAkC,AAAAA,GAAAA,EAAAA,EAAAA,AAAAA,EAQL7J,EAAQ6H,GAAAgC,AAAAA,GAAAA,EAAAA,EAAAA,AAAAA,EASDzI,EAAM6G,GAAA6B,AAAAA,GAAAA,EAAAA,EAAAA,AAAAA,EAAA3B,GAAA,MAIH4B,GAAI5B,GAAApG,KAAA,CAAAiI,WAAA,mBAAA7B,GAAApG,KAAA,CAAAiI,WAAA,kBAAAH,AAAAA,GAAAA,EAAAA,EAAAA,AAAAA,EAiBJzJ,EAAQmI,IAAAsB,AAAAA,GAAAA,EAAAA,EAAAA,AAAAA,EAeRvJ,EAASoI,IAAAmB,AAAAA,GAAAA,EAAAA,EAAAA,AAAAA,EAeTjJ,EAASiI,IAAAgB,AAAAA,GAAAA,EAAAA,EAAAA,AAAAA,EAiBTnJ,EAASsI,IAAAa,AAAAA,GAAAA,EAAAA,EAAAA,AAAAA,EAYT7I,EAAamI,IAAAC,GAAAa,UAAA,CAWNpI,EAAsBgI,AAAAA,GAAAA,EAAAA,EAAAA,AAAAA,EAJ7BrJ,EAAQ4I,IAAAS,AAAAA,GAAAA,EAAAA,EAAAA,AAAAA,EAcVvI,EAAa+H,IAAAQ,AAAAA,GAAAA,EAAAA,EAAAA,AAAAA,EAMX3J,EAAWoJ,IAAAO,AAAAA,GAAAA,EAAAA,EAAAA,AAAAA,EAqBb/I,EAAO0I,IAAAK,AAAAA,GAAAA,EAAAA,EAAAA,AAAAA,EAWb3I,EAASwI,IAAAQ,AAAAA,GAAAA,EAAAA,EAAAA,AAAAA,EAAAR,GAAAtC,AAAAA,GAAAA,EAAAA,EAAAA,AAAAA,EAGbC,EAAAA,EAAI,MAACC,MAAI,OAAE7F,AAAW,KAAXA,GAAa,MAAA+F,UAAA,KAAA2C,GAAAzK,IAAA0K,GAAAD,GAAAvC,UAAA,CAEhB,MAFgBsC,AAAAA,GAAAA,EAAAA,EAAAA,AAAAA,EAAAC,GAEpB1I,EAAI2I,IAAAD,EAAA,IAAAR,IAAAO,AAAC,GAADA,EAAAA,EAAAA,AAAAA,EAAAR,GAAAtC,AAAC,GAADA,EAAAA,EAAAA,AAAAA,EAGRC,EAAAA,EAAI,MAACC,MAAI,OAAE/F,AAAY,KAAZA,GAAc,MAAAiG,UAAA,KAAA6C,GAAAC,IAAAC,GAAAF,GAAAzC,UAAA,CAEhB,MAFgBsC,AAAAA,GAAAA,EAAAA,EAAAA,AAAAA,EAAAG,GAErB9I,EAAKgJ,IAAAF,EAAA,IAAAV,IAAAO,AAAC,GAADA,EAAAA,EAAAA,AAAAA,EAAAP,GAAAvC,AAAC,GAADA,EAAAA,EAAAA,AAAAA,EAIPoD,EAAa,KAAA/C,CAAA,GAuB9B,EAEmBgD,AAAAA,GAAAA,EAAAA,EAAAA,AAAAA,EAAA,cE9ZnB,IAAMC,EAAO/H,SAASgI,cAAc,CAAC,OACjCD,CAAAA,GACAE,AAAAA,GAAAA,EAAAA,EAAAA,AAAAA,EAAO,IAAAxD,AAAC,GAADA,EAAAA,EAAAA,AAAAA,EAAOzH,EAAG,IAAK+K,E"}