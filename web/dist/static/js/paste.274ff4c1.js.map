{"version":3,"file":"static/js/paste.274ff4c1.js","sources":["webpack://web/./src/helpers.ts","webpack://web/./src/watermark.tsx","webpack://web/./src/PasteViewBase.tsx","webpack://web/./src/PasteViewNew.tsx","webpack://web/./src/PasteView.tsx","webpack://web/./src/settings.ts","webpack://web/./src/encryption.ts","webpack://web/./src/paste.tsx"],"sourcesContent":["export let exports: WebAssemblyExports;\nexport let memory: WebAssembly.Memory;\nimport { encrypt, decrypt } from \"./encryption.ts\";\n\ninterface WebAssemblyExports {\n  memory: WebAssembly.Memory;\n\n  init(seed: bigint): void;\n\n  allocUint8(length: number): number;\n\n  encryptMessage(\n    buffer_ptr: number,\n    passphrase_len: number,\n    message_len: number,\n  ): boolean;\n\n  resetArena(): void;\n  free(pointer: number, length: number): void;\n\n  getResultPtr(): number;\n  getResultLen(): number;\n  decryptMessage(\n    buffer_ptr: number,\n    passphrase_len: number,\n    encrypted_len: number,\n  ): boolean;\n\n  validatePaste(buffer_ptr: number, paste_len: number): number;\n\n  sendPerson(person_ptr: number): void;\n  receivePerson(buffer_ptr: number, buffer_len: number): number;\n  destroyPerson(person_ptr: number): void;\n\n  parsePaste(\n    buffer_ptr: number,\n    buffer_len: number,\n    twoDimages: boolean,\n  ): number;\n  destroyPaste(paste_ptr: number): void;\n}\n\nconst sizeOfUint32 = Uint32Array.BYTES_PER_ELEMENT;\nconst sizeOfNullByte = Uint8Array.BYTES_PER_ELEMENT;\nconst nullByte = 0x00;\n\nfunction decodeString(pointer: number, length: number) {\n  const slice = new Uint8Array(memory.buffer, pointer, length);\n  return new TextDecoder().decode(slice);\n}\n\nfunction decodeNullTerminatedString(pointer: number) {\n  if (pointer === 0) return \"\";\n\n  // Get current memory buffer size\n  const memSize = memory.buffer.byteLength;\n\n  // Ensure pointer is within bounds\n  if (pointer >= memSize) {\n    console.error(`Invalid pointer: ${pointer} exceeds memory size ${memSize}`);\n    return \"\";\n  }\n\n  // Create a view starting from pointer\n  const slice = new Uint8Array(memory.buffer, pointer);\n\n  // Find null terminator, but limit search to avoid buffer overflow\n  const maxLength = memSize - pointer;\n  const length = slice.findIndex((value: number, index) => {\n    if (index >= maxLength) return true;\n    return value === nullByte;\n  });\n\n  if (length === -1 || length === 0) {\n    return \"\";\n  }\n\n  try {\n    return decodeString(pointer, length);\n  } catch (e) {\n    console.error(`Failed to decode string at pointer ${pointer}:`, e);\n    return \"\";\n  }\n}\n\nfunction encodeNullTerminatedString(string: string) {\n  const buffer = new TextEncoder().encode(string);\n  const sizeOfNullTerminatedString = buffer.length + sizeOfNullByte;\n  const pointer = exports.allocUint8(sizeOfNullTerminatedString);\n  const slice = new Uint8Array(\n    memory.buffer,\n    pointer,\n    sizeOfNullTerminatedString,\n  );\n  slice.set(buffer);\n  slice[buffer.length] = nullByte;\n  return { pointer, length: buffer.length };\n}\n\nasync function initWasm() {\n  const wasmModule = await WebAssembly.instantiateStreaming(fetch(\"/wasm\"), {\n    env: {\n      _throwError(pointer: number, length: number) {\n        const message = decodeString(pointer, length);\n        throw new Error(message);\n      },\n      _consoleLog(pointer: number, length: number) {\n        const message = decodeString(pointer, length);\n        console.log(message);\n      },\n    },\n  });\n  const instance = wasmModule.instance;\n  exports = instance.exports as unknown as WebAssemblyExports;\n  memory = exports.memory;\n\n  const now = BigInt(Date.now());\n  exports.init(now);\n}\n\nfunction validatePaste(paste: string): number {\n  if (!exports || !memory) {\n    return -1;\n  }\n\n  const pasteBuffer = new TextEncoder().encode(paste);\n  const buffer_ptr = exports.allocUint8(pasteBuffer.length);\n  if (!buffer_ptr) {\n    console.error(\"Failed to allocate memory\");\n    return -1;\n  }\n\n  // Get a view of memory\n  const memoryView = new Uint8Array(exports.memory.buffer);\n\n  // Copy the entire buffer\n  memoryView.set(pasteBuffer, buffer_ptr);\n\n  const success = exports.validatePaste(buffer_ptr, pasteBuffer.length);\n  exports.resetArena();\n\n  return success;\n}\n\nfunction alignTo4Bytes(pointer: number): number {\n  return Math.ceil(pointer / 4) * 4;\n}\n\nexport type Move = {\n  name: string;\n  type1: string;\n};\n\nexport type Pokemon = {\n  name: string;\n  nickname: string;\n  item: string;\n  gender: string;\n  item_image: string;\n  pokemon_image: string;\n  moves_len: number;\n  moves: Move[];\n  evs: number[];\n  ivs: number[];\n  lines_count: number;\n  lines: string[];\n  last_stat_ev: string;\n  last_stat_iv: string;\n  type1: string;\n  type2: string;\n  ability: string;\n  level: number;\n  shiny: string;\n  hidden_power: string;\n  tera_type: string;\n  nature: string;\n};\n\nexport type Paste = {\n  title: string;\n  author: string;\n  notes: string;\n  format: string;\n  rental: string;\n  pokemon_len: number;\n  pokemon: Pokemon[];\n  isOts: boolean;\n};\n\nfunction decodeMove(movePtr: number): Move {\n  try {\n    let offset = 0;\n    const namePtr = new Uint32Array(memory.buffer, movePtr, 1);\n    const nameSlice = namePtr[0];\n    const name = decodeNullTerminatedString(nameSlice);\n    offset += sizeOfUint32;\n\n    const type1Ptr = new Uint32Array(memory.buffer, movePtr + offset, 1);\n    const type1Slice = type1Ptr[0];\n    const type1 = decodeNullTerminatedString(type1Slice);\n\n    return { name, type1 };\n  } catch (e) {\n    console.error(e);\n    return { name: \"\", type1: \"\" };\n  }\n}\n\nfunction decodePokemon(pokemonPtr: number): Pokemon {\n  try {\n    const basePtr = pokemonPtr;\n    let offset = 0;\n    const namePtr = new Uint32Array(memory.buffer, basePtr, 1);\n    const nameSlice = namePtr[0];\n    const name = decodeNullTerminatedString(nameSlice);\n    offset += sizeOfUint32;\n\n    const nicknamePtr = new Uint32Array(memory.buffer, basePtr + offset, 1);\n    const nicknameSlice = nicknamePtr[0];\n    const nickname = decodeNullTerminatedString(nicknameSlice);\n    offset += sizeOfUint32;\n\n    const itemPtr = new Uint32Array(memory.buffer, basePtr + offset, 1);\n    const itemSlice = itemPtr[0];\n    const item = decodeNullTerminatedString(itemSlice);\n    offset += sizeOfUint32;\n\n    const genderPtr = new Uint32Array(memory.buffer, basePtr + offset, 1);\n    const genderNum = genderPtr[0];\n    offset += sizeOfUint32;\n\n    const itemImagePtr = new Uint32Array(memory.buffer, basePtr + offset, 1);\n    const itemImageSlice = itemImagePtr[0];\n    const itemImage = decodeNullTerminatedString(itemImageSlice);\n    offset += sizeOfUint32;\n\n    const pokemonImagePtr = new Uint32Array(memory.buffer, basePtr + offset, 1);\n    const pokemonImageSlice = pokemonImagePtr[0];\n    const pokemonImage = decodeNullTerminatedString(pokemonImageSlice);\n    offset += sizeOfUint32;\n\n    const movesLenPtr = new Uint32Array(memory.buffer, basePtr + offset, 1);\n    const moves_len = movesLenPtr[0];\n    offset += sizeOfUint32;\n\n    const movesArrayPtrSlice = new Uint32Array(\n      memory.buffer,\n      basePtr + offset,\n      1,\n    );\n    const movesArrayPointer = movesArrayPtrSlice[0];\n\n    const movesArray = new Uint32Array(\n      memory.buffer,\n      movesArrayPointer,\n      moves_len,\n    );\n\n    const moves: Move[] = [];\n    if (moves_len > 0) {\n      for (let i = 0; i < moves_len; i++) {\n        const currentMovePtr = movesArray[i];\n        try {\n          const move = decodeMove(currentMovePtr);\n          moves.push(move);\n        } catch (e) {\n          console.error(`Error decoding move at index ${i}:`, e);\n        }\n      }\n    }\n    offset += sizeOfUint32;\n\n    let gender = \"\";\n    if (genderNum === 77) {\n      gender = \"M\";\n    } else if (genderNum === 70) {\n      gender = \"F\";\n    }\n\n    const evs: number[] = [];\n    for (let i = 0; i < 6; i++) {\n      const evPtr = new Uint32Array(memory.buffer, basePtr + offset, 1);\n      const evValue = evPtr[0];\n      evs.push(evValue);\n      offset += sizeOfUint32;\n    }\n\n    const ivs: number[] = [];\n    for (let i = 0; i < 6; i++) {\n      const ivPtr = new Uint32Array(memory.buffer, basePtr + offset, 1);\n      const ivValue = ivPtr[0];\n      ivs.push(ivValue);\n      offset += sizeOfUint32;\n    }\n\n    const linesLenPointer = basePtr + offset;\n    const linesLenSlice = new Uint32Array(memory.buffer, linesLenPointer, 1);\n    const lines_len = linesLenSlice[0];\n    offset += sizeOfUint32;\n\n    const lines: string[] = [];\n    if (lines_len > 0) {\n      // Decode items array pointer - ensure 4-byte alignment\n      const linesArrayPtrPointer = basePtr + offset;\n      const linesArrayPtrSlice = new Uint32Array(\n        memory.buffer,\n        linesArrayPtrPointer,\n        1,\n      );\n      const linesArrayPointer = linesArrayPtrSlice[0];\n\n      // Decode each line - ensure the pointer is properly aligned\n      const alignedLinesArrayPointer = alignTo4Bytes(linesArrayPointer);\n      const linesArraySlice = new Uint32Array(\n        memory.buffer,\n        alignedLinesArrayPointer,\n        lines_len,\n      );\n\n      for (let i = 0; i < lines_len; i++) {\n        const linePtr = linesArraySlice[i];\n        const line = decodeNullTerminatedString(linePtr);\n        lines.push(line);\n      }\n\n      offset += sizeOfUint32 * lines_len;\n    } else {\n      offset += sizeOfUint32;\n    }\n\n    const lastStatEvPtr = new Uint32Array(memory.buffer, basePtr + offset, 1);\n    const lastStatEvSlice = lastStatEvPtr[0];\n    const last_stat_ev = decodeNullTerminatedString(lastStatEvSlice);\n    offset += sizeOfUint32;\n\n    const lastStatIvPtr = new Uint32Array(memory.buffer, basePtr + offset, 1);\n    const lastStatIvSlice = lastStatIvPtr[0];\n    const last_stat_iv = decodeNullTerminatedString(lastStatIvSlice);\n    offset += sizeOfUint32;\n\n    const type1Ptr = new Uint32Array(memory.buffer, basePtr + offset, 1);\n    const type1Slice = type1Ptr[0];\n    const type1 = decodeNullTerminatedString(type1Slice);\n    offset += sizeOfUint32;\n\n    const type2Ptr = new Uint32Array(memory.buffer, basePtr + offset, 1);\n    const type2Slice = type2Ptr[0];\n    const type2 = decodeNullTerminatedString(type2Slice);\n    offset += sizeOfUint32;\n\n    const abilityPtr = new Uint32Array(memory.buffer, basePtr + offset, 1);\n    const abilitySlice = abilityPtr[0];\n    const ability = decodeNullTerminatedString(abilitySlice);\n    offset += sizeOfUint32;\n\n    const levelPtr = new Uint32Array(memory.buffer, basePtr + offset, 1);\n    const level = levelPtr[0];\n    offset += sizeOfUint32;\n\n    const shinyPtr = new Uint32Array(memory.buffer, basePtr + offset, 1);\n    const shinySlice = shinyPtr[0];\n    const shiny = decodeNullTerminatedString(shinySlice);\n    offset += sizeOfUint32;\n\n    const hpPointer = new Uint32Array(memory.buffer, basePtr + offset, 1);\n    const hpSlice = hpPointer[0];\n    const hidden_power = decodeNullTerminatedString(hpSlice);\n    offset += sizeOfUint32;\n\n    const teraTypePointer = new Uint32Array(memory.buffer, basePtr + offset, 1);\n    const teraTypeSlice = teraTypePointer[0];\n    const tera_type = decodeNullTerminatedString(teraTypeSlice);\n    offset += sizeOfUint32;\n\n    const naturePointer = new Uint32Array(memory.buffer, basePtr + offset, 1);\n    const natureSlice = naturePointer[0];\n    const nature = decodeNullTerminatedString(natureSlice);\n    offset += sizeOfUint32;\n\n    return {\n      name,\n      nickname,\n      item,\n      gender,\n      item_image: itemImage,\n      pokemon_image: pokemonImage,\n      moves_len: moves_len,\n      moves,\n      evs,\n      ivs,\n      lines_count: lines_len,\n      lines,\n      last_stat_ev,\n      last_stat_iv,\n      type1,\n      type2,\n      ability,\n      level,\n      shiny,\n      hidden_power,\n      tera_type,\n      nature,\n    };\n  } catch (e) {\n    console.error(e);\n    return {\n      name: \"\",\n      nickname: \"\",\n      item: \"\",\n      gender: \"\",\n      item_image: \"\",\n      pokemon_image: \"\",\n      moves_len: 0,\n      moves: [],\n      evs: [],\n      ivs: [],\n      lines_count: 0,\n      lines: [],\n      last_stat_ev: \"\",\n      last_stat_iv: \"\",\n      type1: \"\",\n      type2: \"\",\n      ability: \"\",\n      level: 100,\n      shiny: \"\",\n      hidden_power: \"\",\n      tera_type: \"\",\n      nature: \"\",\n    };\n  }\n}\n\nfunction decodePaste(pastePtr: number): Paste {\n  try {\n    // Access the header pointer\n    const titleSlice = new Uint32Array(memory.buffer, pastePtr, 1);\n    const titlePtr = titleSlice[0];\n    const title = decodeNullTerminatedString(titlePtr);\n\n    const authorSlice = new Uint32Array(\n      memory.buffer,\n      pastePtr + sizeOfUint32,\n      1,\n    );\n    const authorPtr = authorSlice[0];\n    const author = decodeNullTerminatedString(authorPtr);\n\n    const notesSlice = new Uint32Array(\n      memory.buffer,\n      pastePtr + sizeOfUint32 * 2,\n      1,\n    );\n    const notesPtr = notesSlice[0];\n    const notes = decodeNullTerminatedString(notesPtr);\n\n    const formatSlice = new Uint32Array(\n      memory.buffer,\n      pastePtr + sizeOfUint32 * 3,\n      1,\n    );\n    const formatPtr = formatSlice[0];\n    const format = decodeNullTerminatedString(formatPtr);\n\n    const rentalSlice = new Uint32Array(\n      memory.buffer,\n      pastePtr + sizeOfUint32 * 4,\n      1,\n    );\n    const rentalPtr = rentalSlice[0];\n    const rental = decodeNullTerminatedString(rentalPtr);\n\n    const pokemonLenPtr = pastePtr + sizeOfUint32 * 5;\n    const pokemonLenSlice = new Uint32Array(memory.buffer, pokemonLenPtr, 1);\n    const pokemon_len = pokemonLenSlice[0];\n\n    // Decode items array pointer - ensure 4-byte alignment\n    const pokemonArrayPtrPointer = alignTo4Bytes(pastePtr + sizeOfUint32 * 6);\n    const pokemonArrayPtrSlice = new Uint32Array(\n      memory.buffer,\n      pokemonArrayPtrPointer,\n      1,\n    );\n    const pokemonArrayPointer = pokemonArrayPtrSlice[0];\n\n    // Decode each item - ensure the pointer is properly aligned\n    const pokemon: Pokemon[] = [];\n    const alignedPokemonArrayPointer = alignTo4Bytes(pokemonArrayPointer);\n    const pokemonArraySlice = new Uint32Array(\n      memory.buffer,\n      alignedPokemonArrayPointer,\n      pokemon_len,\n    );\n\n    for (let i = 0; i < pokemon_len; i++) {\n      const pokemonPtr = pokemonArraySlice[i];\n      const mon = decodePokemon(pokemonPtr);\n      console.log(mon);\n      pokemon.push(mon);\n    }\n\n    const isOtsOffset = pokemonArrayPtrPointer + sizeOfUint32;\n    const isOtsValue = new Uint32Array(memory.buffer, isOtsOffset, 1)[0];\n    const isOts = isOtsValue === 1;\n\n    const paste = {\n      title,\n      author,\n      notes,\n      format,\n      rental,\n      pokemon_len,\n      pokemon,\n      isOts,\n    };\n\n    return paste;\n  } finally {\n    exports.destroyPaste(pastePtr);\n  }\n}\n\nexport function parsePaste(data: string, twoDimages: boolean): Paste | null {\n  if (!exports || !memory) {\n    return null;\n  }\n\n  const { pointer, length } = encodeNullTerminatedString(data);\n\n  const pastePtr = exports.parsePaste(pointer, length, twoDimages);\n  const paste = decodePaste(pastePtr);\n\n  exports.resetArena();\n\n  return paste;\n}\n\nfunction utf8ToBase64(str: string | undefined) {\n  // Encode to UTF-8 bytes, then to base64\n  return btoa(String.fromCharCode(...new TextEncoder().encode(str)));\n}\n\nfunction base64ToUtf8(b64: string) {\n  // Decode base64 to bytes, then decode as UTF-8\n  return new TextDecoder().decode(\n    Uint8Array.from(atob(b64), (c) => c.charCodeAt(0)),\n  );\n}\n\nexport {\n  encrypt,\n  initWasm,\n  decrypt,\n  validatePaste,\n  utf8ToBase64,\n  base64ToUtf8,\n};\n","import { createEffect, createSignal, onMount } from \"solid-js\";\nimport logo from \"../public/logo/large_logo_cropped.webp\";\n\nfunction Watermark() {\n  const [isFixed, setIsFixed] = createSignal(false);\n  const [dir, setDir] = createSignal(\"shrink\");\n  const [prevSize, setPrevSize] = createSignal(window.innerWidth);\n  const [height, setHeight] = createSignal(\"50px\");\n  const [width, setWidth] = createSignal(\"100px\");\n  const [bottom, setBottom] = createSignal(\"10px\");\n  const [padding, setPadding] = createSignal(\"0px\");\n\n  function check() {\n    if (window.innerWidth <= 450) {\n      setWidth(\"75px\");\n      setHeight(\"35px\");\n      setBottom(\"55px\");\n    } else if (window.innerWidth <= 1290) {\n      setWidth(\"75px\");\n      setHeight(\"35px\");\n      setBottom(\"60px\");\n    } else {\n      setBottom(\"20px\");\n      setPadding(\"15px\");\n    }\n    if (window.innerWidth <= 1290) {\n      if (dir() === \"shrink\") {\n        setIsFixed(true);\n      }\n    } else {\n      setIsFixed(false);\n    }\n  }\n\n  onMount(() => {\n    window.onresize = () => {\n      if (window.innerWidth < prevSize()) {\n        setDir(\"shrink\");\n        setPrevSize(window.innerWidth);\n      } else {\n        setDir(\"grow\");\n        setPrevSize(window.innerWidth);\n      }\n      check();\n    };\n    check();\n  });\n\n  createEffect(() => {\n    check();\n  });\n\n  // return (\n  //   <div\n  //     id=\"NOCOPY\"\n  //     style={{\n  //       position: isFixed() ? \"fixed\" : \"relative\",\n  //       display: \"flex\",\n  //       \"flex-direction\": isFixed() ? \"column\" : \"row\",\n  //       \"font-size\": \"32px\",\n  //       bottom: \"30px\",\n  //       right: \"10px\",\n  //       // color: 'rgba(255, 255, 255, 0.6)',\n  //       color: \"rgba(251, 173, 255, 0.75)\",\n  //       \"pointer-events\": \"none\",\n  //       \"z-index\": 9999,\n  //       \"transform-origin\": \"bottom right\",\n  //       \"user-select\": \"none\",\n  //       \"-webkit-user-select\": \"none\",\n  //       \"-moz-user-select\": \"none\",\n  //       \"-ms-user-select\": \"none\",\n  //       \"align-items\": \"center\",\n  //       \"white-space\": \"nowrap\",\n  //       \"margin-top\": \"20px\",\n  //       \"margin-left\": \"20px\",\n  //     }}\n  //   >\n  //     <div class=\"flex flex-row justify-center align-middle items-center\">\n  //       <span>PokeBin</span>\n  //       <img\n  //         class=\"ml-1\"\n  //         src=\"/assets/favicon/android-chrome-192x192.png\"\n  //         style={{\n  //           height: \"32px\",\n  //           width: \"32px\",\n  //           \"margin-right\": \"4px\",\n  //           scale: 1.0,\n  //           opacity: 0.75,\n  //           top: \"-2px\",\n  //         }}\n  //         alt=\"It's Spheal!\"\n  //       />\n  //     </div>\n  //     <PatreonButton />\n  //   </div>\n  // );\n  return (\n    <div\n      id=\"NOCOPY\"\n      style={{\n        position: isFixed() ? \"fixed\" : \"relative\",\n        display: \"flex\",\n        bottom: bottom(),\n        \"padding-bottom\": padding(),\n        right: isFixed() ? \"30px\" : undefined, // Only set right when fixed\n        left: isFixed() ? undefined : \"30px\", // Only set left when not fixed\n        \"flex-direction\": isFixed() ? \"column\" : \"row\",\n        \"pointer-events\": \"none\",\n        \"z-index\": 9999,\n        \"transform-origin\": \"bottom right\",\n        \"user-select\": \"none\",\n        \"-webkit-user-select\": \"none\",\n        \"-moz-user-select\": \"none\",\n        \"-ms-user-select\": \"none\",\n        \"align-items\": \"center\",\n        \"white-space\": \"nowrap\",\n        width: \"100px\",\n        height: \"0px\",\n      }}\n    >\n      <img\n        src={logo}\n        style={{\n          height: height(),\n          width: width(),\n          transform: \"scale(1.5)\", // 1.5x bigger visually\n        }}\n        class=\"border-none outline-none shadow-none\"\n        alt=\"PokeBin Logo\"\n      />\n    </div>\n  );\n}\n\nexport default Watermark;\n","import type { Paste } from \"./helpers\";\nimport Watermark from \"./watermark\";\nimport { type Accessor, For, Show } from \"solid-js\";\nimport type { Settings } from \"./settings\";\n\ntype Props = {\n  paste: Accessor<Paste | null>;\n  setSelectable: (value: boolean, id: string) => void;\n  setShowNotes: (value: boolean) => void;\n  showNotes: () => boolean;\n  makeOpaqueOnFocus: () => void;\n  makeTransparentOnMouseover: () => void;\n  notesWidth: () => string;\n  setNotesOpacity: (value: number) => void;\n  notesOpacity: () => number;\n  copyPaste: () => void;\n  setShowModal: (value: boolean) => void;\n  showModal: () => boolean;\n  sett: () => Settings;\n  setSett: (value: Settings) => void;\n  isEncrypted: () => boolean;\n  handleCreateOts: () => void;\n};\n\nexport default function PasteViewBase(props: Props) {\n  const paste = props.paste;\n  const setSelectable = props.setSelectable;\n  const setShowNotes = props.setShowNotes;\n  const showNotes = props.showNotes;\n  const setNotesOpacity = props.setNotesOpacity;\n  const makeOpaqueOnFocus = props.makeOpaqueOnFocus;\n  const makeTransparentOnMouseover = props.makeTransparentOnMouseover;\n  const notesWidth = props.notesWidth;\n  const notesOpacity = props.notesOpacity;\n  const copyPaste = props.copyPaste;\n  const setShowModal = props.setShowModal;\n  const showModal = props.showModal;\n  const sett = props.sett;\n  const setSett = props.setSett;\n  const isEncrypted = props.isEncrypted;\n  const handleCreateOts = props.handleCreateOts;\n\n  return (\n    <Show when={paste()}>\n      {(currentPaste) => (\n        <div class=\"content-wrapper\">\n          <div class=\"side-content\" id=\"sidebar\">\n            <div class=\"sidebar-inner md:ml-10 md:mr-2\">\n              <Show\n                when={\n                  currentPaste().title !== \"\" ||\n                  currentPaste().author !== \"\" ||\n                  currentPaste().format !== \"\" ||\n                  currentPaste().rental !== \"\"\n                }\n              >\n                <div\n                  role=\"note\"\n                  class=\"metadata\"\n                  id=\"metadata\"\n                  style={{\n                    \"user-select\": \"none\",\n                    \"min-width\": \"125px\",\n                  }}\n                  onMouseOver={() => setSelectable(true, \"metadata\")}\n                  onFocus={() => setSelectable(true, \"metadata\")}\n                  onMouseOut={() => setSelectable(false, \"metadata\")}\n                  onBlur={() => setSelectable(false, \"metadata\")}\n                >\n                  <Show when={currentPaste().title !== \"\"}>\n                    <h1\n                      class=\"text-[#c2a8d4] text-2xl font-semibold\"\n                      id=\"title\"\n                      style={{ \"user-select\": \"none\" }}\n                      aria-label={currentPaste().title}\n                      innerHTML={currentPaste().title}\n                    />\n                  </Show>\n                  <Show when={currentPaste().author !== \"\"}>\n                    <p\n                      class=\"text-base\"\n                      id=\"author\"\n                      style={{ \"user-select\": \"none\" }}\n                      innerHTML={`By: ${currentPaste().author}`}\n                    />\n                  </Show>\n                  <Show when={currentPaste().format !== \"\"}>\n                    <p\n                      class=\"text-base\"\n                      id=\"format\"\n                      style={{ \"user-select\": \"none\" }}\n                    >\n                      Format: {currentPaste().format}\n                    </p>\n                  </Show>\n                  <Show when={currentPaste().rental !== \"\"}>\n                    <p\n                      class=\"text-base\"\n                      id=\"rental\"\n                      style={{ \"user-select\": \"none\" }}\n                    >\n                      Rental: {currentPaste().rental}\n                    </p>\n                  </Show>\n                </div>\n              </Show>\n              <div class=\"notes-section my-1\">\n                <Show when={currentPaste().notes !== \"\"}>\n                  <button\n                    class=\"cursor-pointer h-[30px] font-bold bg-[#c2a8d4] hover:bg-[#9770b6] text-black w-[175px] mt-1 py-1 border-none rounded\"\n                    type=\"button\"\n                    onClick={() => {\n                      setShowNotes(!showNotes());\n                      const notes =\n                        document.getElementsByClassName(\"notes-content\");\n                      if (notes.length > 0) {\n                        const notes_obj = notes[0] as HTMLElement;\n                        if (notes_obj.getBoundingClientRect().top < 0) {\n                          notes_obj.style.top = \"0px\";\n                        }\n                      }\n\n                      if (showNotes()) {\n                        setNotesOpacity(1.0);\n                      }\n                    }}\n                  >\n                    {showNotes() ? \"Hide notes\" : \"Show notes\"}\n                  </button>\n                  <Show when={showNotes()}>\n                    <div\n                      role=\"note\"\n                      class=\"notes-content bg-zinc-600 border border-ccc p-5 rounded shadow-lg z-20\"\n                      onMouseOver={() => {\n                        makeOpaqueOnFocus();\n                        setSelectable(true, \"notes\");\n                      }}\n                      onFocus={() => {\n                        makeOpaqueOnFocus();\n                        setSelectable(true, \"notes\");\n                      }}\n                      onMouseOut={() => {\n                        makeTransparentOnMouseover();\n                        setSelectable(false, \"notes\");\n                      }}\n                      onBlur={() => {\n                        makeTransparentOnMouseover();\n                        setSelectable(false, \"notes\");\n                      }}\n                      style={{\n                        width: notesWidth(),\n                        opacity: notesOpacity(),\n                        \"user-select\": \"none\",\n                        \"z-index\": 2,\n                      }}\n                    >\n                      <p\n                        id=\"notes\"\n                        class=\"!text-white\"\n                        innerHTML={currentPaste().notes.replace(\n                          /\\n/g,\n                          \"<br />\",\n                        )}\n                      />\n                    </div>\n                  </Show>\n                </Show>\n              </div>\n            </div>\n            <div id=\"buttons\">\n              <button\n                style={{ \"user-select\": \"none\" }}\n                type=\"submit\"\n                onClick={copyPaste}\n                class=\"cursor-pointer w-[175px] h-[30px] copy-button font-bold bg-[#c2a8d4] hover:bg-[#9770b6] text-black py-1 rounded\"\n              >\n                Copy\n              </button>\n              <button\n                class=\"cursor-pointer h-[30px] font-bold bg-[#c2a8d4] hover:bg-[#9770b6] text-black w-[175px] py-1 rounded\"\n                style={{ \"user-select\": \"none\" }}\n                type=\"button\"\n                onClick={() => setShowModal(true)}\n              >\n                Settings\n              </button>\n            </div>\n          </div>\n          <div class=\"main\">\n            <For each={currentPaste().pokemon}>\n              {(pokemon) => {\n                return (\n                  <article>\n                    <div class=\"img mr-2\">\n                      <Show when={pokemon.item_image !== \"\"}>\n                        <span class=\"img-item\" style={pokemon.item_image} />\n                      </Show>\n                      <img\n                        class=\"img-pokemon\"\n                        src={pokemon.pokemon_image}\n                        alt={pokemon.name}\n                      />\n                    </div>\n\n                    <div class=\"paste\">\n                      <div id=\"mon_title\">\n                        <Show\n                          when={pokemon.nickname !== \"\"}\n                          fallback={\n                            <>\n                              <span\n                                class={`type-${pokemon.type1} inline-element`}\n                              >\n                                {pokemon.name}\n                              </span>\n                              <Show when={pokemon.gender !== \"\"}>\n                                <span\n                                  innerHTML={` (<span class=\"inline-element gender-${pokemon.gender}\">${pokemon.gender}</span>)`}\n                                />\n                              </Show>\n                            </>\n                          }\n                        >\n                          {pokemon.nickname} (\n                          <span class={`type-${pokemon.type1} inline-element`}>\n                            {pokemon.name}\n                          </span>\n                          )\n                          <Show when={pokemon.gender !== \"\"}>\n                            <span\n                              innerHTML={` (<span class=\"inline-element gender-${pokemon.gender}\">${pokemon.gender}</span>)`}\n                            />\n                          </Show>\n                        </Show>\n                        <Show when={pokemon.item !== \"\"}>\n                          <span> @ </span>\n                          <span\n                            class=\"inline-element\"\n                            innerHTML={`${pokemon.item.trim()}`}\n                          />\n                        </Show>\n                      </div>\n\n                      <Show when={pokemon.ability !== \"\"}>\n                        <div class=\"attribute-line\">\n                          <span class=\"attr\">Ability:</span> {pokemon.ability}\n                        </div>\n                      </Show>\n                      <Show when={pokemon.level !== 100}>\n                        <div class=\"attribute-line\">\n                          <span class=\"attr\">Level:</span> {pokemon.level}\n                        </div>\n                      </Show>\n                      <Show when={pokemon.shiny !== \"\"}>\n                        <div class=\"attribute-line\">\n                          <span class=\"attr\">Shiny:</span> {pokemon.shiny}\n                        </div>\n                      </Show>\n                      <Show when={pokemon.hidden_power !== \"\"}>\n                        <div class=\"attribute-line\">\n                          <span class=\"attr\">Hidden Power:</span>{\" \"}\n                          <span class={`type-${pokemon.hidden_power}`}>\n                            {pokemon.hidden_power}\n                          </span>\n                        </div>\n                      </Show>\n                      <Show when={pokemon.tera_type !== \"\"}>\n                        <div class=\"attribute-line\">\n                          <span class=\"attr\">Tera Type:</span>{\" \"}\n                          <span class={`type-${pokemon.tera_type}`}>\n                            {pokemon.tera_type}\n                          </span>\n                        </div>\n                      </Show>\n                      <Show when={pokemon.last_stat_ev !== \"\"}>\n                        <div class=\"attribute-line\">\n                          EVs:&nbsp;\n                          <Show when={pokemon.evs[0] !== 0}>\n                            <span class=\"stat-hp\">{pokemon.evs[0]} HP</span>\n                            <Show when={pokemon.last_stat_ev !== \"hp\"}>/</Show>\n                          </Show>\n                          <Show when={pokemon.evs[1] !== 0}>\n                            <span class=\"stat-atk\">{pokemon.evs[1]} Atk</span>\n                            <Show when={pokemon.last_stat_ev !== \"atk\"}>/</Show>\n                          </Show>\n                          <Show when={pokemon.evs[2] !== 0}>\n                            <span class=\"stat-def\">{pokemon.evs[2]} Def</span>\n                            <Show when={pokemon.last_stat_ev !== \"def\"}>/</Show>\n                          </Show>\n                          <Show when={pokemon.evs[3] !== 0}>\n                            <span class=\"stat-spa\">{pokemon.evs[3]} SpA</span>\n                            <Show when={pokemon.last_stat_ev !== \"spa\"}>/</Show>\n                          </Show>\n                          <Show when={pokemon.evs[4] !== 0}>\n                            <span class=\"stat-spd\">{pokemon.evs[4]} SpD</span>\n                            <Show when={pokemon.last_stat_ev !== \"spd\"}>/</Show>\n                          </Show>\n                          <Show when={pokemon.evs[5] !== 0}>\n                            <span class=\"stat-spe\">{pokemon.evs[5]} Spe</span>\n                          </Show>\n                        </div>\n                      </Show>\n\n                      <Show when={pokemon.nature !== \"\"}>\n                        <div class=\"attribute-line\">\n                          {pokemon.nature}\n                          <Show when={!pokemon.nature.endsWith(\" Nature\")}>\n                            <span> Nature</span>\n                          </Show>\n                        </div>\n                      </Show>\n                      <Show when={pokemon.last_stat_iv !== \"\"}>\n                        <div class=\"attribute-line\">\n                          IVs:&nbsp;\n                          <Show when={pokemon.ivs[0] !== 31}>\n                            {pokemon.ivs[0]} HP\n                            <Show when={pokemon.last_stat_iv !== \"hp\"}>\n                              &nbsp;/&nbsp;\n                            </Show>\n                          </Show>\n                          <Show when={pokemon.ivs[1] !== 31}>\n                            {pokemon.ivs[1]} Atk\n                            <Show when={pokemon.last_stat_iv !== \"atk\"}>\n                              &nbsp;/&nbsp;\n                            </Show>\n                          </Show>\n                          <Show when={pokemon.ivs[2] !== 31}>\n                            {pokemon.ivs[2]} Def\n                            <Show when={pokemon.last_stat_iv !== \"def\"}>\n                              &nbsp;/&nbsp;\n                            </Show>\n                          </Show>\n                          <Show when={pokemon.ivs[3] !== 31}>\n                            {pokemon.ivs[3]} SpA\n                            <Show when={pokemon.last_stat_iv !== \"spa\"}>\n                              &nbsp;/&nbsp;\n                            </Show>\n                          </Show>\n                          <Show when={pokemon.ivs[4] !== 31}>\n                            {pokemon.ivs[4]} SpD\n                            <Show when={pokemon.last_stat_iv !== \"spd\"}>\n                              &nbsp;/&nbsp;\n                            </Show>\n                          </Show>\n                          <Show when={pokemon.ivs[5] !== 31}>\n                            {pokemon.ivs[5]} Spe\n                          </Show>\n                        </div>\n                      </Show>\n\n                      <For each={pokemon.moves}>\n                        {(move) => (\n                          <div class=\"move-line\">\n                            <Show\n                              when={sett().moveColors}\n                              fallback={\n                                <>\n                                  <span class={`type-${move.type1}`}>-</span>\n                                  <span style={{ color: \"white\" }}>\n                                    {\" \"}\n                                    {move.name}\n                                  </span>\n                                </>\n                              }\n                            >\n                              <span class={`type-${move.type1}`}>\n                                - {move.name}\n                              </span>\n                            </Show>\n                          </div>\n                        )}\n                      </For>\n                      <br\n                        class=\"display-none\"\n                        style={{ \"line-height\": \"0px\" }}\n                      />\n                      <br\n                        class=\"display-none\"\n                        style={{ \"line-height\": \"0px\" }}\n                      />\n                    </div>\n                  </article>\n                );\n              }}\n            </For>\n          </div>\n          <br />\n          <Watermark />\n          <Show when={showModal()}>\n            <div\n              class=\"fixed inset-0 bg-black/20 backdrop-blur-sm flex items-center justify-center z-100 !text-white\"\n              onClick={() => setShowModal(false)}\n              onKeyDown={(e) => e.stopPropagation()}\n              tabindex=\"-1\"\n            >\n              <div\n                class=\"relative bg-zinc-800 rounded-lg p-6 max-w-lg w-full max-h-[90vh] overflow-y-auto shadow-lg\"\n                onClick={(e) => e.stopPropagation()}\n                onKeyDown={() => {}}\n                tabindex=\"0\"\n              >\n                <button\n                  type=\"button\"\n                  class=\"absolute top-2 right-2 text-gray-500 hover:text-gray-700 dark:hover:text-gray-300\"\n                  onClick={() => setShowModal(false)}\n                  aria-label=\"Close modal\"\n                >\n                  ✕\n                </button>\n                <h2 class=\"text-xl font-semibold mb-4\">Settings</h2>\n                <div class=\"flex flex-col gap-2 w-60\">\n                  <div class=\"flex flex-row items-center gap-4\">\n                    <label\n                      for=\"newFormat\"\n                      class=\"font-medium cursor-pointer w-44\"\n                    >\n                      New paste format\n                    </label>\n                    <input\n                      id=\"newFormat\"\n                      name=\"newFormat\"\n                      type=\"checkbox\"\n                      class=\"align-middle\"\n                      checked={sett().newFormat}\n                      onChange={(e) => {\n                        const value = JSON.stringify(e.target.checked);\n                        localStorage.setItem(\"newFormat\", value);\n                        setSett({\n                          ...sett(),\n                          newFormat: e.target.checked,\n                        });\n                      }}\n                    />\n                  </div>\n                  <div class=\"flex flex-row items-center gap-4\">\n                    <label for=\"colors\" class=\"font-medium cursor-pointer w-44\">\n                      Move colors\n                    </label>\n                    <input\n                      id=\"colors\"\n                      name=\"colors\"\n                      type=\"checkbox\"\n                      class=\"align-middle\"\n                      checked={sett().moveColors}\n                      onChange={(e) => {\n                        const value = JSON.stringify(e.target.checked);\n                        localStorage.setItem(\"moveColors\", value);\n                        setSett({\n                          ...sett(),\n                          moveColors: e.target.checked,\n                        });\n                      }}\n                    />\n                  </div>\n                  <div class=\"flex flex-row items-center gap-4\">\n                    <label\n                      for=\"twoDImages\"\n                      class=\"font-medium cursor-pointer w-44\"\n                    >\n                      2D images\n                    </label>\n                    <input\n                      id=\"twoDImages\"\n                      name=\"twoDImages\"\n                      type=\"checkbox\"\n                      class=\"align-middle\"\n                      checked={sett().twoDImages}\n                      onChange={(e) => {\n                        const value = JSON.stringify(e.target.checked);\n                        localStorage.setItem(\"twoDImages\", value);\n                        setSett({\n                          ...sett(),\n                          twoDImages: e.target.checked,\n                        });\n                      }}\n                    />\n                  </div>\n                  <div class=\"flex flex-row items-center gap-4\">\n                    <label\n                      for=\"darkMode\"\n                      class=\"font-medium cursor-pointer max-w-44\"\n                    >\n                      Dark Mode\n                    </label>\n                    <input\n                      id=\"darkMode\"\n                      name=\"darkMode\"\n                      type=\"checkbox\"\n                      class=\"align-middle\"\n                      checked={sett().darkMode}\n                      onChange={(e) => {\n                        const value = JSON.stringify(e.target.checked);\n                        localStorage.setItem(\"darkMode\", value);\n                        setSett({\n                          ...sett(),\n                          darkMode: e.target.checked,\n                        });\n                      }}\n                    />\n                  </div>\n                </div>\n                <Show when={!currentPaste().isOts && !isEncrypted()}>\n                  <div class=\"flex flex-row gap-4 align-middle mt-2\">\n                    <button\n                      type=\"button\"\n                      onClick={handleCreateOts}\n                      class=\"bg-[#c2a8d4] hover:bg-[#9770b6] text-black px-4 py-0 rounded text-base font-bold\"\n                    >\n                      Create OTS\n                    </button>\n                  </div>\n                </Show>\n              </div>\n            </div>\n          </Show>\n        </div>\n      )}\n    </Show>\n  );\n}\n","import type { Paste } from \"./helpers\";\nimport Watermark from \"./watermark\";\nimport { type Accessor, For, Show } from \"solid-js\";\nimport type { Settings } from \"./settings\";\n\ntype Props = {\n  paste: Accessor<Paste | null>;\n  setSelectable: (value: boolean, id: string) => void;\n  setShowNotes: (value: boolean) => void;\n  showNotes: () => boolean;\n  makeOpaqueOnFocus: () => void;\n  makeTransparentOnMouseover: () => void;\n  notesWidth: () => string;\n  setNotesOpacity: (value: number) => void;\n  notesOpacity: () => number;\n  copyPaste: () => void;\n  setShowModal: (value: boolean) => void;\n  showModal: () => boolean;\n  sett: () => Settings;\n  setSett: (value: Settings) => void;\n  isEncrypted: () => boolean;\n  handleCreateOts: () => void;\n};\n\n// 0 = hp, 1 = atk, 2 = def, 3 = spa, 4 = spd, 5 = spe\n// const natureMap: { [key: string]: number[] | null } = {\n//   // Neutral\n//   Hardy: null,\n//   Docile: null,\n//   Bashful: null,\n//   Quirky: null,\n//   Serious: null,\n//   // Attack decreasing\n//   Bold: [2, 1],\n//   Modest: [3, 1],\n//   Calm: [4, 1],\n//   Timid: [5, 1],\n//   // Defense decreasing\n//   Lonely: [1, 2],\n//   Mild: [3, 2],\n//   Gentle: [4, 2],\n//   Hasty: [5, 2],\n//   // SpA decreasing\n//   Adamant: [1, 3],\n//   Impish: [2, 3],\n//   Careful: [4, 3],\n//   Jolly: [5, 3],\n//   // SpD decreasing\n//   Naughty: [1, 4],\n//   Lax: [2, 4],\n//   Rash: [3, 4],\n//   Naive: [5, 4],\n//   // Spe decreasing\n//   Brave: [1, 5],\n//   Relaxed: [2, 5],\n//   Quiet: [3, 5],\n//   Sassy: [4, 5],\n// };\n\nexport default function PasteViewNew(props: Props) {\n  const paste = props.paste;\n  const setSelectable = props.setSelectable;\n  const setShowNotes = props.setShowNotes;\n  const showNotes = props.showNotes;\n  const setNotesOpacity = props.setNotesOpacity;\n  const makeOpaqueOnFocus = props.makeOpaqueOnFocus;\n  const makeTransparentOnMouseover = props.makeTransparentOnMouseover;\n  const notesWidth = props.notesWidth;\n  const notesOpacity = props.notesOpacity;\n  const copyPaste = props.copyPaste;\n  const setShowModal = props.setShowModal;\n  const showModal = props.showModal;\n  const sett = props.sett;\n  const setSett = props.setSett;\n  const isEncrypted = props.isEncrypted;\n  const handleCreateOts = props.handleCreateOts;\n\n  return (\n    <Show when={paste()}>\n      {(currentPaste) => (\n        <div class=\"content-wrapper\">\n          <div class=\"side-content\" id=\"sidebar\">\n            <div class=\"sidebar-inner md:ml-10 md:mr-2\">\n              <Show\n                when={\n                  currentPaste().title !== \"\" ||\n                  currentPaste().author !== \"\" ||\n                  currentPaste().format !== \"\" ||\n                  currentPaste().rental !== \"\"\n                }\n              >\n                <div\n                  role=\"note\"\n                  class=\"metadata\"\n                  id=\"metadata\"\n                  style={{\n                    \"user-select\": \"none\",\n                    \"min-width\": \"125px\",\n                  }}\n                  onMouseOver={() => setSelectable(true, \"metadata\")}\n                  onFocus={() => setSelectable(true, \"metadata\")}\n                  onMouseOut={() => setSelectable(false, \"metadata\")}\n                  onBlur={() => setSelectable(false, \"metadata\")}\n                >\n                  <Show when={currentPaste().title !== \"\"}>\n                    <h1\n                      class=\"text-[#c2a8d4] text-2xl font-semibold\"\n                      id=\"title\"\n                      style={{ \"user-select\": \"none\" }}\n                      aria-label={currentPaste().title}\n                      innerHTML={currentPaste().title}\n                    />\n                  </Show>\n                  <Show when={currentPaste().author !== \"\"}>\n                    <p\n                      class=\"text-base\"\n                      id=\"author\"\n                      style={{ \"user-select\": \"none\" }}\n                      innerHTML={`By: ${currentPaste().author}`}\n                    />\n                  </Show>\n                  <Show when={currentPaste().format !== \"\"}>\n                    <p\n                      class=\"text-base\"\n                      id=\"format\"\n                      style={{ \"user-select\": \"none\" }}\n                    >\n                      Format: {currentPaste().format}\n                    </p>\n                  </Show>\n                  <Show when={currentPaste().rental !== \"\"}>\n                    <p\n                      class=\"text-base\"\n                      id=\"rental\"\n                      style={{ \"user-select\": \"none\" }}\n                    >\n                      Rental: {currentPaste().rental}\n                    </p>\n                  </Show>\n                </div>\n              </Show>\n              <div class=\"notes-section my-1\">\n                <Show when={currentPaste().notes !== \"\"}>\n                  <button\n                    class=\"cursor-pointer h-[30px] font-bold bg-[#c2a8d4] hover:bg-[#9770b6] text-black w-[175px] mt-1 py-1 border-none rounded\"\n                    type=\"button\"\n                    onClick={() => {\n                      setShowNotes(!showNotes());\n                      const notes =\n                        document.getElementsByClassName(\"notes-content\");\n                      if (notes.length > 0) {\n                        const notes_obj = notes[0] as HTMLElement;\n                        if (notes_obj.getBoundingClientRect().top < 0) {\n                          notes_obj.style.top = \"0px\";\n                        }\n                      }\n\n                      if (showNotes()) {\n                        setNotesOpacity(1.0);\n                      }\n                    }}\n                  >\n                    {showNotes() ? \"Hide notes\" : \"Show notes\"}\n                  </button>\n                  <Show when={showNotes()}>\n                    <div\n                      role=\"note\"\n                      class=\"notes-content bg-zinc-600 border border-ccc p-5 rounded shadow-lg z-20\"\n                      onMouseOver={() => {\n                        makeOpaqueOnFocus();\n                        setSelectable(true, \"notes\");\n                      }}\n                      onFocus={() => {\n                        makeOpaqueOnFocus();\n                        setSelectable(true, \"notes\");\n                      }}\n                      onMouseOut={() => {\n                        makeTransparentOnMouseover();\n                        setSelectable(false, \"notes\");\n                      }}\n                      onBlur={() => {\n                        makeTransparentOnMouseover();\n                        setSelectable(false, \"notes\");\n                      }}\n                      style={{\n                        width: notesWidth(),\n                        opacity: notesOpacity(),\n                        \"user-select\": \"none\",\n                        \"z-index\": 2,\n                      }}\n                    >\n                      <p\n                        id=\"notes\"\n                        class=\"!text-white\"\n                        innerHTML={currentPaste().notes.replace(\n                          /\\n/g,\n                          \"<br />\",\n                        )}\n                      />\n                    </div>\n                  </Show>\n                </Show>\n              </div>\n            </div>\n            <div id=\"buttons\">\n              <button\n                style={{ \"user-select\": \"none\" }}\n                type=\"submit\"\n                onClick={copyPaste}\n                class=\"cursor-pointer w-[175px] h-[30px] copy-button font-bold bg-[#c2a8d4] hover:bg-[#9770b6] text-black py-1 rounded\"\n              >\n                Copy\n              </button>\n              <button\n                class=\"cursor-pointer h-[30px] font-bold bg-[#c2a8d4] hover:bg-[#9770b6] text-black w-[175px] py-1 rounded\"\n                style={{ \"user-select\": \"none\" }}\n                type=\"button\"\n                onClick={() => setShowModal(true)}\n              >\n                Settings\n              </button>\n            </div>\n          </div>\n          <div class=\"main\">\n            <For each={currentPaste().pokemon}>\n              {(pokemon) => {\n                const stats: string[] = pokemon.evs.map((x) =>\n                  x !== 0 ? x.toString() : \"\",\n                );\n                // const nature = pokemon.nature;\n                // if (natureMap[nature] !== null) {\n                //   const indicies = natureMap[nature];\n                //   const increasingIdx = indicies[0];\n                //   const decreasingIdx = indicies[1];\n                //   stats[increasingIdx] = `${stats[increasingIdx]}+`;\n                //   stats[decreasingIdx] = `${stats[decreasingIdx]}-`;\n                //   let last_stat_idx = 0;\n                //   for (let i = 0; i < stats.length; i++) {\n                //     const stat = stats[i];\n                //     if (stat !== \"\") {\n                //       last_stat_idx = i;\n                //     }\n                //   }\n                //   switch (last_stat_idx) {\n                //     case 0:\n                //       pokemon.last_stat_ev = \"hp\";\n                //       break;\n                //     case 1:\n                //       pokemon.last_stat_ev = \"atk\";\n                //       break;\n                //     case 2:\n                //       pokemon.last_stat_ev = \"def\";\n                //       break;\n                //     case 3:\n                //       pokemon.last_stat_ev = \"spa\";\n                //       break;\n                //     case 4:\n                //       pokemon.last_stat_ev = \"spd\";\n                //       break;\n                //     case 5:\n                //       pokemon.last_stat_ev = \"spe\";\n                //       break;\n                //     default:\n                //       pokemon.last_stat_ev = \"\";\n                //       break;\n                //   }\n                // }\n                return (\n                  <article>\n                    <div class=\"img mr-2\">\n                      <Show when={pokemon.item_image !== \"\"}>\n                        <span class=\"img-item\" style={pokemon.item_image} />\n                      </Show>\n                      <img\n                        class=\"img-pokemon\"\n                        src={pokemon.pokemon_image}\n                        alt={pokemon.name}\n                      />\n                    </div>\n\n                    <div class=\"paste\">\n                      <div id=\"mon_title\">\n                        <Show\n                          when={pokemon.nickname !== \"\"}\n                          fallback={\n                            <>\n                              <span\n                                class={`type-${pokemon.type1} inline-element`}\n                              >\n                                {pokemon.name}\n                              </span>\n                              <Show when={pokemon.gender !== \"\"}>\n                                <span\n                                  innerHTML={` (<span class=\"inline-element gender-${pokemon.gender}\">${pokemon.gender}</span>)`}\n                                />\n                              </Show>\n                            </>\n                          }\n                        >\n                          {pokemon.nickname} (\n                          <span class={`type-${pokemon.type1} inline-element`}>\n                            {pokemon.name}\n                          </span>\n                          )\n                          <Show when={pokemon.gender !== \"\"}>\n                            <span\n                              innerHTML={` (<span class=\"inline-element gender-${pokemon.gender}\">${pokemon.gender}</span>)`}\n                            />\n                          </Show>\n                        </Show>\n                      </div>\n                      <Show\n                        when={pokemon.ability !== \"\" || pokemon.item !== \"\"}\n                      >\n                        <div class=\"attribute-line\">\n                          <Show when={pokemon.ability !== \"\"}>\n                            <span>[{pokemon.ability}]</span>\n                          </Show>\n                          <Show when={pokemon.item !== \"\"}>\n                            <span> @ </span>\n                            <span\n                              class=\"inline-element\"\n                              innerHTML={`${pokemon.item.trim()}`}\n                            />\n                          </Show>\n                        </div>\n                      </Show>\n                      <For each={pokemon.moves}>\n                        {(move) => (\n                          <div class=\"move-line\">\n                            <Show\n                              when={sett().moveColors}\n                              fallback={\n                                <>\n                                  <span class={`type-${move.type1}`}>-</span>\n                                  <span style={{ color: \"white\" }}>\n                                    {\" \"}\n                                    {move.name}\n                                  </span>\n                                </>\n                              }\n                            >\n                              <span class={`type-${move.type1}`}>\n                                - {move.name}\n                              </span>\n                            </Show>\n                          </div>\n                        )}\n                      </For>\n                      <div class=\"attribute-line\">\n                        EVs:{\" \"}\n                        <Show when={stats[0] !== \"\"}>\n                          <span class=\"stat-hp\">{stats[0]} HP</span>\n                          <Show when={pokemon.last_stat_ev !== \"hp\"}>/</Show>\n                        </Show>\n                        <Show when={stats[1] !== \"\"}>\n                          <span class=\"stat-atk\">{stats[1]} Atk</span>\n                          <Show when={pokemon.last_stat_ev !== \"atk\"}>/</Show>\n                        </Show>\n                        <Show when={stats[2] !== \"\"}>\n                          <span class=\"stat-def\">{stats[2]} Def</span>\n                          <Show when={pokemon.last_stat_ev !== \"def\"}>/</Show>\n                        </Show>\n                        <Show when={stats[3] !== \"\"}>\n                          <span class=\"stat-spa\">{stats[3]} SpA</span>\n                          <Show when={pokemon.last_stat_ev !== \"spa\"}>/</Show>\n                        </Show>\n                        <Show when={stats[4] !== \"\"}>\n                          <span class=\"stat-spd\">{stats[4]} SpD</span>\n                          <Show when={pokemon.last_stat_ev !== \"spd\"}>/</Show>\n                        </Show>\n                        <Show when={stats[5] !== \"\"}>\n                          <span class=\"stat-spe\">{stats[5]} Spe</span>\n                        </Show>\n                      </div>\n                      <Show when={pokemon.nature !== \"\"}>\n                        <div class=\"attribute-line\">\n                          {pokemon.nature} Nature\n                        </div>\n                      </Show>\n                      <Show when={pokemon.last_stat_iv !== \"\"}>\n                        <div class=\"attribute-line\">\n                          IVs:{\" \"}\n                          <Show when={pokemon.ivs[0] !== 31}>\n                            {pokemon.ivs[0]} HP\n                            <Show when={pokemon.last_stat_iv !== \"hp\"}>\n                              &nbsp;/&nbsp;\n                            </Show>\n                          </Show>\n                          <Show when={pokemon.ivs[1] !== 31}>\n                            {pokemon.ivs[1]} Atk\n                            <Show when={pokemon.last_stat_iv !== \"atk\"}>\n                              &nbsp;/&nbsp;\n                            </Show>\n                          </Show>\n                          <Show when={pokemon.ivs[2] !== 31}>\n                            {pokemon.ivs[2]} Def\n                            <Show when={pokemon.last_stat_iv !== \"def\"}>\n                              &nbsp;/&nbsp;\n                            </Show>\n                          </Show>\n                          <Show when={pokemon.ivs[3] !== 31}>\n                            {pokemon.ivs[3]} SpA\n                            <Show when={pokemon.last_stat_iv !== \"spa\"}>\n                              &nbsp;/&nbsp;\n                            </Show>\n                          </Show>\n                          <Show when={pokemon.ivs[4] !== 31}>\n                            {pokemon.ivs[4]} SpD\n                            <Show when={pokemon.last_stat_iv !== \"spd\"}>\n                              &nbsp;/&nbsp;\n                            </Show>\n                          </Show>\n                          <Show when={pokemon.ivs[5] !== 31}>\n                            {pokemon.ivs[5]} Spe\n                          </Show>\n                        </div>\n                      </Show>\n\n                      <Show when={pokemon.level !== 100}>\n                        <div class=\"attribute-line\">\n                          <span class=\"attr\">Level:</span> {pokemon.level}\n                        </div>\n                      </Show>\n                      <Show when={pokemon.shiny !== \"\"}>\n                        <div class=\"attribute-line\">\n                          <span class=\"attr\">Shiny:</span> {pokemon.shiny}\n                        </div>\n                      </Show>\n                      <Show when={pokemon.hidden_power !== \"\"}>\n                        <div class=\"attribute-line\">\n                          <span class=\"attr\">Hidden Power:</span>{\" \"}\n                          <span class={`type-${pokemon.hidden_power}`}>\n                            {pokemon.hidden_power}\n                          </span>\n                        </div>\n                      </Show>\n                      <Show when={pokemon.tera_type !== \"\"}>\n                        <div class=\"attribute-line\">\n                          <span class=\"attr\">Tera Type:</span>{\" \"}\n                          <span class={`type-${pokemon.tera_type}`}>\n                            {pokemon.tera_type}\n                          </span>\n                        </div>\n                      </Show>\n                      <br\n                        class=\"display-none\"\n                        style={{ \"line-height\": \"0px\" }}\n                      />\n                      <br\n                        class=\"display-none\"\n                        style={{ \"line-height\": \"0px\" }}\n                      />\n                    </div>\n                  </article>\n                );\n              }}\n            </For>\n          </div>\n          <br />\n          <Watermark />\n          <Show when={showModal()}>\n            <div\n              class=\"fixed inset-0 bg-black/20 backdrop-blur-sm flex items-center justify-center z-100 !text-white\"\n              onClick={() => setShowModal(false)}\n              onKeyDown={(e) => e.stopPropagation()}\n              tabindex=\"-1\"\n            >\n              <div\n                class=\"relative bg-zinc-800 rounded-lg p-6 max-w-lg w-full max-h-[90vh] overflow-y-auto shadow-lg\"\n                onClick={(e) => e.stopPropagation()}\n                onKeyDown={() => {}}\n                tabindex=\"0\"\n              >\n                <button\n                  type=\"button\"\n                  class=\"absolute top-2 right-2 text-gray-500 hover:text-gray-700 dark:hover:text-gray-300\"\n                  onClick={() => setShowModal(false)}\n                  aria-label=\"Close modal\"\n                >\n                  ✕\n                </button>\n                <h2 class=\"text-xl font-semibold mb-4\">Settings</h2>\n                <div class=\"flex flex-col gap-2 w-60\">\n                  <div class=\"flex flex-row items-center gap-4\">\n                    <label\n                      for=\"newFormat\"\n                      class=\"font-medium cursor-pointer w-44\"\n                    >\n                      New paste format\n                    </label>\n                    <input\n                      id=\"newFormat\"\n                      name=\"newFormat\"\n                      type=\"checkbox\"\n                      class=\"align-middle\"\n                      checked={sett().newFormat}\n                      onChange={(e) => {\n                        const value = JSON.stringify(e.target.checked);\n                        localStorage.setItem(\"newFormat\", value);\n                        setSett({\n                          ...sett(),\n                          newFormat: e.target.checked,\n                        });\n                      }}\n                    />\n                  </div>\n                  <div class=\"flex flex-row items-center gap-4\">\n                    <label for=\"colors\" class=\"font-medium cursor-pointer w-44\">\n                      Move colors\n                    </label>\n                    <input\n                      id=\"colors\"\n                      name=\"colors\"\n                      type=\"checkbox\"\n                      class=\"align-middle\"\n                      checked={sett().moveColors}\n                      onChange={(e) => {\n                        const value = JSON.stringify(e.target.checked);\n                        localStorage.setItem(\"moveColors\", value);\n                        setSett({\n                          ...sett(),\n                          moveColors: e.target.checked,\n                        });\n                      }}\n                    />\n                  </div>\n                  <div class=\"flex flex-row items-center gap-4\">\n                    <label\n                      for=\"twoDImages\"\n                      class=\"font-medium cursor-pointer w-44\"\n                    >\n                      2D images\n                    </label>\n                    <input\n                      id=\"twoDImages\"\n                      name=\"twoDImages\"\n                      type=\"checkbox\"\n                      class=\"align-middle\"\n                      checked={sett().twoDImages}\n                      onChange={(e) => {\n                        const value = JSON.stringify(e.target.checked);\n                        localStorage.setItem(\"twoDImages\", value);\n                        setSett({\n                          ...sett(),\n                          twoDImages: e.target.checked,\n                        });\n                      }}\n                    />\n                  </div>\n                  <div class=\"flex flex-row items-center gap-4\">\n                    <label\n                      for=\"darkMode\"\n                      class=\"font-medium cursor-pointer w-44\"\n                    >\n                      Dark Mode\n                    </label>\n                    <input\n                      id=\"darkMode\"\n                      name=\"darkMode\"\n                      type=\"checkbox\"\n                      class=\"align-middle\"\n                      checked={sett().darkMode}\n                      onChange={(e) => {\n                        const value = JSON.stringify(e.target.checked);\n                        localStorage.setItem(\"darkMode\", value);\n                        setSett({\n                          ...sett(),\n                          darkMode: e.target.checked,\n                        });\n                      }}\n                    />\n                  </div>\n                </div>\n                <Show when={!currentPaste().isOts && !isEncrypted()}>\n                  <div class=\"flex flex-row gap-4 align-middle mt-2\">\n                    <button\n                      type=\"button\"\n                      onClick={handleCreateOts}\n                      class=\"bg-[#c2a8d4] hover:bg-[#9770b6] text-black px-4 py-0 rounded text-base font-bold\"\n                    >\n                      Create OTS\n                    </button>\n                  </div>\n                </Show>\n              </div>\n            </div>\n          </Show>\n        </div>\n      )}\n    </Show>\n  );\n}\n","import {\n  createSignal,\n  createEffect,\n  onCleanup,\n  onMount,\n  Switch,\n  Match,\n} from \"solid-js\";\nimport \"./app.css\";\nimport \"./paste.css\";\nimport {\n  decrypt,\n  initWasm,\n  parsePaste,\n  type Paste,\n  utf8ToBase64,\n} from \"./helpers\";\nimport { initSettings } from \"./settings\";\nimport PasteViewBase from \"./PasteViewBase\";\nimport PasteViewNew from \"./PasteViewNew\";\n\nfunction stripIvsEvs(pasteText: string): string {\n  // Remove lines that start with \"IVs:\" or \"EVs:\" (case-insensitive, optional whitespace)\n  return pasteText\n    .split(\"\\n\")\n    .filter((line) => !/^\\s*(IVs:|EVs:)/i.test(line))\n    .join(\"\\n\");\n}\n\nconst PasteView = () => {\n  const [paste, setPaste] = createSignal<Paste | null>(null);\n  const [isEncrypted, setIsEncrypted] = createSignal(false);\n  const [data, setData] = createSignal(\"\");\n  const [title, setTitle] = createSignal<string | null>(null);\n  const [showNotes, setShowNotes] = createSignal(false);\n  const [notesOpacity, setNotesOpacity] = createSignal(1.0);\n  const [notesWidth, setNotesWidth] = createSignal(\"300px\");\n  const [showModal, setShowModal] = createSignal(false);\n\n  function updateThemeColor(darkMode: boolean) {\n    const meta = document.getElementById(\"theme-color-meta\");\n    if (meta) {\n      meta.setAttribute(\"content\", darkMode ? \"#000000\" : \"#f9f9f9\");\n    }\n  }\n\n  type PasteUpload = {\n    title: string;\n    author: string;\n    notes: string;\n    format: string;\n    rental: string;\n    content: string;\n  };\n  type FormUpload = {\n    data: PasteUpload;\n    encrypted: boolean;\n  };\n\n  async function handleCreateOts() {\n    if (isEncrypted()) return;\n    // Get the original paste text (from your `data` signal)\n    const originalPaste = data();\n    if (!originalPaste) return;\n\n    // If the paste is encrypted, you may need to handle that separately.\n    // For now, assume it's plain text or JSON string.\n    let pasteObj: FormUpload;\n    try {\n      pasteObj = { encrypted: false, data: JSON.parse(originalPaste) };\n    } catch {\n      return;\n    }\n\n    // Remove IVs/EVs from the content\n    pasteObj.data.content = stripIvsEvs(pasteObj.data.content);\n\n    // Prepare form data\n    const form = document.createElement(\"form\");\n    form.method = \"POST\";\n    form.action = \"/create\";\n    form.style.display = \"none\";\n\n    // Helper to add a field\n    function addField(name: string, value: string) {\n      const input = document.createElement(\"input\");\n      input.type = \"hidden\";\n      input.name = name;\n      input.value = value;\n      form.appendChild(input);\n    }\n\n    // Add all relevant fields\n    const encoded = utf8ToBase64(JSON.stringify(pasteObj));\n    addField(\"data\", encoded);\n\n    document.body.appendChild(form);\n    form.submit();\n  }\n\n  const { sett, setSett } = initSettings();\n\n  function makeTransparentOnMouseover() {\n    setNotesOpacity(0.2);\n  }\n\n  function makeOpaqueOnFocus() {\n    setNotesOpacity(1.0);\n  }\n\n  function decodeHtmlEntities(str: string): string {\n    const txt = document.createElement(\"textarea\");\n    txt.innerHTML = str;\n    const decoded = txt.value;\n    txt.remove(); // remove from DOM (if it was ever attached)\n    return decoded;\n  }\n\n  function updateWidths() {\n    const main = document.getElementsByTagName(\"main\")[0];\n    const sidebar = document.getElementById(\"sidebar\");\n    const notes = document.getElementById(\"notes\");\n\n    if (!main && !sidebar && !notes) return;\n\n    const articles = document.getElementsByTagName(\"article\");\n    let end = articles.length;\n    if (articles.length > 4) {\n      end = 4;\n    }\n\n    const windowWidth = window.innerWidth;\n    for (let i = 0; i < end; i++) {\n      if (windowWidth > 1024) {\n        const margin_bottom = Math.floor(window.innerHeight * 0.02);\n        articles[i].style.marginBottom = `${margin_bottom}px`;\n      }\n    }\n\n    if (windowWidth <= 1024) {\n      // Mobile layout\n      setNotesWidth(\"300px\");\n    } else {\n      // Desktop layout\n      const calculatedWidth = windowWidth - 420;\n      const width = Math.min(Math.max(calculatedWidth, 300), 600);\n      setNotesWidth(`${width}px`);\n    }\n  }\n\n  function setSelectable(value: boolean, id: string) {\n    const element = document.getElementById(id);\n    if (element === null) {\n      return;\n    }\n\n    // First update the style\n    if (value) {\n      element.style.userSelect = \"text\";\n    } else {\n      element.style.userSelect = \"auto\";\n    }\n\n    // Set the style to be selectable for ALL children recursively\n    const children = element.children;\n\n    const children_list = [];\n\n    for (let i = 0; i < children.length; i++) {\n      children_list.push(children[i]);\n    }\n    while (children_list.length > 0) {\n      const child = children_list.pop() as HTMLElement;\n      if (child === null || child === undefined) {\n        break;\n      }\n\n      // Add all children to the list\n      for (let i = 0; i < child.children.length; i++) {\n        children_list.push(child.children[i]);\n      }\n      if (value) {\n        // Set the style to be unselectable\n        for (let i = 0; i < children.length; i++) {\n          child.style.userSelect = \"auto\";\n        }\n      } else {\n        for (let i = 0; i < children.length; i++) {\n          child.style.userSelect = \"none\";\n        }\n      }\n    }\n  }\n\n  async function copyPasteBase() {\n    console.log(\"Copying paste to clipboard...\");\n    const main = document.getElementsByClassName(\"main\")[0];\n\n    if (!main) {\n      return;\n    }\n\n    let text = \"\";\n    const articles = main.querySelectorAll(\"article\");\n\n    articles.forEach((article, _) => {\n      const monTitle = article.querySelector(\"#mon_title\");\n      if (monTitle) {\n        text += `${monTitle.textContent?.trim()}\\n`;\n      }\n\n      // Extract ability, level, shiny, tera type, etc.\n      const attributeDivs = article.querySelectorAll(\".attribute-line\");\n      attributeDivs.forEach((div, _) => {\n        text += `${div.textContent?.trim()}\\n`;\n      });\n\n      const moves = article.querySelectorAll(\".move-line\");\n      moves.forEach((move, _) => {\n        text += `${move.textContent?.trim()}\\n`;\n      });\n\n      text += \"\\n\"; // Add a newline between Pokemon entries\n    });\n\n    // Copy the data to the clipboard.\n    await navigator.clipboard.writeText(text.trim());\n    console.log(text.trim());\n    console.log(\"Paste copied to clipboard.\");\n  }\n\n  async function copyPasteNew() {\n    console.log(\"Copying paste to clipboard...\");\n    const main = document.getElementsByClassName(\"main\")[0];\n\n    if (!main) {\n      return;\n    }\n\n    let text = \"\";\n    const articles = main.querySelectorAll(\"article\");\n\n    articles.forEach((article, _) => {\n      const monTitle = article.querySelector(\"#mon_title\");\n      if (monTitle) {\n        text += `${monTitle.textContent?.trim()}\\n`;\n      }\n\n      const abilityItem = article.querySelector(\"#ability-item\");\n      if (abilityItem) {\n        text += `${abilityItem.textContent?.trim()}\\n`;\n      }\n\n      const moves = article.querySelectorAll(\".move-line\");\n      moves.forEach((move, _) => {\n        text += `${move.textContent?.trim()}\\n`;\n      });\n\n      // Extract ability, level, shiny, tera type, etc.\n      const attributeDivs = article.querySelectorAll(\".attribute-line\");\n      attributeDivs.forEach((div, _) => {\n        text += `${div.textContent?.trim()}\\n`;\n      });\n\n      text += \"\\n\"; // Add a newline between Pokemon entries\n    });\n\n    // Copy the data to the clipboard.\n    await navigator.clipboard.writeText(text.trim());\n    console.log(text.trim());\n    console.log(\"Paste copied to clipboard.\");\n  }\n\n  // Update document title when title changes\n  createEffect(() => {\n    const currentTitle = title();\n    if (currentTitle) {\n      document.title = decodeHtmlEntities(currentTitle);\n    }\n\n    window.addEventListener(\"resize\", updateWidths);\n  });\n\n  createEffect(() => {\n    // Only run if data is loaded\n    if (!data()) return;\n    console.log(data());\n    // Re-parse with the current twoDImages setting\n    const parsedPaste = parsePaste(data(), sett().twoDImages);\n    setPaste(parsedPaste);\n    if (parsedPaste) {\n      setTitle(parsedPaste.title);\n    }\n  });\n\n  function darkModeToggle() {\n    const body = document.getElementsByTagName(\"body\")[0];\n    if (sett().darkMode) {\n      body.classList.add(\"dark\");\n      body.classList.remove(\"light\");\n    } else {\n      body.classList.add(\"light\");\n      body.classList.remove(\"dark\");\n    }\n    updateThemeColor(sett().darkMode);\n  }\n\n  createEffect(() => {\n    darkModeToggle();\n  });\n\n  onMount(async () => {\n    const url = window.location.href;\n    const items = url.split(\"/\");\n    const id = items[items.length - 1];\n    const response = await fetch(`/${id}/json`);\n    const json = await response.json();\n\n    await initWasm();\n    const wsUrl = \"/ws\";\n    const socket = new WebSocket(wsUrl);\n    socket.onopen = async () => {\n      console.log(\"WebSocket connected to:\", wsUrl);\n    };\n\n    if (json.encrypted) {\n      setIsEncrypted(true);\n      // Get user input via popup.\n      let done = false;\n      let promptMsg = \"Enter password\";\n      while (!done) {\n        let passkey = prompt(promptMsg, \"\");\n        while (passkey === \"\" || passkey === null) {\n          promptMsg = \"Enter password\";\n          passkey = prompt(promptMsg, \"\");\n        }\n        const decrypted = decrypt(json.data, passkey as string);\n        if (decrypted == null) {\n          promptMsg = \"Invalid password\";\n        } else {\n          setData(decrypted);\n          done = true;\n        }\n      }\n    } else {\n      setData(JSON.stringify(json.data));\n    }\n\n    darkModeToggle();\n\n    window.addEventListener(\"resize\", updateWidths);\n    updateWidths();\n\n    onCleanup(() => {\n      window.removeEventListener(\"resize\", updateWidths);\n    });\n\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.key === \"Escape\") {\n        setShowModal(false);\n      }\n    };\n    window.addEventListener(\"keydown\", handleKeyDown);\n    onCleanup(() => window.removeEventListener(\"keydown\", handleKeyDown));\n\n    const root = document.getElementById(\"root\");\n    if (root) {\n      if (root.clientHeight <= window.innerHeight) {\n        root.style.overflowY = \"hidden\";\n      }\n    }\n  });\n\n  createEffect(() => {\n    console.log(\"newFormat is\", sett().newFormat);\n  });\n\n  return (\n    <Switch>\n      <Match when={sett().newFormat}>\n        <PasteViewNew\n          paste={paste}\n          setShowModal={setShowModal}\n          setSelectable={setSelectable}\n          setShowNotes={setShowNotes}\n          showNotes={showNotes}\n          makeOpaqueOnFocus={makeOpaqueOnFocus}\n          makeTransparentOnMouseover={makeTransparentOnMouseover}\n          notesWidth={notesWidth}\n          setNotesOpacity={setNotesOpacity}\n          notesOpacity={notesOpacity}\n          copyPaste={copyPasteNew}\n          showModal={showModal}\n          sett={sett}\n          setSett={setSett}\n          isEncrypted={isEncrypted}\n          handleCreateOts={handleCreateOts}\n        />\n      </Match>\n      <Match when={!sett().newFormat}>\n        <PasteViewBase\n          paste={paste}\n          setShowModal={setShowModal}\n          setSelectable={setSelectable}\n          setShowNotes={setShowNotes}\n          showNotes={showNotes}\n          makeOpaqueOnFocus={makeOpaqueOnFocus}\n          makeTransparentOnMouseover={makeTransparentOnMouseover}\n          notesWidth={notesWidth}\n          setNotesOpacity={setNotesOpacity}\n          notesOpacity={notesOpacity}\n          copyPaste={copyPasteBase}\n          showModal={showModal}\n          sett={sett}\n          setSett={setSett}\n          isEncrypted={isEncrypted}\n          handleCreateOts={handleCreateOts}\n        />\n      </Match>\n    </Switch>\n  );\n};\n\nexport default PasteView;\n","import { createSignal } from \"solid-js\";\n\nexport type Settings = {\n  moveColors: boolean;\n  twoDImages: boolean;\n  darkMode: boolean;\n  newFormat: boolean;\n};\n\nexport function initSettings() {\n  const moveColorsString = localStorage.getItem(\"moveColors\");\n  let moveColors = true;\n  if (moveColorsString !== null) {\n    moveColors = JSON.parse(moveColorsString);\n  }\n\n  const twoDImagesString = localStorage.getItem(\"twoDImages\");\n  let twoDImages = false;\n  if (twoDImagesString !== null) {\n    twoDImages = JSON.parse(twoDImagesString);\n  }\n\n  const darkModeString = localStorage.getItem(\"darkMode\");\n  let darkMode = true;\n  if (darkModeString !== null) {\n    darkMode = JSON.parse(darkModeString);\n  }\n\n  const newFormatString = localStorage.getItem(\"newFormat\");\n  let newFormat = false;\n  if (newFormatString !== null) {\n    newFormat = JSON.parse(newFormatString);\n  }\n\n  const initSettings: Settings = {\n    moveColors: moveColors,\n    twoDImages: twoDImages,\n    darkMode: darkMode,\n    newFormat: newFormat,\n  };\n\n  const [sett, setSett] = createSignal<Settings>(initSettings);\n  return { sett, setSett };\n}\n","import { exports, memory } from \"./helpers\";\n\nexport function encrypt(message: string, passphrase: string): string | null {\n  if (!exports || !memory) {\n    return null;\n  }\n  const passphrase_len = passphrase.length;\n  const message_len = message.length;\n\n  // Allocate a single buffer for both strings\n  const buffer_ptr = exports.allocUint8(passphrase_len + message_len);\n  if (!buffer_ptr) {\n    console.error(\"Failed to allocate memory\");\n    return null;\n  }\n\n  // Get a view of memory\n  let memoryView = new Uint8Array(exports.memory.buffer);\n\n  // Copy the passphrase and message into the single buffer\n  const passphraseBuffer = new TextEncoder().encode(passphrase);\n  const messageBuffer = new TextEncoder().encode(message);\n\n  // Write passphrase at the beginning of the buffer\n  for (let i = 0; i < passphrase_len; i++) {\n    memoryView[buffer_ptr + i] = passphraseBuffer[i];\n  }\n\n  // Write message right after the passphrase\n  for (let i = 0; i < message_len; i++) {\n    memoryView[buffer_ptr + passphrase_len + i] = messageBuffer[i];\n  }\n\n  // Single call to encrypt\n  const success = exports.encryptMessage(\n    buffer_ptr,\n    passphrase_len,\n    message_len,\n  );\n\n  if (!success) {\n    console.error(\"Failed to encrypt message\");\n    exports.resetArena();\n    return null;\n  }\n\n  // Get result information from separate functions\n  const resultPtr = exports.getResultPtr();\n  const resultLen = exports.getResultLen();\n\n  if (resultPtr === 0 || resultLen === 0) {\n    console.error(\"Invalid result\");\n    exports.resetArena();\n    return null;\n  }\n\n  // Get a fresh view of memory after the WASM function call\n  memoryView = new Uint8Array(exports.memory.buffer);\n\n  const decoder = new TextDecoder();\n  const result_message = decoder.decode(\n    memoryView.slice(resultPtr, resultPtr + resultLen),\n  );\n\n  // Reset the arena instead of individual frees\n  exports.resetArena();\n\n  return result_message;\n}\n\nexport function decrypt(encrypted: string, passphrase: string): string | null {\n  if (!exports || !memory) {\n    return null;\n  }\n  const passphrase_len = passphrase.length;\n  const encrypted_len = encrypted.length;\n\n  // Allocate a single buffer for both strings\n  const buffer_ptr = exports.allocUint8(passphrase_len + encrypted_len);\n  if (!buffer_ptr) {\n    console.error(\"Failed to allocate memory\");\n    return null;\n  }\n\n  // Get a view of memory\n  let memoryView = new Uint8Array(exports.memory.buffer);\n\n  // Copy the passphrase and message into the single buffer\n  const passphraseBuffer = new TextEncoder().encode(passphrase);\n  const encryptedBuffer = new TextEncoder().encode(encrypted);\n\n  // Write passphrase at the beginning of the buffer\n  for (let i = 0; i < passphrase_len; i++) {\n    memoryView[buffer_ptr + i] = passphraseBuffer[i];\n  }\n\n  // Write message right after the passphrase\n  for (let i = 0; i < encrypted_len; i++) {\n    memoryView[buffer_ptr + passphrase_len + i] = encryptedBuffer[i];\n  }\n\n  // Single call to encrypt\n  const success = exports.decryptMessage(\n    buffer_ptr,\n    passphrase_len,\n    encrypted_len,\n  );\n\n  if (!success) {\n    console.error(\"Failed to encrypt message\");\n    exports.resetArena();\n    return null;\n  }\n\n  // Get result information from separate functions\n  const resultPtr = exports.getResultPtr();\n  const resultLen = exports.getResultLen();\n\n  if (resultPtr === 0 || resultLen === 0) {\n    console.error(\"Invalid result\");\n    exports.resetArena();\n    return null;\n  }\n\n  // Get a fresh view of memory after the WASM function call\n  memoryView = new Uint8Array(exports.memory.buffer);\n\n  const decoder = new TextDecoder();\n  const result_message = decoder.decode(\n    memoryView.slice(resultPtr, resultPtr + resultLen),\n  );\n\n  // Reset the arena instead of individual frees\n  exports.resetArena();\n\n  return result_message;\n}\n","import { render } from 'solid-js/web';\nimport Paste from './PasteView';\n\nconst root = document.getElementById('root');\nif (root) {\n    render(() => <Paste />, root);\n}\n"],"names":["exports","memory","sizeOfUint32","Uint32Array","sizeOfNullByte","Uint8Array","decodeString","pointer","length","slice","TextDecoder","decodeNullTerminatedString","memSize","console","maxLength","value","index","e","initWasm","instance","wasmModule","WebAssembly","fetch","Error","now","BigInt","Date","alignTo4Bytes","Math","_el$","_el$2","isFixed","setIsFixed","createSignal","dir","setDir","prevSize","setPrevSize","window","innerWidth","height","setHeight","width","setWidth","bottom","setBottom","padding","setPadding","check","onMount","onresize","createEffect","_tmpl$","firstChild","style","setProperty","_$setAttribute","logo","_$effect","_p$","_v$","_v$2","_v$3","_v$4","undefined","_v$5","_v$6","_v$7","_v$8","removeProperty","t","a","o","i","n","s","h","PasteViewBase","props","paste","setSelectable","setShowNotes","showNotes","setNotesOpacity","makeOpaqueOnFocus","makeTransparentOnMouseover","notesWidth","notesOpacity","copyPaste","setShowModal","showModal","sett","setSett","isEncrypted","handleCreateOts","_$createComponent","Show","when","children","currentPaste","_el$3","_el$11","_el$16","_el$17","_el$18","_tmpl$10","_el$15","nextSibling","_$insert","title","author","format","rental","_el$4","_tmpl$5","addEventListener","$$mouseout","$$mouseover","_el$5","innerHTML","_el$6","_tmpl$2","_el$7","_tmpl$3","_el$9","_tmpl$4","notes","_el$12","_tmpl$6","$$click","document","getElementsByClassName","notes_obj","getBoundingClientRect","top","_el$13","_tmpl$7","_el$14","replace","_$addEventListener","For","each","pokemon","_el$39","_el$40","_el$42","_el$43","_el$44","_el$84","_el$85","_tmpl$30","item_image","_el$41","_tmpl$11","_$p","_$style","nickname","fallback","_el$86","_tmpl$12","name","_$className","type1","gender","_el$87","_el$45","_$memo","_el$46","item","_el$48","_tmpl$13","_tmpl$14","trim","ability","_el$49","_tmpl$15","_el$50","level","_el$52","_tmpl$16","_el$53","shiny","_el$55","_tmpl$17","_el$56","hidden_power","_el$58","_tmpl$18","_el$61","_el$60","_el$59","tera_type","_el$62","_tmpl$19","_el$65","_el$64","_el$63","last_stat_ev","_el$66","_tmpl$26","evs","_el$68","_el$69","_tmpl$20","_el$70","_el$71","_tmpl$21","_el$72","_el$73","_tmpl$22","_el$74","_el$75","_tmpl$23","_el$76","_el$77","_tmpl$24","_el$78","_tmpl$25","_el$79","nature","_el$80","_tmpl$28","endsWith","_tmpl$27","last_stat_iv","_el$82","_tmpl$29","ivs","moves","move","_el$88","_tmpl$32","moveColors","_el$91","_el$92","_tmpl$33","_tmpl$34","_el$89","_tmpl$31","pokemon_image","Watermark","_el$20","_tmpl$9","_el$21","_el$22","_el$25","_el$24","_el$23","_el$27","_el$26","_el$28","_el$30","_el$29","_el$31","_el$33","_el$32","_el$36","_el$35","_el$34","$$keydown","stopPropagation","JSON","stringify","target","checked","localStorage","setItem","newFormat","twoDImages","darkMode","isOts","_el$37","_tmpl$8","_el$38","_$delegateEvents","PasteViewNew","_el$54","stats","map","x","toString","_el$90","_el$47","_el$51","_el$95","_el$96","_el$93","_el$57","_el$67","_el$83","_el$81","PasteView","setPaste","Paste","setIsEncrypted","data","setData","setTitle","setNotesWidth","str","pasteObj","originalPaste","encrypted","parse","content","pasteText","split","filter","line","test","join","form","createElement","method","action","display","encoded","btoa","String","TextEncoder","input","type","appendChild","body","submit","initSettings","moveColorsString","twoDImagesString","darkModeString","newFormatString","updateWidths","main","getElementsByTagName","sidebar","getElementById","articles","end","windowWidth","margin_bottom","floor","innerHeight","marginBottom","min","max","id","element","userSelect","children_list","push","child","pop","copyPasteBase","log","text","querySelectorAll","forEach","article","_","monTitle","querySelector","textContent","attributeDivs","div","navigator","clipboard","writeText","copyPasteNew","abilityItem","darkModeToggle","classList","add","remove","meta","setAttribute","currentTitle","decodeHtmlEntities","txt","decoded","parsedPaste","parsePaste","twoDimages","encodeNullTerminatedString","string","buffer","sizeOfNullTerminatedString","decodePaste","pastePtr","titlePtr","titleSlice","authorPtr","authorSlice","notesPtr","notesSlice","formatPtr","formatSlice","rentalPtr","rentalSlice","pokemon_len","pokemonLenSlice","pokemonArrayPtrPointer","pokemonArrayPointer","pokemonArrayPtrSlice","alignedPokemonArrayPointer","pokemonArraySlice","pokemonPtr","mon","decodePokemon","offset","nameSlice","namePtr","nicknameSlice","nicknamePtr","basePtr","itemSlice","itemPtr","genderNum","genderPtr","itemImageSlice","itemImagePtr","itemImage","pokemonImageSlice","pokemonImagePtr","pokemonImage","moves_len","movesLenPtr","movesArrayPointer","movesArrayPtrSlice","movesArray","currentMovePtr","decodeMove","movePtr","type1Slice","type1Ptr","evValue","evPtr","ivValue","ivPtr","linesLenPointer","lines_len","linesLenSlice","lines","linesArrayPtrPointer","linesArrayPointer","linesArrayPtrSlice","alignedLinesArrayPointer","linesArraySlice","linePtr","lastStatEvSlice","lastStatEvPtr","lastStatIvSlice","lastStatIvPtr","type2Slice","type2Ptr","type2","abilitySlice","abilityPtr","levelPtr","shinySlice","shinyPtr","hpSlice","hpPointer","teraTypeSlice","teraTypePointer","natureSlice","naturePointer","isOtsValue","items","url","location","href","response","json","socket","WebSocket","onopen","done","promptMsg","passkey","prompt","decrypted","decrypt","passphrase","passphrase_len","encrypted_len","buffer_ptr","memoryView","passphraseBuffer","encryptedBuffer","resultPtr","resultLen","result_message","decoder","onCleanup","removeEventListener","handleKeyDown","key","root","clientHeight","overflowY","Switch","Match","render"],"mappings":"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"}