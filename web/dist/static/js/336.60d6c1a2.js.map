{"version":3,"file":"static/js/336.60d6c1a2.js","sources":["webpack://web/./node_modules/solid-js/dist/solid.js"],"sourcesContent":["let taskIdCounter = 1,\n  isCallbackScheduled = false,\n  isPerformingWork = false,\n  taskQueue = [],\n  currentTask = null,\n  shouldYieldToHost = null,\n  yieldInterval = 5,\n  deadline = 0,\n  maxYieldInterval = 300,\n  scheduleCallback = null,\n  scheduledCallback = null;\nconst maxSigned31BitInt = 1073741823;\nfunction setupScheduler() {\n  const channel = new MessageChannel(),\n    port = channel.port2;\n  scheduleCallback = () => port.postMessage(null);\n  channel.port1.onmessage = () => {\n    if (scheduledCallback !== null) {\n      const currentTime = performance.now();\n      deadline = currentTime + yieldInterval;\n      const hasTimeRemaining = true;\n      try {\n        const hasMoreWork = scheduledCallback(hasTimeRemaining, currentTime);\n        if (!hasMoreWork) {\n          scheduledCallback = null;\n        } else port.postMessage(null);\n      } catch (error) {\n        port.postMessage(null);\n        throw error;\n      }\n    }\n  };\n  if (navigator && navigator.scheduling && navigator.scheduling.isInputPending) {\n    const scheduling = navigator.scheduling;\n    shouldYieldToHost = () => {\n      const currentTime = performance.now();\n      if (currentTime >= deadline) {\n        if (scheduling.isInputPending()) {\n          return true;\n        }\n        return currentTime >= maxYieldInterval;\n      } else {\n        return false;\n      }\n    };\n  } else {\n    shouldYieldToHost = () => performance.now() >= deadline;\n  }\n}\nfunction enqueue(taskQueue, task) {\n  function findIndex() {\n    let m = 0;\n    let n = taskQueue.length - 1;\n    while (m <= n) {\n      const k = (n + m) >> 1;\n      const cmp = task.expirationTime - taskQueue[k].expirationTime;\n      if (cmp > 0) m = k + 1;\n      else if (cmp < 0) n = k - 1;\n      else return k;\n    }\n    return m;\n  }\n  taskQueue.splice(findIndex(), 0, task);\n}\nfunction requestCallback(fn, options) {\n  if (!scheduleCallback) setupScheduler();\n  let startTime = performance.now(),\n    timeout = maxSigned31BitInt;\n  if (options && options.timeout) timeout = options.timeout;\n  const newTask = {\n    id: taskIdCounter++,\n    fn,\n    startTime,\n    expirationTime: startTime + timeout\n  };\n  enqueue(taskQueue, newTask);\n  if (!isCallbackScheduled && !isPerformingWork) {\n    isCallbackScheduled = true;\n    scheduledCallback = flushWork;\n    scheduleCallback();\n  }\n  return newTask;\n}\nfunction cancelCallback(task) {\n  task.fn = null;\n}\nfunction flushWork(hasTimeRemaining, initialTime) {\n  isCallbackScheduled = false;\n  isPerformingWork = true;\n  try {\n    return workLoop(hasTimeRemaining, initialTime);\n  } finally {\n    currentTask = null;\n    isPerformingWork = false;\n  }\n}\nfunction workLoop(hasTimeRemaining, initialTime) {\n  let currentTime = initialTime;\n  currentTask = taskQueue[0] || null;\n  while (currentTask !== null) {\n    if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || shouldYieldToHost())) {\n      break;\n    }\n    const callback = currentTask.fn;\n    if (callback !== null) {\n      currentTask.fn = null;\n      const didUserCallbackTimeout = currentTask.expirationTime <= currentTime;\n      callback(didUserCallbackTimeout);\n      currentTime = performance.now();\n      if (currentTask === taskQueue[0]) {\n        taskQueue.shift();\n      }\n    } else taskQueue.shift();\n    currentTask = taskQueue[0] || null;\n  }\n  return currentTask !== null;\n}\n\nconst sharedConfig = {\n  context: undefined,\n  registry: undefined,\n  effects: undefined,\n  done: false,\n  getContextId() {\n    return getContextId(this.context.count);\n  },\n  getNextContextId() {\n    return getContextId(this.context.count++);\n  }\n};\nfunction getContextId(count) {\n  const num = String(count),\n    len = num.length - 1;\n  return sharedConfig.context.id + (len ? String.fromCharCode(96 + len) : \"\") + num;\n}\nfunction setHydrateContext(context) {\n  sharedConfig.context = context;\n}\nfunction nextHydrateContext() {\n  return {\n    ...sharedConfig.context,\n    id: sharedConfig.getNextContextId(),\n    count: 0\n  };\n}\n\nconst IS_DEV = false;\nconst equalFn = (a, b) => a === b;\nconst $PROXY = Symbol(\"solid-proxy\");\nconst SUPPORTS_PROXY = typeof Proxy === \"function\";\nconst $TRACK = Symbol(\"solid-track\");\nconst $DEVCOMP = Symbol(\"solid-dev-component\");\nconst signalOptions = {\n  equals: equalFn\n};\nlet ERROR = null;\nlet runEffects = runQueue;\nconst STALE = 1;\nconst PENDING = 2;\nconst UNOWNED = {\n  owned: null,\n  cleanups: null,\n  context: null,\n  owner: null\n};\nconst NO_INIT = {};\nvar Owner = null;\nlet Transition = null;\nlet Scheduler = null;\nlet ExternalSourceConfig = null;\nlet Listener = null;\nlet Updates = null;\nlet Effects = null;\nlet ExecCount = 0;\nfunction createRoot(fn, detachedOwner) {\n  const listener = Listener,\n    owner = Owner,\n    unowned = fn.length === 0,\n    current = detachedOwner === undefined ? owner : detachedOwner,\n    root = unowned\n      ? UNOWNED\n      : {\n          owned: null,\n          cleanups: null,\n          context: current ? current.context : null,\n          owner: current\n        },\n    updateFn = unowned ? fn : () => fn(() => untrack(() => cleanNode(root)));\n  Owner = root;\n  Listener = null;\n  try {\n    return runUpdates(updateFn, true);\n  } finally {\n    Listener = listener;\n    Owner = owner;\n  }\n}\nfunction createSignal(value, options) {\n  options = options ? Object.assign({}, signalOptions, options) : signalOptions;\n  const s = {\n    value,\n    observers: null,\n    observerSlots: null,\n    comparator: options.equals || undefined\n  };\n  const setter = value => {\n    if (typeof value === \"function\") {\n      if (Transition && Transition.running && Transition.sources.has(s)) value = value(s.tValue);\n      else value = value(s.value);\n    }\n    return writeSignal(s, value);\n  };\n  return [readSignal.bind(s), setter];\n}\nfunction createComputed(fn, value, options) {\n  const c = createComputation(fn, value, true, STALE);\n  if (Scheduler && Transition && Transition.running) Updates.push(c);\n  else updateComputation(c);\n}\nfunction createRenderEffect(fn, value, options) {\n  const c = createComputation(fn, value, false, STALE);\n  if (Scheduler && Transition && Transition.running) Updates.push(c);\n  else updateComputation(c);\n}\nfunction createEffect(fn, value, options) {\n  runEffects = runUserEffects;\n  const c = createComputation(fn, value, false, STALE),\n    s = SuspenseContext && useContext(SuspenseContext);\n  if (s) c.suspense = s;\n  if (!options || !options.render) c.user = true;\n  Effects ? Effects.push(c) : updateComputation(c);\n}\nfunction createReaction(onInvalidate, options) {\n  let fn;\n  const c = createComputation(\n      () => {\n        fn ? fn() : untrack(onInvalidate);\n        fn = undefined;\n      },\n      undefined,\n      false,\n      0\n    ),\n    s = SuspenseContext && useContext(SuspenseContext);\n  if (s) c.suspense = s;\n  c.user = true;\n  return tracking => {\n    fn = tracking;\n    updateComputation(c);\n  };\n}\nfunction createMemo(fn, value, options) {\n  options = options ? Object.assign({}, signalOptions, options) : signalOptions;\n  const c = createComputation(fn, value, true, 0);\n  c.observers = null;\n  c.observerSlots = null;\n  c.comparator = options.equals || undefined;\n  if (Scheduler && Transition && Transition.running) {\n    c.tState = STALE;\n    Updates.push(c);\n  } else updateComputation(c);\n  return readSignal.bind(c);\n}\nfunction isPromise(v) {\n  return v && typeof v === \"object\" && \"then\" in v;\n}\nfunction createResource(pSource, pFetcher, pOptions) {\n  let source;\n  let fetcher;\n  let options;\n  if (typeof pFetcher === \"function\") {\n    source = pSource;\n    fetcher = pFetcher;\n    options = pOptions || {};\n  } else {\n    source = true;\n    fetcher = pSource;\n    options = pFetcher || {};\n  }\n  let pr = null,\n    initP = NO_INIT,\n    id = null,\n    loadedUnderTransition = false,\n    scheduled = false,\n    resolved = \"initialValue\" in options,\n    dynamic = typeof source === \"function\" && createMemo(source);\n  const contexts = new Set(),\n    [value, setValue] = (options.storage || createSignal)(options.initialValue),\n    [error, setError] = createSignal(undefined),\n    [track, trigger] = createSignal(undefined, {\n      equals: false\n    }),\n    [state, setState] = createSignal(resolved ? \"ready\" : \"unresolved\");\n  if (sharedConfig.context) {\n    id = sharedConfig.getNextContextId();\n    if (options.ssrLoadFrom === \"initial\") initP = options.initialValue;\n    else if (sharedConfig.load && sharedConfig.has(id)) initP = sharedConfig.load(id);\n  }\n  function loadEnd(p, v, error, key) {\n    if (pr === p) {\n      pr = null;\n      key !== undefined && (resolved = true);\n      if ((p === initP || v === initP) && options.onHydrated)\n        queueMicrotask(() =>\n          options.onHydrated(key, {\n            value: v\n          })\n        );\n      initP = NO_INIT;\n      if (Transition && p && loadedUnderTransition) {\n        Transition.promises.delete(p);\n        loadedUnderTransition = false;\n        runUpdates(() => {\n          Transition.running = true;\n          completeLoad(v, error);\n        }, false);\n      } else completeLoad(v, error);\n    }\n    return v;\n  }\n  function completeLoad(v, err) {\n    runUpdates(() => {\n      if (err === undefined) setValue(() => v);\n      setState(err !== undefined ? \"errored\" : resolved ? \"ready\" : \"unresolved\");\n      setError(err);\n      for (const c of contexts.keys()) c.decrement();\n      contexts.clear();\n    }, false);\n  }\n  function read() {\n    const c = SuspenseContext && useContext(SuspenseContext),\n      v = value(),\n      err = error();\n    if (err !== undefined && !pr) throw err;\n    if (Listener && !Listener.user && c) {\n      createComputed(() => {\n        track();\n        if (pr) {\n          if (c.resolved && Transition && loadedUnderTransition) Transition.promises.add(pr);\n          else if (!contexts.has(c)) {\n            c.increment();\n            contexts.add(c);\n          }\n        }\n      });\n    }\n    return v;\n  }\n  function load(refetching = true) {\n    if (refetching !== false && scheduled) return;\n    scheduled = false;\n    const lookup = dynamic ? dynamic() : source;\n    loadedUnderTransition = Transition && Transition.running;\n    if (lookup == null || lookup === false) {\n      loadEnd(pr, untrack(value));\n      return;\n    }\n    if (Transition && pr) Transition.promises.delete(pr);\n    const p =\n      initP !== NO_INIT\n        ? initP\n        : untrack(() =>\n            fetcher(lookup, {\n              value: value(),\n              refetching\n            })\n          );\n    if (!isPromise(p)) {\n      loadEnd(pr, p, undefined, lookup);\n      return p;\n    }\n    pr = p;\n    if (\"value\" in p) {\n      if (p.status === \"success\") loadEnd(pr, p.value, undefined, lookup);\n      else loadEnd(pr, undefined, castError(p.value), lookup);\n      return p;\n    }\n    scheduled = true;\n    queueMicrotask(() => (scheduled = false));\n    runUpdates(() => {\n      setState(resolved ? \"refreshing\" : \"pending\");\n      trigger();\n    }, false);\n    return p.then(\n      v => loadEnd(p, v, undefined, lookup),\n      e => loadEnd(p, undefined, castError(e), lookup)\n    );\n  }\n  Object.defineProperties(read, {\n    state: {\n      get: () => state()\n    },\n    error: {\n      get: () => error()\n    },\n    loading: {\n      get() {\n        const s = state();\n        return s === \"pending\" || s === \"refreshing\";\n      }\n    },\n    latest: {\n      get() {\n        if (!resolved) return read();\n        const err = error();\n        if (err && !pr) throw err;\n        return value();\n      }\n    }\n  });\n  if (dynamic) createComputed(() => load(false));\n  else load(false);\n  return [\n    read,\n    {\n      refetch: load,\n      mutate: setValue\n    }\n  ];\n}\nfunction createDeferred(source, options) {\n  let t,\n    timeout = options ? options.timeoutMs : undefined;\n  const node = createComputation(\n    () => {\n      if (!t || !t.fn)\n        t = requestCallback(\n          () => setDeferred(() => node.value),\n          timeout !== undefined\n            ? {\n                timeout\n              }\n            : undefined\n        );\n      return source();\n    },\n    undefined,\n    true\n  );\n  const [deferred, setDeferred] = createSignal(\n    Transition && Transition.running && Transition.sources.has(node) ? node.tValue : node.value,\n    options\n  );\n  updateComputation(node);\n  setDeferred(() =>\n    Transition && Transition.running && Transition.sources.has(node) ? node.tValue : node.value\n  );\n  return deferred;\n}\nfunction createSelector(source, fn = equalFn, options) {\n  const subs = new Map();\n  const node = createComputation(\n    p => {\n      const v = source();\n      for (const [key, val] of subs.entries())\n        if (fn(key, v) !== fn(key, p)) {\n          for (const c of val.values()) {\n            c.state = STALE;\n            if (c.pure) Updates.push(c);\n            else Effects.push(c);\n          }\n        }\n      return v;\n    },\n    undefined,\n    true,\n    STALE\n  );\n  updateComputation(node);\n  return key => {\n    const listener = Listener;\n    if (listener) {\n      let l;\n      if ((l = subs.get(key))) l.add(listener);\n      else subs.set(key, (l = new Set([listener])));\n      onCleanup(() => {\n        l.delete(listener);\n        !l.size && subs.delete(key);\n      });\n    }\n    return fn(\n      key,\n      Transition && Transition.running && Transition.sources.has(node) ? node.tValue : node.value\n    );\n  };\n}\nfunction batch(fn) {\n  return runUpdates(fn, false);\n}\nfunction untrack(fn) {\n  if (!ExternalSourceConfig && Listener === null) return fn();\n  const listener = Listener;\n  Listener = null;\n  try {\n    if (ExternalSourceConfig) return ExternalSourceConfig.untrack(fn);\n    return fn();\n  } finally {\n    Listener = listener;\n  }\n}\nfunction on(deps, fn, options) {\n  const isArray = Array.isArray(deps);\n  let prevInput;\n  let defer = options && options.defer;\n  return prevValue => {\n    let input;\n    if (isArray) {\n      input = Array(deps.length);\n      for (let i = 0; i < deps.length; i++) input[i] = deps[i]();\n    } else input = deps();\n    if (defer) {\n      defer = false;\n      return prevValue;\n    }\n    const result = untrack(() => fn(input, prevInput, prevValue));\n    prevInput = input;\n    return result;\n  };\n}\nfunction onMount(fn) {\n  createEffect(() => untrack(fn));\n}\nfunction onCleanup(fn) {\n  if (Owner === null);\n  else if (Owner.cleanups === null) Owner.cleanups = [fn];\n  else Owner.cleanups.push(fn);\n  return fn;\n}\nfunction catchError(fn, handler) {\n  ERROR || (ERROR = Symbol(\"error\"));\n  Owner = createComputation(undefined, undefined, true);\n  Owner.context = {\n    ...Owner.context,\n    [ERROR]: [handler]\n  };\n  if (Transition && Transition.running) Transition.sources.add(Owner);\n  try {\n    return fn();\n  } catch (err) {\n    handleError(err);\n  } finally {\n    Owner = Owner.owner;\n  }\n}\nfunction getListener() {\n  return Listener;\n}\nfunction getOwner() {\n  return Owner;\n}\nfunction runWithOwner(o, fn) {\n  const prev = Owner;\n  const prevListener = Listener;\n  Owner = o;\n  Listener = null;\n  try {\n    return runUpdates(fn, true);\n  } catch (err) {\n    handleError(err);\n  } finally {\n    Owner = prev;\n    Listener = prevListener;\n  }\n}\nfunction enableScheduling(scheduler = requestCallback) {\n  Scheduler = scheduler;\n}\nfunction startTransition(fn) {\n  if (Transition && Transition.running) {\n    fn();\n    return Transition.done;\n  }\n  const l = Listener;\n  const o = Owner;\n  return Promise.resolve().then(() => {\n    Listener = l;\n    Owner = o;\n    let t;\n    if (Scheduler || SuspenseContext) {\n      t =\n        Transition ||\n        (Transition = {\n          sources: new Set(),\n          effects: [],\n          promises: new Set(),\n          disposed: new Set(),\n          queue: new Set(),\n          running: true\n        });\n      t.done || (t.done = new Promise(res => (t.resolve = res)));\n      t.running = true;\n    }\n    runUpdates(fn, false);\n    Listener = Owner = null;\n    return t ? t.done : undefined;\n  });\n}\nconst [transPending, setTransPending] = /*@__PURE__*/ createSignal(false);\nfunction useTransition() {\n  return [transPending, startTransition];\n}\nfunction resumeEffects(e) {\n  Effects.push.apply(Effects, e);\n  e.length = 0;\n}\nfunction createContext(defaultValue, options) {\n  const id = Symbol(\"context\");\n  return {\n    id,\n    Provider: createProvider(id),\n    defaultValue\n  };\n}\nfunction useContext(context) {\n  let value;\n  return Owner && Owner.context && (value = Owner.context[context.id]) !== undefined\n    ? value\n    : context.defaultValue;\n}\nfunction children(fn) {\n  const children = createMemo(fn);\n  const memo = createMemo(() => resolveChildren(children()));\n  memo.toArray = () => {\n    const c = memo();\n    return Array.isArray(c) ? c : c != null ? [c] : [];\n  };\n  return memo;\n}\nlet SuspenseContext;\nfunction getSuspenseContext() {\n  return SuspenseContext || (SuspenseContext = createContext());\n}\nfunction enableExternalSource(factory, untrack = fn => fn()) {\n  if (ExternalSourceConfig) {\n    const { factory: oldFactory, untrack: oldUntrack } = ExternalSourceConfig;\n    ExternalSourceConfig = {\n      factory: (fn, trigger) => {\n        const oldSource = oldFactory(fn, trigger);\n        const source = factory(x => oldSource.track(x), trigger);\n        return {\n          track: x => source.track(x),\n          dispose() {\n            source.dispose();\n            oldSource.dispose();\n          }\n        };\n      },\n      untrack: fn => oldUntrack(() => untrack(fn))\n    };\n  } else {\n    ExternalSourceConfig = {\n      factory,\n      untrack\n    };\n  }\n}\nfunction readSignal() {\n  const runningTransition = Transition && Transition.running;\n  if (this.sources && (runningTransition ? this.tState : this.state)) {\n    if ((runningTransition ? this.tState : this.state) === STALE) updateComputation(this);\n    else {\n      const updates = Updates;\n      Updates = null;\n      runUpdates(() => lookUpstream(this), false);\n      Updates = updates;\n    }\n  }\n  if (Listener) {\n    const sSlot = this.observers ? this.observers.length : 0;\n    if (!Listener.sources) {\n      Listener.sources = [this];\n      Listener.sourceSlots = [sSlot];\n    } else {\n      Listener.sources.push(this);\n      Listener.sourceSlots.push(sSlot);\n    }\n    if (!this.observers) {\n      this.observers = [Listener];\n      this.observerSlots = [Listener.sources.length - 1];\n    } else {\n      this.observers.push(Listener);\n      this.observerSlots.push(Listener.sources.length - 1);\n    }\n  }\n  if (runningTransition && Transition.sources.has(this)) return this.tValue;\n  return this.value;\n}\nfunction writeSignal(node, value, isComp) {\n  let current =\n    Transition && Transition.running && Transition.sources.has(node) ? node.tValue : node.value;\n  if (!node.comparator || !node.comparator(current, value)) {\n    if (Transition) {\n      const TransitionRunning = Transition.running;\n      if (TransitionRunning || (!isComp && Transition.sources.has(node))) {\n        Transition.sources.add(node);\n        node.tValue = value;\n      }\n      if (!TransitionRunning) node.value = value;\n    } else node.value = value;\n    if (node.observers && node.observers.length) {\n      runUpdates(() => {\n        for (let i = 0; i < node.observers.length; i += 1) {\n          const o = node.observers[i];\n          const TransitionRunning = Transition && Transition.running;\n          if (TransitionRunning && Transition.disposed.has(o)) continue;\n          if (TransitionRunning ? !o.tState : !o.state) {\n            if (o.pure) Updates.push(o);\n            else Effects.push(o);\n            if (o.observers) markDownstream(o);\n          }\n          if (!TransitionRunning) o.state = STALE;\n          else o.tState = STALE;\n        }\n        if (Updates.length > 10e5) {\n          Updates = [];\n          if (IS_DEV);\n          throw new Error();\n        }\n      }, false);\n    }\n  }\n  return value;\n}\nfunction updateComputation(node) {\n  if (!node.fn) return;\n  cleanNode(node);\n  const time = ExecCount;\n  runComputation(\n    node,\n    Transition && Transition.running && Transition.sources.has(node) ? node.tValue : node.value,\n    time\n  );\n  if (Transition && !Transition.running && Transition.sources.has(node)) {\n    queueMicrotask(() => {\n      runUpdates(() => {\n        Transition && (Transition.running = true);\n        Listener = Owner = node;\n        runComputation(node, node.tValue, time);\n        Listener = Owner = null;\n      }, false);\n    });\n  }\n}\nfunction runComputation(node, value, time) {\n  let nextValue;\n  const owner = Owner,\n    listener = Listener;\n  Listener = Owner = node;\n  try {\n    nextValue = node.fn(value);\n  } catch (err) {\n    if (node.pure) {\n      if (Transition && Transition.running) {\n        node.tState = STALE;\n        node.tOwned && node.tOwned.forEach(cleanNode);\n        node.tOwned = undefined;\n      } else {\n        node.state = STALE;\n        node.owned && node.owned.forEach(cleanNode);\n        node.owned = null;\n      }\n    }\n    node.updatedAt = time + 1;\n    return handleError(err);\n  } finally {\n    Listener = listener;\n    Owner = owner;\n  }\n  if (!node.updatedAt || node.updatedAt <= time) {\n    if (node.updatedAt != null && \"observers\" in node) {\n      writeSignal(node, nextValue, true);\n    } else if (Transition && Transition.running && node.pure) {\n      Transition.sources.add(node);\n      node.tValue = nextValue;\n    } else node.value = nextValue;\n    node.updatedAt = time;\n  }\n}\nfunction createComputation(fn, init, pure, state = STALE, options) {\n  const c = {\n    fn,\n    state: state,\n    updatedAt: null,\n    owned: null,\n    sources: null,\n    sourceSlots: null,\n    cleanups: null,\n    value: init,\n    owner: Owner,\n    context: Owner ? Owner.context : null,\n    pure\n  };\n  if (Transition && Transition.running) {\n    c.state = 0;\n    c.tState = state;\n  }\n  if (Owner === null);\n  else if (Owner !== UNOWNED) {\n    if (Transition && Transition.running && Owner.pure) {\n      if (!Owner.tOwned) Owner.tOwned = [c];\n      else Owner.tOwned.push(c);\n    } else {\n      if (!Owner.owned) Owner.owned = [c];\n      else Owner.owned.push(c);\n    }\n  }\n  if (ExternalSourceConfig && c.fn) {\n    const [track, trigger] = createSignal(undefined, {\n      equals: false\n    });\n    const ordinary = ExternalSourceConfig.factory(c.fn, trigger);\n    onCleanup(() => ordinary.dispose());\n    const triggerInTransition = () => startTransition(trigger).then(() => inTransition.dispose());\n    const inTransition = ExternalSourceConfig.factory(c.fn, triggerInTransition);\n    c.fn = x => {\n      track();\n      return Transition && Transition.running ? inTransition.track(x) : ordinary.track(x);\n    };\n  }\n  return c;\n}\nfunction runTop(node) {\n  const runningTransition = Transition && Transition.running;\n  if ((runningTransition ? node.tState : node.state) === 0) return;\n  if ((runningTransition ? node.tState : node.state) === PENDING) return lookUpstream(node);\n  if (node.suspense && untrack(node.suspense.inFallback)) return node.suspense.effects.push(node);\n  const ancestors = [node];\n  while ((node = node.owner) && (!node.updatedAt || node.updatedAt < ExecCount)) {\n    if (runningTransition && Transition.disposed.has(node)) return;\n    if (runningTransition ? node.tState : node.state) ancestors.push(node);\n  }\n  for (let i = ancestors.length - 1; i >= 0; i--) {\n    node = ancestors[i];\n    if (runningTransition) {\n      let top = node,\n        prev = ancestors[i + 1];\n      while ((top = top.owner) && top !== prev) {\n        if (Transition.disposed.has(top)) return;\n      }\n    }\n    if ((runningTransition ? node.tState : node.state) === STALE) {\n      updateComputation(node);\n    } else if ((runningTransition ? node.tState : node.state) === PENDING) {\n      const updates = Updates;\n      Updates = null;\n      runUpdates(() => lookUpstream(node, ancestors[0]), false);\n      Updates = updates;\n    }\n  }\n}\nfunction runUpdates(fn, init) {\n  if (Updates) return fn();\n  let wait = false;\n  if (!init) Updates = [];\n  if (Effects) wait = true;\n  else Effects = [];\n  ExecCount++;\n  try {\n    const res = fn();\n    completeUpdates(wait);\n    return res;\n  } catch (err) {\n    if (!wait) Effects = null;\n    Updates = null;\n    handleError(err);\n  }\n}\nfunction completeUpdates(wait) {\n  if (Updates) {\n    if (Scheduler && Transition && Transition.running) scheduleQueue(Updates);\n    else runQueue(Updates);\n    Updates = null;\n  }\n  if (wait) return;\n  let res;\n  if (Transition) {\n    if (!Transition.promises.size && !Transition.queue.size) {\n      const sources = Transition.sources;\n      const disposed = Transition.disposed;\n      Effects.push.apply(Effects, Transition.effects);\n      res = Transition.resolve;\n      for (const e of Effects) {\n        \"tState\" in e && (e.state = e.tState);\n        delete e.tState;\n      }\n      Transition = null;\n      runUpdates(() => {\n        for (const d of disposed) cleanNode(d);\n        for (const v of sources) {\n          v.value = v.tValue;\n          if (v.owned) {\n            for (let i = 0, len = v.owned.length; i < len; i++) cleanNode(v.owned[i]);\n          }\n          if (v.tOwned) v.owned = v.tOwned;\n          delete v.tValue;\n          delete v.tOwned;\n          v.tState = 0;\n        }\n        setTransPending(false);\n      }, false);\n    } else if (Transition.running) {\n      Transition.running = false;\n      Transition.effects.push.apply(Transition.effects, Effects);\n      Effects = null;\n      setTransPending(true);\n      return;\n    }\n  }\n  const e = Effects;\n  Effects = null;\n  if (e.length) runUpdates(() => runEffects(e), false);\n  if (res) res();\n}\nfunction runQueue(queue) {\n  for (let i = 0; i < queue.length; i++) runTop(queue[i]);\n}\nfunction scheduleQueue(queue) {\n  for (let i = 0; i < queue.length; i++) {\n    const item = queue[i];\n    const tasks = Transition.queue;\n    if (!tasks.has(item)) {\n      tasks.add(item);\n      Scheduler(() => {\n        tasks.delete(item);\n        runUpdates(() => {\n          Transition.running = true;\n          runTop(item);\n        }, false);\n        Transition && (Transition.running = false);\n      });\n    }\n  }\n}\nfunction runUserEffects(queue) {\n  let i,\n    userLength = 0;\n  for (i = 0; i < queue.length; i++) {\n    const e = queue[i];\n    if (!e.user) runTop(e);\n    else queue[userLength++] = e;\n  }\n  if (sharedConfig.context) {\n    if (sharedConfig.count) {\n      sharedConfig.effects || (sharedConfig.effects = []);\n      sharedConfig.effects.push(...queue.slice(0, userLength));\n      return;\n    }\n    setHydrateContext();\n  }\n  if (sharedConfig.effects && (sharedConfig.done || !sharedConfig.count)) {\n    queue = [...sharedConfig.effects, ...queue];\n    userLength += sharedConfig.effects.length;\n    delete sharedConfig.effects;\n  }\n  for (i = 0; i < userLength; i++) runTop(queue[i]);\n}\nfunction lookUpstream(node, ignore) {\n  const runningTransition = Transition && Transition.running;\n  if (runningTransition) node.tState = 0;\n  else node.state = 0;\n  for (let i = 0; i < node.sources.length; i += 1) {\n    const source = node.sources[i];\n    if (source.sources) {\n      const state = runningTransition ? source.tState : source.state;\n      if (state === STALE) {\n        if (source !== ignore && (!source.updatedAt || source.updatedAt < ExecCount))\n          runTop(source);\n      } else if (state === PENDING) lookUpstream(source, ignore);\n    }\n  }\n}\nfunction markDownstream(node) {\n  const runningTransition = Transition && Transition.running;\n  for (let i = 0; i < node.observers.length; i += 1) {\n    const o = node.observers[i];\n    if (runningTransition ? !o.tState : !o.state) {\n      if (runningTransition) o.tState = PENDING;\n      else o.state = PENDING;\n      if (o.pure) Updates.push(o);\n      else Effects.push(o);\n      o.observers && markDownstream(o);\n    }\n  }\n}\nfunction cleanNode(node) {\n  let i;\n  if (node.sources) {\n    while (node.sources.length) {\n      const source = node.sources.pop(),\n        index = node.sourceSlots.pop(),\n        obs = source.observers;\n      if (obs && obs.length) {\n        const n = obs.pop(),\n          s = source.observerSlots.pop();\n        if (index < obs.length) {\n          n.sourceSlots[s] = index;\n          obs[index] = n;\n          source.observerSlots[index] = s;\n        }\n      }\n    }\n  }\n  if (node.tOwned) {\n    for (i = node.tOwned.length - 1; i >= 0; i--) cleanNode(node.tOwned[i]);\n    delete node.tOwned;\n  }\n  if (Transition && Transition.running && node.pure) {\n    reset(node, true);\n  } else if (node.owned) {\n    for (i = node.owned.length - 1; i >= 0; i--) cleanNode(node.owned[i]);\n    node.owned = null;\n  }\n  if (node.cleanups) {\n    for (i = node.cleanups.length - 1; i >= 0; i--) node.cleanups[i]();\n    node.cleanups = null;\n  }\n  if (Transition && Transition.running) node.tState = 0;\n  else node.state = 0;\n}\nfunction reset(node, top) {\n  if (!top) {\n    node.tState = 0;\n    Transition.disposed.add(node);\n  }\n  if (node.owned) {\n    for (let i = 0; i < node.owned.length; i++) reset(node.owned[i]);\n  }\n}\nfunction castError(err) {\n  if (err instanceof Error) return err;\n  return new Error(typeof err === \"string\" ? err : \"Unknown error\", {\n    cause: err\n  });\n}\nfunction runErrors(err, fns, owner) {\n  try {\n    for (const f of fns) f(err);\n  } catch (e) {\n    handleError(e, (owner && owner.owner) || null);\n  }\n}\nfunction handleError(err, owner = Owner) {\n  const fns = ERROR && owner && owner.context && owner.context[ERROR];\n  const error = castError(err);\n  if (!fns) throw error;\n  if (Effects)\n    Effects.push({\n      fn() {\n        runErrors(error, fns, owner);\n      },\n      state: STALE\n    });\n  else runErrors(error, fns, owner);\n}\nfunction resolveChildren(children) {\n  if (typeof children === \"function\" && !children.length) return resolveChildren(children());\n  if (Array.isArray(children)) {\n    const results = [];\n    for (let i = 0; i < children.length; i++) {\n      const result = resolveChildren(children[i]);\n      Array.isArray(result) ? results.push.apply(results, result) : results.push(result);\n    }\n    return results;\n  }\n  return children;\n}\nfunction createProvider(id, options) {\n  return function provider(props) {\n    let res;\n    createRenderEffect(\n      () =>\n        (res = untrack(() => {\n          Owner.context = {\n            ...Owner.context,\n            [id]: props.value\n          };\n          return children(() => props.children);\n        })),\n      undefined\n    );\n    return res;\n  };\n}\nfunction onError(fn) {\n  ERROR || (ERROR = Symbol(\"error\"));\n  if (Owner === null);\n  else if (Owner.context === null || !Owner.context[ERROR]) {\n    Owner.context = {\n      ...Owner.context,\n      [ERROR]: [fn]\n    };\n    mutateContext(Owner, ERROR, [fn]);\n  } else Owner.context[ERROR].push(fn);\n}\nfunction mutateContext(o, key, value) {\n  if (o.owned) {\n    for (let i = 0; i < o.owned.length; i++) {\n      if (o.owned[i].context === o.context) mutateContext(o.owned[i], key, value);\n      if (!o.owned[i].context) {\n        o.owned[i].context = o.context;\n        mutateContext(o.owned[i], key, value);\n      } else if (!o.owned[i].context[key]) {\n        o.owned[i].context[key] = value;\n        mutateContext(o.owned[i], key, value);\n      }\n    }\n  }\n}\n\nfunction observable(input) {\n  return {\n    subscribe(observer) {\n      if (!(observer instanceof Object) || observer == null) {\n        throw new TypeError(\"Expected the observer to be an object.\");\n      }\n      const handler =\n        typeof observer === \"function\" ? observer : observer.next && observer.next.bind(observer);\n      if (!handler) {\n        return {\n          unsubscribe() {}\n        };\n      }\n      const dispose = createRoot(disposer => {\n        createEffect(() => {\n          const v = input();\n          untrack(() => handler(v));\n        });\n        return disposer;\n      });\n      if (getOwner()) onCleanup(dispose);\n      return {\n        unsubscribe() {\n          dispose();\n        }\n      };\n    },\n    [Symbol.observable || \"@@observable\"]() {\n      return this;\n    }\n  };\n}\nfunction from(producer, initalValue = undefined) {\n  const [s, set] = createSignal(initalValue, {\n    equals: false\n  });\n  if (\"subscribe\" in producer) {\n    const unsub = producer.subscribe(v => set(() => v));\n    onCleanup(() => (\"unsubscribe\" in unsub ? unsub.unsubscribe() : unsub()));\n  } else {\n    const clean = producer(set);\n    onCleanup(clean);\n  }\n  return s;\n}\n\nconst FALLBACK = Symbol(\"fallback\");\nfunction dispose(d) {\n  for (let i = 0; i < d.length; i++) d[i]();\n}\nfunction mapArray(list, mapFn, options = {}) {\n  let items = [],\n    mapped = [],\n    disposers = [],\n    len = 0,\n    indexes = mapFn.length > 1 ? [] : null;\n  onCleanup(() => dispose(disposers));\n  return () => {\n    let newItems = list() || [],\n      newLen = newItems.length,\n      i,\n      j;\n    newItems[$TRACK];\n    return untrack(() => {\n      let newIndices, newIndicesNext, temp, tempdisposers, tempIndexes, start, end, newEnd, item;\n      if (newLen === 0) {\n        if (len !== 0) {\n          dispose(disposers);\n          disposers = [];\n          items = [];\n          mapped = [];\n          len = 0;\n          indexes && (indexes = []);\n        }\n        if (options.fallback) {\n          items = [FALLBACK];\n          mapped[0] = createRoot(disposer => {\n            disposers[0] = disposer;\n            return options.fallback();\n          });\n          len = 1;\n        }\n      } else if (len === 0) {\n        mapped = new Array(newLen);\n        for (j = 0; j < newLen; j++) {\n          items[j] = newItems[j];\n          mapped[j] = createRoot(mapper);\n        }\n        len = newLen;\n      } else {\n        temp = new Array(newLen);\n        tempdisposers = new Array(newLen);\n        indexes && (tempIndexes = new Array(newLen));\n        for (\n          start = 0, end = Math.min(len, newLen);\n          start < end && items[start] === newItems[start];\n          start++\n        );\n        for (\n          end = len - 1, newEnd = newLen - 1;\n          end >= start && newEnd >= start && items[end] === newItems[newEnd];\n          end--, newEnd--\n        ) {\n          temp[newEnd] = mapped[end];\n          tempdisposers[newEnd] = disposers[end];\n          indexes && (tempIndexes[newEnd] = indexes[end]);\n        }\n        newIndices = new Map();\n        newIndicesNext = new Array(newEnd + 1);\n        for (j = newEnd; j >= start; j--) {\n          item = newItems[j];\n          i = newIndices.get(item);\n          newIndicesNext[j] = i === undefined ? -1 : i;\n          newIndices.set(item, j);\n        }\n        for (i = start; i <= end; i++) {\n          item = items[i];\n          j = newIndices.get(item);\n          if (j !== undefined && j !== -1) {\n            temp[j] = mapped[i];\n            tempdisposers[j] = disposers[i];\n            indexes && (tempIndexes[j] = indexes[i]);\n            j = newIndicesNext[j];\n            newIndices.set(item, j);\n          } else disposers[i]();\n        }\n        for (j = start; j < newLen; j++) {\n          if (j in temp) {\n            mapped[j] = temp[j];\n            disposers[j] = tempdisposers[j];\n            if (indexes) {\n              indexes[j] = tempIndexes[j];\n              indexes[j](j);\n            }\n          } else mapped[j] = createRoot(mapper);\n        }\n        mapped = mapped.slice(0, (len = newLen));\n        items = newItems.slice(0);\n      }\n      return mapped;\n    });\n    function mapper(disposer) {\n      disposers[j] = disposer;\n      if (indexes) {\n        const [s, set] = createSignal(j);\n        indexes[j] = set;\n        return mapFn(newItems[j], s);\n      }\n      return mapFn(newItems[j]);\n    }\n  };\n}\nfunction indexArray(list, mapFn, options = {}) {\n  let items = [],\n    mapped = [],\n    disposers = [],\n    signals = [],\n    len = 0,\n    i;\n  onCleanup(() => dispose(disposers));\n  return () => {\n    const newItems = list() || [],\n      newLen = newItems.length;\n    newItems[$TRACK];\n    return untrack(() => {\n      if (newLen === 0) {\n        if (len !== 0) {\n          dispose(disposers);\n          disposers = [];\n          items = [];\n          mapped = [];\n          len = 0;\n          signals = [];\n        }\n        if (options.fallback) {\n          items = [FALLBACK];\n          mapped[0] = createRoot(disposer => {\n            disposers[0] = disposer;\n            return options.fallback();\n          });\n          len = 1;\n        }\n        return mapped;\n      }\n      if (items[0] === FALLBACK) {\n        disposers[0]();\n        disposers = [];\n        items = [];\n        mapped = [];\n        len = 0;\n      }\n      for (i = 0; i < newLen; i++) {\n        if (i < items.length && items[i] !== newItems[i]) {\n          signals[i](() => newItems[i]);\n        } else if (i >= items.length) {\n          mapped[i] = createRoot(mapper);\n        }\n      }\n      for (; i < items.length; i++) {\n        disposers[i]();\n      }\n      len = signals.length = disposers.length = newLen;\n      items = newItems.slice(0);\n      return (mapped = mapped.slice(0, len));\n    });\n    function mapper(disposer) {\n      disposers[i] = disposer;\n      const [s, set] = createSignal(newItems[i]);\n      signals[i] = set;\n      return mapFn(s, i);\n    }\n  };\n}\n\nlet hydrationEnabled = false;\nfunction enableHydration() {\n  hydrationEnabled = true;\n}\nfunction createComponent(Comp, props) {\n  if (hydrationEnabled) {\n    if (sharedConfig.context) {\n      const c = sharedConfig.context;\n      setHydrateContext(nextHydrateContext());\n      const r = untrack(() => Comp(props || {}));\n      setHydrateContext(c);\n      return r;\n    }\n  }\n  return untrack(() => Comp(props || {}));\n}\nfunction trueFn() {\n  return true;\n}\nconst propTraps = {\n  get(_, property, receiver) {\n    if (property === $PROXY) return receiver;\n    return _.get(property);\n  },\n  has(_, property) {\n    if (property === $PROXY) return true;\n    return _.has(property);\n  },\n  set: trueFn,\n  deleteProperty: trueFn,\n  getOwnPropertyDescriptor(_, property) {\n    return {\n      configurable: true,\n      enumerable: true,\n      get() {\n        return _.get(property);\n      },\n      set: trueFn,\n      deleteProperty: trueFn\n    };\n  },\n  ownKeys(_) {\n    return _.keys();\n  }\n};\nfunction resolveSource(s) {\n  return !(s = typeof s === \"function\" ? s() : s) ? {} : s;\n}\nfunction resolveSources() {\n  for (let i = 0, length = this.length; i < length; ++i) {\n    const v = this[i]();\n    if (v !== undefined) return v;\n  }\n}\nfunction mergeProps(...sources) {\n  let proxy = false;\n  for (let i = 0; i < sources.length; i++) {\n    const s = sources[i];\n    proxy = proxy || (!!s && $PROXY in s);\n    sources[i] = typeof s === \"function\" ? ((proxy = true), createMemo(s)) : s;\n  }\n  if (SUPPORTS_PROXY && proxy) {\n    return new Proxy(\n      {\n        get(property) {\n          for (let i = sources.length - 1; i >= 0; i--) {\n            const v = resolveSource(sources[i])[property];\n            if (v !== undefined) return v;\n          }\n        },\n        has(property) {\n          for (let i = sources.length - 1; i >= 0; i--) {\n            if (property in resolveSource(sources[i])) return true;\n          }\n          return false;\n        },\n        keys() {\n          const keys = [];\n          for (let i = 0; i < sources.length; i++)\n            keys.push(...Object.keys(resolveSource(sources[i])));\n          return [...new Set(keys)];\n        }\n      },\n      propTraps\n    );\n  }\n  const sourcesMap = {};\n  const defined = Object.create(null);\n  for (let i = sources.length - 1; i >= 0; i--) {\n    const source = sources[i];\n    if (!source) continue;\n    const sourceKeys = Object.getOwnPropertyNames(source);\n    for (let i = sourceKeys.length - 1; i >= 0; i--) {\n      const key = sourceKeys[i];\n      if (key === \"__proto__\" || key === \"constructor\") continue;\n      const desc = Object.getOwnPropertyDescriptor(source, key);\n      if (!defined[key]) {\n        defined[key] = desc.get\n          ? {\n              enumerable: true,\n              configurable: true,\n              get: resolveSources.bind((sourcesMap[key] = [desc.get.bind(source)]))\n            }\n          : desc.value !== undefined\n          ? desc\n          : undefined;\n      } else {\n        const sources = sourcesMap[key];\n        if (sources) {\n          if (desc.get) sources.push(desc.get.bind(source));\n          else if (desc.value !== undefined) sources.push(() => desc.value);\n        }\n      }\n    }\n  }\n  const target = {};\n  const definedKeys = Object.keys(defined);\n  for (let i = definedKeys.length - 1; i >= 0; i--) {\n    const key = definedKeys[i],\n      desc = defined[key];\n    if (desc && desc.get) Object.defineProperty(target, key, desc);\n    else target[key] = desc ? desc.value : undefined;\n  }\n  return target;\n}\nfunction splitProps(props, ...keys) {\n  if (SUPPORTS_PROXY && $PROXY in props) {\n    const blocked = new Set(keys.length > 1 ? keys.flat() : keys[0]);\n    const res = keys.map(k => {\n      return new Proxy(\n        {\n          get(property) {\n            return k.includes(property) ? props[property] : undefined;\n          },\n          has(property) {\n            return k.includes(property) && property in props;\n          },\n          keys() {\n            return k.filter(property => property in props);\n          }\n        },\n        propTraps\n      );\n    });\n    res.push(\n      new Proxy(\n        {\n          get(property) {\n            return blocked.has(property) ? undefined : props[property];\n          },\n          has(property) {\n            return blocked.has(property) ? false : property in props;\n          },\n          keys() {\n            return Object.keys(props).filter(k => !blocked.has(k));\n          }\n        },\n        propTraps\n      )\n    );\n    return res;\n  }\n  const otherObject = {};\n  const objects = keys.map(() => ({}));\n  for (const propName of Object.getOwnPropertyNames(props)) {\n    const desc = Object.getOwnPropertyDescriptor(props, propName);\n    const isDefaultDesc =\n      !desc.get && !desc.set && desc.enumerable && desc.writable && desc.configurable;\n    let blocked = false;\n    let objectIndex = 0;\n    for (const k of keys) {\n      if (k.includes(propName)) {\n        blocked = true;\n        isDefaultDesc\n          ? (objects[objectIndex][propName] = desc.value)\n          : Object.defineProperty(objects[objectIndex], propName, desc);\n      }\n      ++objectIndex;\n    }\n    if (!blocked) {\n      isDefaultDesc\n        ? (otherObject[propName] = desc.value)\n        : Object.defineProperty(otherObject, propName, desc);\n    }\n  }\n  return [...objects, otherObject];\n}\nfunction lazy(fn) {\n  let comp;\n  let p;\n  const wrap = props => {\n    const ctx = sharedConfig.context;\n    if (ctx) {\n      const [s, set] = createSignal();\n      sharedConfig.count || (sharedConfig.count = 0);\n      sharedConfig.count++;\n      (p || (p = fn())).then(mod => {\n        !sharedConfig.done && setHydrateContext(ctx);\n        sharedConfig.count--;\n        set(() => mod.default);\n        setHydrateContext();\n      });\n      comp = s;\n    } else if (!comp) {\n      const [s] = createResource(() => (p || (p = fn())).then(mod => mod.default));\n      comp = s;\n    }\n    let Comp;\n    return createMemo(() =>\n      (Comp = comp())\n        ? untrack(() => {\n            if (IS_DEV);\n            if (!ctx || sharedConfig.done) return Comp(props);\n            const c = sharedConfig.context;\n            setHydrateContext(ctx);\n            const r = Comp(props);\n            setHydrateContext(c);\n            return r;\n          })\n        : \"\"\n    );\n  };\n  wrap.preload = () => p || ((p = fn()).then(mod => (comp = () => mod.default)), p);\n  return wrap;\n}\nlet counter = 0;\nfunction createUniqueId() {\n  const ctx = sharedConfig.context;\n  return ctx ? sharedConfig.getNextContextId() : `cl-${counter++}`;\n}\n\nconst narrowedError = name => `Stale read from <${name}>.`;\nfunction For(props) {\n  const fallback = \"fallback\" in props && {\n    fallback: () => props.fallback\n  };\n  return createMemo(mapArray(() => props.each, props.children, fallback || undefined));\n}\nfunction Index(props) {\n  const fallback = \"fallback\" in props && {\n    fallback: () => props.fallback\n  };\n  return createMemo(indexArray(() => props.each, props.children, fallback || undefined));\n}\nfunction Show(props) {\n  const keyed = props.keyed;\n  const conditionValue = createMemo(() => props.when, undefined, undefined);\n  const condition = keyed\n    ? conditionValue\n    : createMemo(conditionValue, undefined, {\n        equals: (a, b) => !a === !b\n      });\n  return createMemo(\n    () => {\n      const c = condition();\n      if (c) {\n        const child = props.children;\n        const fn = typeof child === \"function\" && child.length > 0;\n        return fn\n          ? untrack(() =>\n              child(\n                keyed\n                  ? c\n                  : () => {\n                      if (!untrack(condition)) throw narrowedError(\"Show\");\n                      return conditionValue();\n                    }\n              )\n            )\n          : child;\n      }\n      return props.fallback;\n    },\n    undefined,\n    undefined\n  );\n}\nfunction Switch(props) {\n  const chs = children(() => props.children);\n  const switchFunc = createMemo(() => {\n    const ch = chs();\n    const mps = Array.isArray(ch) ? ch : [ch];\n    let func = () => undefined;\n    for (let i = 0; i < mps.length; i++) {\n      const index = i;\n      const mp = mps[i];\n      const prevFunc = func;\n      const conditionValue = createMemo(\n        () => (prevFunc() ? undefined : mp.when),\n        undefined,\n        undefined\n      );\n      const condition = mp.keyed\n        ? conditionValue\n        : createMemo(conditionValue, undefined, {\n            equals: (a, b) => !a === !b\n          });\n      func = () => prevFunc() || (condition() ? [index, conditionValue, mp] : undefined);\n    }\n    return func;\n  });\n  return createMemo(\n    () => {\n      const sel = switchFunc()();\n      if (!sel) return props.fallback;\n      const [index, conditionValue, mp] = sel;\n      const child = mp.children;\n      const fn = typeof child === \"function\" && child.length > 0;\n      return fn\n        ? untrack(() =>\n            child(\n              mp.keyed\n                ? conditionValue()\n                : () => {\n                    if (untrack(switchFunc)()?.[0] !== index) throw narrowedError(\"Match\");\n                    return conditionValue();\n                  }\n            )\n          )\n        : child;\n    },\n    undefined,\n    undefined\n  );\n}\nfunction Match(props) {\n  return props;\n}\nlet Errors;\nfunction resetErrorBoundaries() {\n  Errors && [...Errors].forEach(fn => fn());\n}\nfunction ErrorBoundary(props) {\n  let err;\n  if (sharedConfig.context && sharedConfig.load)\n    err = sharedConfig.load(sharedConfig.getContextId());\n  const [errored, setErrored] = createSignal(err, undefined);\n  Errors || (Errors = new Set());\n  Errors.add(setErrored);\n  onCleanup(() => Errors.delete(setErrored));\n  return createMemo(\n    () => {\n      let e;\n      if ((e = errored())) {\n        const f = props.fallback;\n        return typeof f === \"function\" && f.length ? untrack(() => f(e, () => setErrored())) : f;\n      }\n      return catchError(() => props.children, setErrored);\n    },\n    undefined,\n    undefined\n  );\n}\n\nconst suspenseListEquals = (a, b) =>\n  a.showContent === b.showContent && a.showFallback === b.showFallback;\nconst SuspenseListContext = /* #__PURE__ */ createContext();\nfunction SuspenseList(props) {\n  let [wrapper, setWrapper] = createSignal(() => ({\n      inFallback: false\n    })),\n    show;\n  const listContext = useContext(SuspenseListContext);\n  const [registry, setRegistry] = createSignal([]);\n  if (listContext) {\n    show = listContext.register(createMemo(() => wrapper()().inFallback));\n  }\n  const resolved = createMemo(\n    prev => {\n      const reveal = props.revealOrder,\n        tail = props.tail,\n        { showContent = true, showFallback = true } = show ? show() : {},\n        reg = registry(),\n        reverse = reveal === \"backwards\";\n      if (reveal === \"together\") {\n        const all = reg.every(inFallback => !inFallback());\n        const res = reg.map(() => ({\n          showContent: all && showContent,\n          showFallback\n        }));\n        res.inFallback = !all;\n        return res;\n      }\n      let stop = false;\n      let inFallback = prev.inFallback;\n      const res = [];\n      for (let i = 0, len = reg.length; i < len; i++) {\n        const n = reverse ? len - i - 1 : i,\n          s = reg[n]();\n        if (!stop && !s) {\n          res[n] = {\n            showContent,\n            showFallback\n          };\n        } else {\n          const next = !stop;\n          if (next) inFallback = true;\n          res[n] = {\n            showContent: next,\n            showFallback: !tail || (next && tail === \"collapsed\") ? showFallback : false\n          };\n          stop = true;\n        }\n      }\n      if (!stop) inFallback = false;\n      res.inFallback = inFallback;\n      return res;\n    },\n    {\n      inFallback: false\n    }\n  );\n  setWrapper(() => resolved);\n  return createComponent(SuspenseListContext.Provider, {\n    value: {\n      register: inFallback => {\n        let index;\n        setRegistry(registry => {\n          index = registry.length;\n          return [...registry, inFallback];\n        });\n        return createMemo(() => resolved()[index], undefined, {\n          equals: suspenseListEquals\n        });\n      }\n    },\n    get children() {\n      return props.children;\n    }\n  });\n}\nfunction Suspense(props) {\n  let counter = 0,\n    show,\n    ctx,\n    p,\n    flicker,\n    error;\n  const [inFallback, setFallback] = createSignal(false),\n    SuspenseContext = getSuspenseContext(),\n    store = {\n      increment: () => {\n        if (++counter === 1) setFallback(true);\n      },\n      decrement: () => {\n        if (--counter === 0) setFallback(false);\n      },\n      inFallback,\n      effects: [],\n      resolved: false\n    },\n    owner = getOwner();\n  if (sharedConfig.context && sharedConfig.load) {\n    const key = sharedConfig.getContextId();\n    let ref = sharedConfig.load(key);\n    if (ref) {\n      if (typeof ref !== \"object\" || ref.status !== \"success\") p = ref;\n      else sharedConfig.gather(key);\n    }\n    if (p && p !== \"$$f\") {\n      const [s, set] = createSignal(undefined, {\n        equals: false\n      });\n      flicker = s;\n      p.then(\n        () => {\n          if (sharedConfig.done) return set();\n          sharedConfig.gather(key);\n          setHydrateContext(ctx);\n          set();\n          setHydrateContext();\n        },\n        err => {\n          error = err;\n          set();\n        }\n      );\n    }\n  }\n  const listContext = useContext(SuspenseListContext);\n  if (listContext) show = listContext.register(store.inFallback);\n  let dispose;\n  onCleanup(() => dispose && dispose());\n  return createComponent(SuspenseContext.Provider, {\n    value: store,\n    get children() {\n      return createMemo(() => {\n        if (error) throw error;\n        ctx = sharedConfig.context;\n        if (flicker) {\n          flicker();\n          return (flicker = undefined);\n        }\n        if (ctx && p === \"$$f\") setHydrateContext();\n        const rendered = createMemo(() => props.children);\n        return createMemo(prev => {\n          const inFallback = store.inFallback(),\n            { showContent = true, showFallback = true } = show ? show() : {};\n          if ((!inFallback || (p && p !== \"$$f\")) && showContent) {\n            store.resolved = true;\n            dispose && dispose();\n            dispose = ctx = p = undefined;\n            resumeEffects(store.effects);\n            return rendered();\n          }\n          if (!showFallback) return;\n          if (dispose) return prev;\n          return createRoot(disposer => {\n            dispose = disposer;\n            if (ctx) {\n              setHydrateContext({\n                id: ctx.id + \"F\",\n                count: 0\n              });\n              ctx = undefined;\n            }\n            return props.fallback;\n          }, owner);\n        });\n      });\n    }\n  });\n}\n\nconst DEV = undefined;\n\nexport {\n  $DEVCOMP,\n  $PROXY,\n  $TRACK,\n  DEV,\n  ErrorBoundary,\n  For,\n  Index,\n  Match,\n  Show,\n  Suspense,\n  SuspenseList,\n  Switch,\n  batch,\n  cancelCallback,\n  catchError,\n  children,\n  createComponent,\n  createComputed,\n  createContext,\n  createDeferred,\n  createEffect,\n  createMemo,\n  createReaction,\n  createRenderEffect,\n  createResource,\n  createRoot,\n  createSelector,\n  createSignal,\n  createUniqueId,\n  enableExternalSource,\n  enableHydration,\n  enableScheduling,\n  equalFn,\n  from,\n  getListener,\n  getOwner,\n  indexArray,\n  lazy,\n  mapArray,\n  mergeProps,\n  observable,\n  on,\n  onCleanup,\n  onError,\n  onMount,\n  requestCallback,\n  resetErrorBoundaries,\n  runWithOwner,\n  sharedConfig,\n  splitProps,\n  startTransition,\n  untrack,\n  useContext,\n  useTransition\n};\n"],"names":["sharedConfig","undefined","getContextId","count","num","String","len","Symbol","signalOptions","a","b","UNOWNED","Owner","Transition","Listener","Updates","Effects","ExecCount","createRoot","fn","detachedOwner","listener","owner","unowned","current","root","updateFn","untrack","cleanNode","runUpdates","createSignal","value","options","s","Object","readSignal","writeSignal","createRenderEffect","updateComputation","createComputation","init","pure","state","c","setTransPending","runningTransition","updates","lookUpstream","sSlot","node","isComp","TransitionRunning","i","o","markDownstream","Error","time","runComputation","queueMicrotask","nextValue","err","handleError","runTop","ancestors","top","prev","wait","res","completeUpdates","runQueue","sources","disposed","e","d","v","runEffects","queue","ignore","source","index","obs","n","reset","runErrors","fns","f","error","createComponent","Comp","props"],"mappings":"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"}